/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.patch;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class RefFieldsEnsureStruct implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("RefFieldsEnsureStruct");
  private static final TField UNIQUE_FIELD_DESC = new TField("unique", TType.LIST, (short)1);
  private static final TField SHARED_CONST_FIELD_DESC = new TField("shared_const", TType.LIST, (short)2);
  private static final TField SHARED_MUSTABLE_FIELD_DESC = new TField("shared_mustable", TType.LIST, (short)3);
  private static final TField OPT_UNIQUE_FIELD_DESC = new TField("opt_unique", TType.LIST, (short)4);
  private static final TField OPT_SHARED_CONST_FIELD_DESC = new TField("opt_shared_const", TType.LIST, (short)5);
  private static final TField OPT_SHARED_MUSTABLE_FIELD_DESC = new TField("opt_shared_mustable", TType.LIST, (short)6);
  private static final TField OPT_BOX_FIELD_DESC = new TField("opt_box", TType.LIST, (short)7);

  public final List<Integer> unique;
  public final List<Integer> shared_const;
  public final List<Integer> shared_mustable;
  public final List<Integer> opt_unique;
  public final List<Integer> opt_shared_const;
  public final List<Integer> opt_shared_mustable;
  public final List<Integer> opt_box;
  public static final int UNIQUE = 1;
  public static final int SHARED_CONST = 2;
  public static final int SHARED_MUSTABLE = 3;
  public static final int OPT_UNIQUE = 4;
  public static final int OPT_SHARED_CONST = 5;
  public static final int OPT_SHARED_MUSTABLE = 6;
  public static final int OPT_BOX = 7;

  public RefFieldsEnsureStruct(
      List<Integer> unique,
      List<Integer> shared_const,
      List<Integer> shared_mustable,
      List<Integer> opt_unique,
      List<Integer> opt_shared_const,
      List<Integer> opt_shared_mustable,
      List<Integer> opt_box) {
    this.unique = unique;
    this.shared_const = shared_const;
    this.shared_mustable = shared_mustable;
    this.opt_unique = opt_unique;
    this.opt_shared_const = opt_shared_const;
    this.opt_shared_mustable = opt_shared_mustable;
    this.opt_box = opt_box;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefFieldsEnsureStruct(RefFieldsEnsureStruct other) {
    if (other.isSetUnique()) {
      this.unique = TBaseHelper.deepCopy(other.unique);
    } else {
      this.unique = null;
    }
    if (other.isSetShared_const()) {
      this.shared_const = TBaseHelper.deepCopy(other.shared_const);
    } else {
      this.shared_const = null;
    }
    if (other.isSetShared_mustable()) {
      this.shared_mustable = TBaseHelper.deepCopy(other.shared_mustable);
    } else {
      this.shared_mustable = null;
    }
    if (other.isSetOpt_unique()) {
      this.opt_unique = TBaseHelper.deepCopy(other.opt_unique);
    } else {
      this.opt_unique = null;
    }
    if (other.isSetOpt_shared_const()) {
      this.opt_shared_const = TBaseHelper.deepCopy(other.opt_shared_const);
    } else {
      this.opt_shared_const = null;
    }
    if (other.isSetOpt_shared_mustable()) {
      this.opt_shared_mustable = TBaseHelper.deepCopy(other.opt_shared_mustable);
    } else {
      this.opt_shared_mustable = null;
    }
    if (other.isSetOpt_box()) {
      this.opt_box = TBaseHelper.deepCopy(other.opt_box);
    } else {
      this.opt_box = null;
    }
  }

  public RefFieldsEnsureStruct deepCopy() {
    return new RefFieldsEnsureStruct(this);
  }

  public List<Integer> getUnique() {
    return this.unique;
  }

  // Returns true if field unique is set (has been assigned a value) and false otherwise
  public boolean isSetUnique() {
    return this.unique != null;
  }

  public List<Integer> getShared_const() {
    return this.shared_const;
  }

  // Returns true if field shared_const is set (has been assigned a value) and false otherwise
  public boolean isSetShared_const() {
    return this.shared_const != null;
  }

  public List<Integer> getShared_mustable() {
    return this.shared_mustable;
  }

  // Returns true if field shared_mustable is set (has been assigned a value) and false otherwise
  public boolean isSetShared_mustable() {
    return this.shared_mustable != null;
  }

  public List<Integer> getOpt_unique() {
    return this.opt_unique;
  }

  // Returns true if field opt_unique is set (has been assigned a value) and false otherwise
  public boolean isSetOpt_unique() {
    return this.opt_unique != null;
  }

  public List<Integer> getOpt_shared_const() {
    return this.opt_shared_const;
  }

  // Returns true if field opt_shared_const is set (has been assigned a value) and false otherwise
  public boolean isSetOpt_shared_const() {
    return this.opt_shared_const != null;
  }

  public List<Integer> getOpt_shared_mustable() {
    return this.opt_shared_mustable;
  }

  // Returns true if field opt_shared_mustable is set (has been assigned a value) and false otherwise
  public boolean isSetOpt_shared_mustable() {
    return this.opt_shared_mustable != null;
  }

  public List<Integer> getOpt_box() {
    return this.opt_box;
  }

  // Returns true if field opt_box is set (has been assigned a value) and false otherwise
  public boolean isSetOpt_box() {
    return this.opt_box != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof RefFieldsEnsureStruct))
      return false;
    RefFieldsEnsureStruct that = (RefFieldsEnsureStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetUnique(), that.isSetUnique(), this.unique, that.unique)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetShared_const(), that.isSetShared_const(), this.shared_const, that.shared_const)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetShared_mustable(), that.isSetShared_mustable(), this.shared_mustable, that.shared_mustable)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOpt_unique(), that.isSetOpt_unique(), this.opt_unique, that.opt_unique)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOpt_shared_const(), that.isSetOpt_shared_const(), this.opt_shared_const, that.opt_shared_const)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOpt_shared_mustable(), that.isSetOpt_shared_mustable(), this.opt_shared_mustable, that.opt_shared_mustable)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOpt_box(), that.isSetOpt_box(), this.opt_box, that.opt_box)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {unique, shared_const, shared_mustable, opt_unique, opt_shared_const, opt_shared_mustable, opt_box});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static RefFieldsEnsureStruct deserialize(TProtocol iprot) throws TException {
    List<Integer> tmp_unique = null;
    List<Integer> tmp_shared_const = null;
    List<Integer> tmp_shared_mustable = null;
    List<Integer> tmp_opt_unique = null;
    List<Integer> tmp_opt_shared_const = null;
    List<Integer> tmp_opt_shared_mustable = null;
    List<Integer> tmp_opt_box = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case UNIQUE:
          if (__field.type == TType.LIST) {
            {
              TList _list372 = iprot.readListBegin();
              tmp_unique = new ArrayList<Integer>(Math.max(0, _list372.size));
              for (int _i373 = 0; 
                   (_list372.size < 0) ? iprot.peekList() : (_i373 < _list372.size); 
                   ++_i373)
              {
                Integer _elem374;
                _elem374 = iprot.readI32();
                tmp_unique.add(_elem374);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SHARED_CONST:
          if (__field.type == TType.LIST) {
            {
              TList _list375 = iprot.readListBegin();
              tmp_shared_const = new ArrayList<Integer>(Math.max(0, _list375.size));
              for (int _i376 = 0; 
                   (_list375.size < 0) ? iprot.peekList() : (_i376 < _list375.size); 
                   ++_i376)
              {
                Integer _elem377;
                _elem377 = iprot.readI32();
                tmp_shared_const.add(_elem377);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case SHARED_MUSTABLE:
          if (__field.type == TType.LIST) {
            {
              TList _list378 = iprot.readListBegin();
              tmp_shared_mustable = new ArrayList<Integer>(Math.max(0, _list378.size));
              for (int _i379 = 0; 
                   (_list378.size < 0) ? iprot.peekList() : (_i379 < _list378.size); 
                   ++_i379)
              {
                Integer _elem380;
                _elem380 = iprot.readI32();
                tmp_shared_mustable.add(_elem380);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPT_UNIQUE:
          if (__field.type == TType.LIST) {
            {
              TList _list381 = iprot.readListBegin();
              tmp_opt_unique = new ArrayList<Integer>(Math.max(0, _list381.size));
              for (int _i382 = 0; 
                   (_list381.size < 0) ? iprot.peekList() : (_i382 < _list381.size); 
                   ++_i382)
              {
                Integer _elem383;
                _elem383 = iprot.readI32();
                tmp_opt_unique.add(_elem383);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPT_SHARED_CONST:
          if (__field.type == TType.LIST) {
            {
              TList _list384 = iprot.readListBegin();
              tmp_opt_shared_const = new ArrayList<Integer>(Math.max(0, _list384.size));
              for (int _i385 = 0; 
                   (_list384.size < 0) ? iprot.peekList() : (_i385 < _list384.size); 
                   ++_i385)
              {
                Integer _elem386;
                _elem386 = iprot.readI32();
                tmp_opt_shared_const.add(_elem386);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPT_SHARED_MUSTABLE:
          if (__field.type == TType.LIST) {
            {
              TList _list387 = iprot.readListBegin();
              tmp_opt_shared_mustable = new ArrayList<Integer>(Math.max(0, _list387.size));
              for (int _i388 = 0; 
                   (_list387.size < 0) ? iprot.peekList() : (_i388 < _list387.size); 
                   ++_i388)
              {
                Integer _elem389;
                _elem389 = iprot.readI32();
                tmp_opt_shared_mustable.add(_elem389);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPT_BOX:
          if (__field.type == TType.LIST) {
            {
              TList _list390 = iprot.readListBegin();
              tmp_opt_box = new ArrayList<Integer>(Math.max(0, _list390.size));
              for (int _i391 = 0; 
                   (_list390.size < 0) ? iprot.peekList() : (_i391 < _list390.size); 
                   ++_i391)
              {
                Integer _elem392;
                _elem392 = iprot.readI32();
                tmp_opt_box.add(_elem392);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    RefFieldsEnsureStruct _that;
    _that = new RefFieldsEnsureStruct(
      tmp_unique
      ,tmp_shared_const
      ,tmp_shared_mustable
      ,tmp_opt_unique
      ,tmp_opt_shared_const
      ,tmp_opt_shared_mustable
      ,tmp_opt_box
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.unique != null) {
      if (isSetUnique()) {
        oprot.writeFieldBegin(UNIQUE_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.unique.size()));
          for (Integer _iter393 : this.unique)          {
            oprot.writeI32(_iter393);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.shared_const != null) {
      if (isSetShared_const()) {
        oprot.writeFieldBegin(SHARED_CONST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.shared_const.size()));
          for (Integer _iter394 : this.shared_const)          {
            oprot.writeI32(_iter394);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.shared_mustable != null) {
      if (isSetShared_mustable()) {
        oprot.writeFieldBegin(SHARED_MUSTABLE_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.shared_mustable.size()));
          for (Integer _iter395 : this.shared_mustable)          {
            oprot.writeI32(_iter395);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.opt_unique != null) {
      if (isSetOpt_unique()) {
        oprot.writeFieldBegin(OPT_UNIQUE_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.opt_unique.size()));
          for (Integer _iter396 : this.opt_unique)          {
            oprot.writeI32(_iter396);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.opt_shared_const != null) {
      if (isSetOpt_shared_const()) {
        oprot.writeFieldBegin(OPT_SHARED_CONST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.opt_shared_const.size()));
          for (Integer _iter397 : this.opt_shared_const)          {
            oprot.writeI32(_iter397);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.opt_shared_mustable != null) {
      if (isSetOpt_shared_mustable()) {
        oprot.writeFieldBegin(OPT_SHARED_MUSTABLE_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.opt_shared_mustable.size()));
          for (Integer _iter398 : this.opt_shared_mustable)          {
            oprot.writeI32(_iter398);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.opt_box != null) {
      if (isSetOpt_box()) {
        oprot.writeFieldBegin(OPT_BOX_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.opt_box.size()));
          for (Integer _iter399 : this.opt_box)          {
            oprot.writeI32(_iter399);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

