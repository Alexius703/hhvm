These are the options that exists for HHVM

The format can be found in hphp/runtime/base/configs/generate-script.rs

# Autoload

- std::string Autoload.DB.Path = "", UNKNOWN
- bool Autoload.EnableExternFactExtractor = true, UNKNOWN
- std::string Autoload.UpdateSuppressionPath = "", UNKNOWN

  If this option is nonempty, Facts will check if a file exists at the
  given path. If such a file does exist, Facts will not update.

- bool Autoload.DB.CanCreate = true, UNKNOWN

  If true, and if a Facts DB doesn't already exist, native Facts will
  attempt to load the repo from scratch and create the DB. If the repo is
  very large, this may not be practical. Setting up the DB could grind the
  system to a halt, and you may have some other system to download a DB
  from saved state. You may rather prefer that requests fail until the
  saved state DB has been set up. Setting `AutoloadDBCanCreate=false`
  will prevent us from creating the DB if none exists, causing requests
  to fail in the meantime.

- std::string Autoload.DB.Perms = "0644", UNKNOWN
- std::string Autoload.DB.Group = "", UNKNOWN
- std::string Autoload.Logging = "hphp.runtime.ext.facts:=CRITICAL:slog;slog=hhvm", UNKNOWN
- bool Autoload.AllowLoggingPropagation = false, UNKNOWN
- bool Autoload.RethrowExceptions = true, UNKNOWN
- uint32_t Autoload.PerfSampleRate = 0, UNKNOWN

  Sample rate for Autoload & Facts API latency logging

# ErrorHandling

- int ErrorHandling.UpgradeLevel = 0, UNKNOWN

  Bitmask of errors to upgrade to E_USER_ERROR

- int ErrorHandling.MaxSerializedStringSize = 64 * 1024 * 1024, UNKNOWN
- bool ErrorHandling.CallUserHandlerOnFatals = false, UNKNOWN
- bool ErrorHandling.ThrowExceptionOnBadMethodCall = true, UNKNOWN
- bool ErrorHandling.LogNativeStackOnOOM = false, UNKNOWN
- int64_t ErrorHandling.NoticeFrequency = 1, UNKNOWN
- int64_t ErrorHandling.WarningFrequency = 1, UNKNOWN

# Hack.Lang

- bool Hack.Lang.DisableLvalAsAnExpression = false, UNKNOWN, repooptionsflag
- bool Hack.Lang.ConstDefaultFuncArgs = false, UNKNOWN, repooptionsflag
- bool Hack.Lang.ConstStaticProps = false, UNKNOWN, repooptionsflag
- bool Hack.Lang.AbstractStaticProps = false, UNKNOWN, repooptionsflag
- bool Hack.Lang.DisallowFuncPtrsInConstants = false, UNKNOWN, repooptionsflag
- bool Hack.Lang.AllowUnstableFeatures = false, UNKNOWN, repooptionsflag
- bool Hack.Lang.EnableXHPClassModifier = true, UNKNOWN, repooptionsflag
- bool Hack.Lang.DisableXHPElementMangling = true, UNKNOWN, repooptionsflag
- bool Hack.Lang.StressShallowDeclDeps = false, UNKNOWN, repooptionsflag
- bool Hack.Lang.StressFoldedDeclDeps = false, UNKNOWN, repooptionsflag
- bool Hack.Lang.ReadonlyNonlocalInference = false, UNKNOWN, repooptionsflag

  Allow omission of some `readonly` annotations based on nonlocal inference
  powered by decl directed bytecode

- bool Hack.Lang.OptimizeReifiedParamChecks = false, UNKNOWN, repooptionsflag

  Emit specialized bytecodes when we an infer a typehint does not contain a
  reified generic bytecode, powered by decl directed bytecode

- bool Hack.Lang.DisallowDirectSuperglobalsRefs = false, UNKNOWN, repooptionsflag

  Make it so referencing superglobals directly via their $_[A-Z]+ "variable"
  name hard-fails rather than emitting, e.g., CgetG

- bool Hack.Lang.LookForTypechecker = false, UNKNOWN
- bool Hack.Lang.AutoTypecheck = LookForTypechecker, UNKNOWN

  If you turn off LookForTypechecker, you probably want to turn this off
  too -- basically, make the two look like the same option to external
  users, unless you really explicitly want to set them differently for
  some reason.

- bool Hack.Lang.EnableClassLevelWhereClauses = false, UNKNOWN

  Enables the class-level where constraints
  true => allow the feature, false => disable the feature

- uint64_t Hack.Lang.Phpism.DisableCallUserFunc = 0, UNKNOWN

  Disables PHP's call_user_func function.
  Valid values are 0 => enabled (default), 1 => warning, 2 => error.

- uint64_t Hack.Lang.Phpism.DisableCallUserFuncArray = 0, UNKNOWN

  Disables PHP's call_user_func_array function.
  Valid values are 0 => enabled (default), 1 => warning, 2 => error.

- uint64_t Hack.Lang.Phpism.DisableConstant = 0, UNKNOWN

  Disables PHP's constant function
  Valid values are 0 => enabled (default), 1 => warning, 2 => error

# PHP7

- bool PHP7.all, UNKNOWN, private
- bool PHP7.NoHexNumerics = all, UNKNOWN, globaldata|unitcacheflag

  Indicates whether hex strings (e.g. "0x20") can be used for numeric
  operations, e.g. ("0x20" + 1)

- bool PHP7.Builtins = all, UNKNOWN, globaldata|unitcacheflag

  Indicates whether the repo was compiled with PHP7 builtins enabled.

- bool PHP7.EngineExceptions = all, UNKNOWN
- bool PHP7.Substr = all, UNKNOWN, globaldata|unitcacheflag

  Indicates whether the repo was compiled with PHP7 substr behavior which
  returns an empty string if the stringi length is equal to start characters
  long, instead of PHP5's false.

- bool PHP7.DisallowUnsafeCurlUploads = all, UNKNOWN

- bool PHP7.UVS = all, UNKNOWN, repooptionsflag
- bool PHP7.LTRAssign = all, UNKNOWN, repooptionsflag

# Server

- int Server.ThreadJobMaxQueuingMilliSeconds = -1, UNKNOWN
- bool Server.ThreadDropStack = false, UNKNOWN
- bool Server.HttpSafeMode = false, UNKNOWN
- bool Server.FixPathInfo = false, UNKNOWN
- bool Server.AddVaryEncoding = true, UNKNOWN
- bool Server.LogSettingsOnStartup = false, UNKNOWN
- bool Server.LogReorderProps = false, UNKNOWN
- bool Server.WarmupConcurrently = false, UNKNOWN
- bool Server.DedupeWarmupRequests = false, UNKNOWN
- int Server.WarmupThreadCount = 1, UNKNOWN
- int Server.ExtendedWarmup.ThreadCount = 1, UNKNOWN
- int Server.ExtendedWarmup.DelaySeconds = 60, UNKNOWN
- int Server.ExtendedWarmup.Repeat = 1, UNKNOWN
- std::vector<std::string> Server.WarmupRequests = {}, UNKNOWN
- std::vector<std::string> Server.ExtendedWarmup.Requests = {}, UNKNOWN
- std::string Server.CleanupRequest = "", UNKNOWN
- int Server.InternalWarmupThreads = 0, UNKNOWN
- boost::container::flat_set<std::string> Server.HighPriorityEndPoints = {}, UNKNOWN
- bool Server.ExitOnBindFail = false, UNKNOWN
