These are the options that exists for HHVM

If you add a new section you need to update generate_configs in
hphp/runtime/base/configs/TARGETS

The format can be found in hphp/runtime/base/configs/generate-script.rs

# Autoload

- std::string Autoload.DB.Path = "", UNKNOWN
- bool Autoload.EnableExternFactExtractor = true, UNKNOWN
- std::string Autoload.UpdateSuppressionPath = "", UNKNOWN

  If this option is nonempty, Facts will check if a file exists at the
  given path. If such a file does exist, Facts will not update.

- bool Autoload.DB.CanCreate = true, UNKNOWN

  If true, and if a Facts DB doesn't already exist, native Facts will
  attempt to load the repo from scratch and create the DB. If the repo is
  very large, this may not be practical. Setting up the DB could grind the
  system to a halt, and you may have some other system to download a DB
  from saved state. You may rather prefer that requests fail until the
  saved state DB has been set up. Setting `AutoloadDBCanCreate=false`
  will prevent us from creating the DB if none exists, causing requests
  to fail in the meantime.

- std::string Autoload.DB.Perms = "0644", UNKNOWN
- std::string Autoload.DB.Group = "", UNKNOWN
- std::string Autoload.Logging = "hphp.runtime.ext.facts:=CRITICAL:slog;slog=hhvm", UNKNOWN
- bool Autoload.AllowLoggingPropagation = false, UNKNOWN
- bool Autoload.RethrowExceptions = true, UNKNOWN
- uint32_t Autoload.PerfSampleRate = 0, UNKNOWN
- uint32_t Autoload.ErrorSampleRate = 1, UNKNOWN

  Sample rate for Autoload & Facts API latency logging

- std::string Autoload.Query = "" (Query), UNKNOWN, repooptionsflag(Autoload)
- std::string Autoload.TrustedDBPath = "" (TrustedDBPath), UNKNOWN, repooptionsflag(Autoload)
- std::vector<std::string> Autoload.IndexedMethodAttributes = {} (IndexedMethodAttributes), UNKNOWN, repooptionsflag(Autoload)
- std::vector<std::string> Autoload.RepoBuildSearchDirs = {} (RepoBuildSearchDirs), UNKNOWN, repooptionsflag(Autoload)

# Debugger (Eval.Debugger.)

- bool Debugger.EnableHphpd = false (Eval.Debugger.EnableDebugger), UNKNOWN
- bool Debugger.EnableVSDebugger = EnableVSDebugger (Eval.Debugger.VSDebugEnable), UNKNOWN

  Yes the default value is itself. That is because between the static initiation and the
  Config::Bind call https://fburl.com/code/f7wryx1z sets it to a different value sometimes.

- int Debugger.VSDebuggerListenPort = -1, UNKNOWN, nobind
- std::string Debugger.VSDebuggerDomainSocketPath = "", UNKNOWN, nobind
- bool Debugger.VSDebuggerNoWait = false, UNKNOWN, nobind
- bool Debugger.EnableColor = true (Eval.Debugger.EnableDebuggerColor), UNKNOWN
- bool Debugger.EnablePrompt = true (Eval.Debugger.EnableDebuggerPrompt), UNKNOWN
- bool Debugger.EnableServer = false (Eval.Debugger.EnableDebuggerServer), UNKNOWN
- bool Debugger.EnableUsageLog = false (Eval.Debugger.EnableDebuggerUsageLog), UNKNOWN
- std::string Debugger.ServerIP = "" (Eval.Debugger.IP), UNKNOWN
- int Debugger.ServerPort = 8089 (Eval.Debugger.Port), UNKNOWN
- bool Debugger.DisableIPv6 = false, UNKNOWN
- std::string Debugger.DefaultSandboxPath = "", UNKNOWN
- std::string Debugger.StartupDocument = "", UNKNOWN
- int Debugger.SignalTimeout = 1, UNKNOWN
- std::string Debugger.Auth.TokenScriptBin = "", UNKNOWN
- std::string Debugger.Auth.SessionAuthScriptBin = "", UNKNOWN
- bool Debugger.LogBreakpointHitTime = false, UNKNOWN
- bool Debugger.LogEvaluationCommands = false, UNKNOWN

# ErrorHandling

- int ErrorHandling.UpgradeLevel = 0, UNKNOWN

  Bitmask of errors to upgrade to E_USER_ERROR

- int ErrorHandling.MaxSerializedStringSize = 64 * 1024 * 1024, UNKNOWN
- bool ErrorHandling.CallUserHandlerOnFatals = false, UNKNOWN
- bool ErrorHandling.ThrowExceptionOnBadMethodCall = true, UNKNOWN
- bool ErrorHandling.LogNativeStackOnOOM = false, UNKNOWN
- int64_t ErrorHandling.NoticeFrequency = 1, UNKNOWN
- int64_t ErrorHandling.WarningFrequency = 1, UNKNOWN

# Hack.Lang

- bool Hack.Lang.DisableLvalAsAnExpression = false, UNKNOWN, repooptionsflag(Parser)
- bool Hack.Lang.ConstDefaultFuncArgs = false, UNKNOWN, repooptionsflag(Parser)
- bool Hack.Lang.ConstStaticProps = false, UNKNOWN, repooptionsflag(Parser)
- bool Hack.Lang.AbstractStaticProps = false, UNKNOWN, repooptionsflag(Parser)
- bool Hack.Lang.DisallowFuncPtrsInConstants = false, UNKNOWN, repooptionsflag(Parser)
- bool Hack.Lang.AllowUnstableFeatures = false, UNKNOWN, repooptionsflag(Parser)
- bool Hack.Lang.EnableXHPClassModifier = true, UNKNOWN, repooptionsflag(Parser)
- bool Hack.Lang.DisableXHPElementMangling = true, UNKNOWN, repooptionsflag(Parser)
- bool Hack.Lang.StressShallowDeclDeps = false, UNKNOWN, repooptionsflag(Parser)
- bool Hack.Lang.StressFoldedDeclDeps = false, UNKNOWN, repooptionsflag(Parser)
- bool Hack.Lang.OptimizeReifiedParamChecks = false, UNKNOWN, repooptionsflag(Parser)

  Emit specialized bytecodes when we an infer a typehint does not contain a
  reified generic bytecode, powered by decl directed bytecode

- bool Hack.Lang.DisallowDirectSuperglobalsRefs = false, UNKNOWN, repooptionsflag(Parser)

  Make it so referencing superglobals directly via their $_[A-Z]+ "variable"
  name hard-fails rather than emitting, e.g., CgetG

- std::map<std::string,std::string> Hack.Lang.AliasedNamespaces = {} (AliasedNamespaces), UNKNOWN, repooptionsflag(Parser)

- bool Hack.Lang.OptimizeParamLifetimes = false, paulbiss, repooptionsflag(Parser)
- bool Hack.Lang.OptimizeLocalLifetimes = false, paulbiss, repooptionsflag(Parser)

  When set the frontend compiler will attempt to shorten the live ranges of
  parameter and non-parameter named locals when these flags are set. This may
  allow for better copy-on-write behavior of certain value types but will also
  mean that values that are no longer needed by the program may not be visible
  to the debugger anymore.

- bool Hack.Lang.OptimizeLocalIterators = false, paulbiss, repooptionsflag(Parser)

  When set the frontend will attempt to emit LIter bytecodes when compiling
  foreach style loops where the iterand is stored in a local, which during the
  course of the loop is either not modified, or is only modified at the $key
  location.

- bool Hack.Lang.OptimizeIsTypeChecks = false, paulbiss, repooptionsflag(Parser)

  Controls whether hackc will attempt to emit IsTypeC instructions in place of
  IsTypeStructC for primitive types that are trivially checkable.

- bool Hack.Lang.LookForTypechecker = false, UNKNOWN
- bool Hack.Lang.AutoTypecheck = LookForTypechecker, UNKNOWN

  If you turn off LookForTypechecker, you probably want to turn this off
  too -- basically, make the two look like the same option to external
  users, unless you really explicitly want to set them differently for
  some reason.

- bool Hack.Lang.EnableClassLevelWhereClauses = false, UNKNOWN, unitcacheflag

  Enables the class-level where constraints
  true => allow the feature, false => disable the feature

- uint64_t Hack.Lang.Phpism.DisableCallUserFunc = 0, UNKNOWN

  Disables PHP's call_user_func function.
  Valid values are 0 => enabled (default), 1 => warning, 2 => error.

- uint64_t Hack.Lang.Phpism.DisableCallUserFuncArray = 0, UNKNOWN

  Disables PHP's call_user_func_array function.
  Valid values are 0 => enabled (default), 1 => warning, 2 => error.

- uint64_t Hack.Lang.Phpism.DisableConstant = 0, UNKNOWN

  Disables PHP's constant function
  Valid values are 0 => enabled (default), 1 => warning, 2 => error

# HHIR (Eval.HHIR)

- bool HHIR.Simplification = true, UNKNOWN
- bool HHIR.GenOpts = true, UNKNOWN
- bool HHIR.RefcountOpts = true, UNKNOWN
- bool HHIR.EnableGenTimeInlining = true, UNKNOWN
- uint32_t HHIR.InliningCostFactorMain = 100, UNKNOWN
- uint32_t HHIR.InliningCostFactorCold = 32, UNKNOWN
- uint32_t HHIR.InliningCostFactorFrozen = 10, UNKNOWN
- uint32_t HHIR.InliningVasmCostLimit = 80000, UNKNOWN
- uint32_t HHIR.InliningMinVasmCostLimit = 6500, UNKNOWN
- uint32_t HHIR.InliningMaxVasmCostLimit = 30000, UNKNOWN
- uint32_t HHIR.AlwaysInlineVasmCostLimit = 4800, UNKNOWN
- uint32_t HHIR.InliningMaxDepth = 5, UNKNOWN
- double HHIR.InliningVasmCallerExp = .5, UNKNOWN
- double HHIR.InliningVasmCalleeExp = .5, UNKNOWN
- double HHIR.InliningDepthExp = 0, UNKNOWN
- uint32_t HHIR.InliningMaxReturnDecRefs = 24, UNKNOWN
- uint32_t HHIR.InliningMaxReturnLocals = 40, UNKNOWN
- uint32_t HHIR.InliningMaxInitObjProps = 12, UNKNOWN
- bool HHIR.InliningIgnoreHints, UNKNOWN
- bool HHIR.InliningUseStackedCost = false, UNKNOWN
- bool HHIR.InliningUseLayoutBlocks = false, UNKNOWN
- bool HHIR.InliningAssertMemoryEffects = true, UNKNOWN
- bool HHIR.AlwaysInterpIgnoreHint, UNKNOWN
- bool HHIR.GenerateAsserts = false, UNKNOWN
- bool HHIR.DeadCodeElim = true, UNKNOWN
- bool HHIR.GlobalValueNumbering = true, UNKNOWN
- bool HHIR.PredictionOpts = true, UNKNOWN
- bool HHIR.OptimizeCheckTypes = true, UNKNOWN
- bool HHIR.MemoryOpts = true, UNKNOWN
- uint32_t HHIR.LoadElimMaxIters = 10, UNKNOWN
- bool HHIR.LoadEnableTeardownOpts = true, UNKNOWN
- uint32_t HHIR.LoadStackTeardownMaxDecrefs = 0, UNKNOWN
- uint32_t HHIR.LoadThrowMaxDecrefs = 0, UNKNOWN
- bool HHIR.StorePRE = true, UNKNOWN
- bool HHIR.SinkDefs = true, UNKNOWN
- bool HHIR.LowerBespokesPostIRGen = true, UNKNOWN
- bool HHIR.OutlineGenericIncDecRef = true, UNKNOWN
- uint32_t HHIR.MaxInlineInitPackedElements = 8, UNKNOWN

  How many elements to inline for packed array inits

- uint32_t HHIR.MaxInlineInitMixedElements = 4, UNKNOWN

  How many elements to inline for mixed array inits

- uint32_t HHIR.MaxInlineInitStructElements = 8, UNKNOWN

  How many elements to inline for struct array inits

- double HHIR.OffsetArrayProfileThreshold = 0.85, UNKNOWN
- double HHIR.COWArrayProfileThreshold = 0.85, UNKNOWN
- double HHIR.SmallArrayProfileThreshold = 0.8, UNKNOWN
- double HHIR.MissingArrayProfileThreshold = 0.8, UNKNOWN
- double HHIR.ExitArrayProfileThreshold = 0.98, UNKNOWN
- double HHIR.OffsetExitArrayProfileThreshold = 0.98, UNKNOWN
- double HHIR.IsTypeStructProfileThreshold = 0.95, UNKNOWN
- uint32_t HHIR.TypeProfileMinSamples = 10, UNKNOWN
- bool HHIR.EnablePreColoring = true, UNKNOWN
- bool HHIR.EnableCoalescing = true, UNKNOWN
- bool HHIR.AllocSIMDRegs = true, UNKNOWN
- uint32_t HHIR.SpecializedDestructorThreshold = 80, UNKNOWN

# Jit (Eval.Jit)

- bool Jit.Enabled = true (Eval.Jit), UNKNOWN
- bool Jit.EvaledCode = true, UNKNOWN
- bool Jit.RequireWriteLease = false, UNKNOWN
- uint64_t Jit.RelocationSize = 1 << 20, UNKNOWN
- uint64_t Jit.MatureSize = 125 << 20, UNKNOWN
- bool Jit.MatureAfterWarmup = false, UNKNOWN
- double Jit.MaturityExponent = 1.0, UNKNOWN
- double Jit.MaturityProfWeight = 1.0, UNKNOWN
- bool Jit.Timer, UNKNOWN
- int Jit.Threads = 4, UNKNOWN
- int Jit.WorkerThreads, UNKNOWN
- int Jit.WorkerThreadsForSerdes = 0, UNKNOWN
- int Jit.WorkerArenas, UNKNOWN
- bool Jit.ParallelDeserialize = true, UNKNOWN
- int Jit.LdimmqSpan = 8, UNKNOWN
- int Jit.PrintOptimizedIR = 0, UNKNOWN
- int Jit.Concurrently = 1, UNKNOWN
- bool Jit.PGORacyProfiling = false, UNKNOWN
- bool Jit.AlwaysInterpOne = false, UNKNOWN
- uint32_t Jit.NopInterval = 0, UNKNOWN
- uint32_t Jit.MaxTranslations = 10, UNKNOWN
- uint32_t Jit.MaxProfileTranslations = 30, UNKNOWN
- uint32_t Jit.TraceletLiveLocsLimit = 2000, UNKNOWN
- uint32_t Jit.TraceletEagerGuardsLimit = 0, UNKNOWN
- uint32_t Jit.TraceletGuardsLimit = 5, UNKNOWN
- uint64_t Jit.GlobalTranslationLimit = -1, UNKNOWN
- int64_t Jit.MaxRequestTranslationTime = -1, UNKNOWN
- uint32_t Jit.MaxRegionInstrs = 3000, UNKNOWN
- uint32_t Jit.MaxLiveRegionInstrs = 50, UNKNOWN
- uint32_t Jit.MaxAwaitAllUnroll = 8, UNKNOWN
- bool Jit.ProfileWarmupRequests = false, UNKNOWN
- uint32_t Jit.ProfileRequests, UNKNOWN
- uint32_t Jit.ProfileBCSize, UNKNOWN
- uint32_t Jit.ResetProfCountersRequest, UNKNOWN
- uint32_t Jit.RetranslateAllRequest, UNKNOWN
- uint32_t Jit.RetranslateAllSeconds, UNKNOWN
- bool Jit.RerunRetranslateAll = false, UNKNOWN
- bool Jit.BuildOutliningHashes = false, UNKNOWN
- bool Jit.PGOLayoutSplitHotCold, UNKNOWN
- bool Jit.PGOVasmBlockCounters = true, UNKNOWN
- bool Jit.PGOVasmBlockCountersOptPrologue = true, UNKNOWN
- uint32_t Jit.PGOVasmBlockCountersMaxOpMismatches = 12, UNKNOWN
- uint32_t Jit.PGOVasmBlockCountersMinEntryValue, UNKNOWN
- double Jit.PGOVasmBlockCountersHotWeightMultiplier = 0, UNKNOWN
- bool Jit.LayoutSeparateZeroWeightBlocks = false, UNKNOWN
- bool Jit.LayoutPrologueSplitHotCold, UNKNOWN
- bool Jit.LayoutProfileSplitHotCold = true, UNKNOWN
- uint64_t Jit.LayoutMinHotThreshold = 0, UNKNOWN
- uint64_t Jit.LayoutMinColdThreshold = 0, UNKNOWN
- double Jit.LayoutHotThreshold = 0.01, UNKNOWN
- double Jit.LayoutColdThreshold = 0.0005, UNKNOWN
- int32_t Jit.LayoutMainFactor = 1000, UNKNOWN
- int32_t Jit.LayoutColdFactor = 5, UNKNOWN
- bool Jit.LayoutExtTSP = true, UNKNOWN
- bool Jit.LayoutExtTSPForPrologues = false, UNKNOWN
- double Jit.LayoutExtTSPMaxMergeDensityRatio = 25, UNKNOWN
- double Jit.LayoutMaxMergeRatio = 1000000, UNKNOWN
- bool Jit.LayoutPruneCatchArcs = true, UNKNOWN
- bool Jit.KeepDbgFiles = false, UNKNOWN
- uint32_t Jit.EnableRenameFunction = 0, UNKNOWN, globaldata|compileroption(JitEnableRenameFunction)|unitcacheflag

  This controls function renaming.
  0 - Renaming not allowed
  1 - All functions can be renamed
  2 - Functions in RenamableFunctions config list can be renamed

- uint32_t Jit.InterceptFunctionLogRate = 1000, UNKNOWN
- bool Jit.UseVtuneAPI = false, UNKNOWN
- bool Jit.DisabledByHphpd = false, UNKNOWN
- bool Jit.DisabledByVSDebug = true, UNKNOWN
- uint32_t Jit.WarmupStatusBytes = ((25 << 10) + 1), UNKNOWN
- uint32_t Jit.WarmupMaxCodeGenRate = 20000, UNKNOWN
- uint32_t Jit.WarmupRateSeconds = 64, UNKNOWN
- uint32_t Jit.WarmupMinFillFactor = 10, UNKNOWN
- uint32_t Jit.WriteLeaseExpiration = 1500, UNKNOWN

  In seconds

- int Jit.RetargetJumps = 1, UNKNOWN
- bool Jit.ForceVMRegSync = false, UNKNOWN

  Sync VM reg state for all native calls.

- std::string Jit.RegionSelector = "tracelet", UNKNOWN
- bool Jit.NoGdb = true, UNKNOWN
- bool Jit.PGO, UNKNOWN
- std::string Jit.PGORegionSelector = "hotcfg", UNKNOWN
- uint64_t Jit.PGOThreshold, UNKNOWN
- bool Jit.PGOOnly = false, UNKNOWN
- bool Jit.PGOUsePostConditions = true, UNKNOWN
- bool Jit.PGOUseAddrCountedCheck = false, UNKNOWN
- uint32_t Jit.PGOUnlikelyIncRefCountedPercent = 2, UNKNOWN
- uint32_t Jit.PGOUnlikelyIncRefIncrementPercent = 5, UNKNOWN
- uint32_t Jit.PGOUnlikelyDecRefReleasePercent = 5, UNKNOWN
- uint32_t Jit.PGOUnlikelyDecRefCountedPercent = 2, UNKNOWN
- uint32_t Jit.PGOUnlikelyDecRefPersistPercent = 5, UNKNOWN
- uint32_t Jit.PGOUnlikelyDecRefSurvivePercent = 5, UNKNOWN
- uint32_t Jit.PGOUnlikelyDecRefDecrementPercent = 5, UNKNOWN
- double Jit.PGODecRefNZReleasePercentCOW, UNKNOWN
- double Jit.PGODecRefNZReleasePercent, UNKNOWN
- double Jit.PGODecRefNopDecPercentCOW, UNKNOWN
- double Jit.PGODecRefNopDecPercent, UNKNOWN
- bool Jit.PGOArrayGetStress = false, UNKNOWN
- double Jit.PGOMinBlockCountPercent = 0.25, UNKNOWN

  Mininum weight of a tracelet to include it in HotCFG as a percentage
  of the weight of the first tracelet in the region. [0,100]

- double Jit.PGOMinArcProbability = 0.0, UNKNOWN

  Minimum probability of an arc to include it in HotCFG. [0,1]

- uint32_t Jit.PGORelaxPercent = 100, UNKNOWN
- double Jit.PGOCalledFuncCheckThreshold = 25, UNKNOWN
- double Jit.PGOCalledFuncExitThreshold = 99.9, UNKNOWN
- bool Jit.PGODumpCallGraph = false, UNKNOWN
- bool Jit.PGOOptCodeCallGraph = true, UNKNOWN
- bool Jit.PGOHFSortPlus = false, UNKNOWN
- uint8_t Jit.LiveThreshold, UNKNOWN
- uint8_t Jit.ProfileThreshold, UNKNOWN
- uint32_t Jit.MaxLiveMainUsage = 96 * 1024 * 1024, UNKNOWN
- uint32_t Jit.SampleRate = 0, UNKNOWN
- bool Jit.AlignMacroFusionPairs, UNKNOWN
- bool Jit.AlignUniqueStubs = true, UNKNOWN
- bool Jit.SerdesModeForceOff = false, UNKNOWN
- bool Jit.DesUnitPreload = false, UNKNOWN
- std::set<std::string> Jit.SerdesDebugFunctions = {}, UNKNOWN
- std::set<std::string> Jit.FuncBlockList = {}, UNKNOWN
- uint32_t Jit.SerializeOptProfSeconds, UNKNOWN
- uint32_t Jit.SerializeOptProfRequests = 0, UNKNOWN
- bool Jit.SerializeOptProfRestart = true, UNKNOWN
- bool Jit.ArmLse, UNKNOWN
- std::string Jit.LogAllInlineRegions = "", UNKNOWN

  Log the sizes and metadata for all translations in the TC broken
  down by function and inclusive/exclusive size for inlined regions.
  When set to "" TC size data will be sampled on a per function basis
  as determined by JitSampleRate. When set to a non-empty string all
  translations will be logged, and run_key column will be logged with
  the value of this option.

- bool Jit.ProfileGuardTypes = false, UNKNOWN
- uint32_t Jit.FilterLease = 1, UNKNOWN

# PCRE (Eval.PCRE)

- uint32_t PCRE.TableSize = 96 * 1024, UNKNOWN, defaultearly

  Need to be defaultearly because it is used in the init of a static
  variable. It will then be reinited after we read the config

- uint64_t PCRE.ExpireInterval = 2 * 60 * 60, UNKNOWN, defaultearly

  Need to be defaultearly because it is used in the init of a static
  variable. It will then be reinited after we read the config

- std::string PCRE.CacheType = "static", UNKNOWN, defaultearly

  Need to be defaultearly because it is used in the init of a static
  variable. It will then be reinited after we read the config

# PageletServer

- int PageletServer.ThreadCount = 0, UNKNOWN
- int PageletServer.HugeThreadCount = 0, UNKNOWN
- int PageletServer.ThreadDropCacheTimeoutSeconds = 0, UNKNOWN
- int PageletServer.QueueLimit = 0, UNKNOWN
- bool PageletServer.ThreadDropStack = false, UNKNOWN
- uint64_t PageletServer.HeaderCheck = 0 (Eval.PageletServerHeaderCheck), UNKNOWN

  When starting a pagelet server the specified headers are passed as
  a dictionary that can contain both "key => value" fields and
  "#index => 'key: value'" fields from which key value pairs are
  parsed. The latter form is deprecated and this option controls
  errors and warnings for its use.
  0 - do nothing
  1 - raise a warning if a header is set via the deprecated "key: value"
      format
  2 - throw if any header is set using the deprecated "key: value"
      format

- uint64_t PageletServer.HeaderCollide = 0 (Eval.PageletServerHeaderCollide), UNKNOWN

  Similar to the above option this setting controls the behavior of
  hhvm when collisions occur in the pagelet header fields.
  0 - do nothing, favor last mentioned field in insertion order
  1 - raise a warning, preserve existing ordering
  2 - raise a warning, prefer the "key => value" field
  3 - throw an exception

# PHP7

- bool PHP7.all, UNKNOWN, private
- bool PHP7.NoHexNumerics = all, UNKNOWN, globaldata|unitcacheflag

  Indicates whether hex strings (e.g. "0x20") can be used for numeric
  operations, e.g. ("0x20" + 1)

- bool PHP7.Builtins = all, UNKNOWN, globaldata|unitcacheflag

  Indicates whether the repo was compiled with PHP7 builtins enabled.

- bool PHP7.EngineExceptions = all, UNKNOWN
- bool PHP7.Substr = all, UNKNOWN, globaldata|unitcacheflag

  Indicates whether the repo was compiled with PHP7 substr behavior which
  returns an empty string if the stringi length is equal to start characters
  long, instead of PHP5's false.

- bool PHP7.DisallowUnsafeCurlUploads = all, UNKNOWN

- bool PHP7.UVS = all, UNKNOWN, repooptionsflag(Parser, false)
- bool PHP7.LTRAssign = all, UNKNOWN, repooptionsflag(Parser, false)

# Server

- bool Server.Mode = false, UNKNOWN, nobind
- int Server.ThreadJobMaxQueuingMilliSeconds = -1, UNKNOWN
- bool Server.ThreadDropStack = false, UNKNOWN
- bool Server.HttpSafeMode = false, UNKNOWN
- bool Server.FixPathInfo = false, UNKNOWN
- bool Server.AddVaryEncoding = true, UNKNOWN
- bool Server.LogSettingsOnStartup = false, UNKNOWN
- bool Server.LogReorderProps = false, UNKNOWN
- bool Server.WarmupConcurrently = false, UNKNOWN
- bool Server.DedupeWarmupRequests = false, UNKNOWN
- int Server.WarmupThreadCount = 1, UNKNOWN
- int Server.ExtendedWarmup.ThreadCount = 1, UNKNOWN
- int Server.ExtendedWarmup.DelaySeconds = 60, UNKNOWN
- int Server.ExtendedWarmup.Repeat = 1, UNKNOWN
- std::vector<std::string> Server.WarmupRequests = {}, UNKNOWN
- std::vector<std::string> Server.ExtendedWarmup.Requests = {}, UNKNOWN
- std::string Server.CleanupRequest = "", UNKNOWN
- int Server.InternalWarmupThreads = 0, UNKNOWN
- boost::container::flat_set<std::string> Server.HighPriorityEndPoints = {}, UNKNOWN
- bool Server.ExitOnBindFail = false, UNKNOWN

# Xbox

- int Xbox.ServerInfo.ThreadCount = 10, UNKNOWN
- int Xbox.ServerInfo.MaxQueueLength = INT_MAX, UNKNOWN, postprocess
- std::string Xbox.ServerInfo.RequestInitFunction = "", UNKNOWN
- std::string Xbox.ServerInfo.RequestInitDocument = "", UNKNOWN
- bool Xbox.ServerInfo.LogInfo = false, UNKNOWN
- std::string Xbox.ProcessMessageFunc = "xbox_process_message", UNKNOWN
