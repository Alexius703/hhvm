These are the options that exists for HHVM

The format can be found in hphp/runtime/base/configs/generate-script.rs

# Autoload

- std::string Autoload.DB.Path = "", UNKNOWN
- bool Autoload.EnableExternFactExtractor = true, UNKNOWN
- std::string Autoload.UpdateSuppressionPath = "", UNKNOWN

  If this option is nonempty, Facts will check if a file exists at the
  given path. If such a file does exist, Facts will not update.

- bool Autoload.DB.CanCreate = true, UNKNOWN

  If true, and if a Facts DB doesn't already exist, native Facts will
  attempt to load the repo from scratch and create the DB. If the repo is
  very large, this may not be practical. Setting up the DB could grind the
  system to a halt, and you may have some other system to download a DB
  from saved state. You may rather prefer that requests fail until the
  saved state DB has been set up. Setting `AutoloadDBCanCreate=false`
  will prevent us from creating the DB if none exists, causing requests
  to fail in the meantime.

- std::string Autoload.DB.Perms = "0644", UNKNOWN
- std::string Autoload.DB.Group = "", UNKNOWN
- std::string Autoload.Logging = "hphp.runtime.ext.facts:=CRITICAL:slog;slog=hhvm", UNKNOWN
- bool Autoload.AllowLoggingPropagation = false, UNKNOWN
- bool Autoload.RethrowExceptions = true, UNKNOWN
- uint32_t Autoload.PerfSampleRate = 0, UNKNOWN

  Sample rate for Autoload & Facts API latency logging

# ErrorHandling

- int ErrorHandling.UpgradeLevel = 0, UNKNOWN

  Bitmask of errors to upgrade to E_USER_ERROR

- int ErrorHandling.MaxSerializedStringSize = 64 * 1024 * 1024, UNKNOWN
- bool ErrorHandling.CallUserHandlerOnFatals = false, UNKNOWN
- bool ErrorHandling.ThrowExceptionOnBadMethodCall = true, UNKNOWN
- bool ErrorHandling.LogNativeStackOnOOM = false, UNKNOWN
- int64_t ErrorHandling.NoticeFrequency = 1, UNKNOWN
- int64_t ErrorHandling.WarningFrequency = 1, UNKNOWN

# PHP7

- bool PHP7.all, UNKNOWN, private
- bool PHP7.NoHexNumerics = all, UNKNOWN, globaldata|unitcacheflag

  Indicates whether hex strings (e.g. "0x20") can be used for numeric
  operations, e.g. ("0x20" + 1)

- bool PHP7.Builtins = all, UNKNOWN, globaldata|unitcacheflag

  Indicates whether the repo was compiled with PHP7 builtins enabled.

- bool PHP7.EngineExceptions = all, UNKNOWN
- bool PHP7.Substr = all, UNKNOWN, globaldata|unitcacheflag

  Indicates whether the repo was compiled with PHP7 substr behavior which
  returns an empty string if the stringi length is equal to start characters
  long, instead of PHP5's false.

- bool PHP7.DisallowUnsafeCurlUploads = all, UNKNOWN

- bool PHP7.UVS = all, UNKNOWN, repooptionsflag(Parser)
- bool PHP7.LTRAssign = all, UNKNOWN, repooptionsflag(Parser)

# Server

- int Server.ThreadJobMaxQueuingMilliSeconds = -1, UNKNOWN
- bool Server.ThreadDropStack = false, UNKNOWN
- bool Server.HttpSafeMode = false, UNKNOWN
- bool Server.FixPathInfo = false, UNKNOWN
- bool Server.AddVaryEncoding = true, UNKNOWN
- bool Server.LogSettingsOnStartup = false, UNKNOWN
- bool Server.LogReorderProps = false, UNKNOWN
- bool Server.WarmupConcurrently = false, UNKNOWN
- bool Server.DedupeWarmupRequests = false, UNKNOWN
- int Server.WarmupThreadCount = 1, UNKNOWN
- int Server.ExtendedWarmup.ThreadCount = 1, UNKNOWN
- int Server.ExtendedWarmup.DelaySeconds = 60, UNKNOWN
- int Server.ExtendedWarmup.Repeat = 1, UNKNOWN
- std::vector<std::string> Server.WarmupRequests = {}, UNKNOWN
- std::vector<std::string> Server.ExtendedWarmup.Requests = {}, UNKNOWN
- std::string Server.CleanupRequest = "", UNKNOWN
- int Server.InternalWarmupThreads = 0, UNKNOWN
- boost::container::flat_set<std::string> Server.HighPriorityEndPoints = {}, UNKNOWN
- bool Server.ExitOnBindFail = false, UNKNOWN
