error: Typing[4110] Invalid argument

Expected `Sub`

 13 | function takes_my_a(MyA<Sub, Super, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<»Sub«, Super> $x): void {
 16 |   takes_my_a($x);
 17 | }

But got `Super`

 13 | function takes_my_a(MyA<Sub, »Super«, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {
 16 |   takes_my_a($x);
 17 | }

Here's why: this hint

 13 | function takes_my_a(MyA<Sub, »Super«, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {
 16 |   takes_my_a($x);
 17 | }

flows *into* this hint, via the (contravariant) 2nd type parameter of the class `\MyA`

 13 | function takes_my_a(»MyA<Sub, Super, Super>« $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {
 16 |   takes_my_a($x);
 17 | }

which itself flows *from* this declaration, via the (contravariant) 1st function parameter

 13 | function »takes_my_a«(MyA<Sub, Super, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {
 16 |   takes_my_a($x);
 17 | }

which itself flows *into* this expression

 13 | function takes_my_a(MyA<Sub, Super, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {
 16 |   »takes_my_a«($x);
 17 | }

which itself flows *from* this expression, via the (contravariant) 1st function parameter

 13 | function takes_my_a(MyA<Sub, Super, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {
 16 |   takes_my_a(»$x«);
 17 | }

which itself flows *from* this expression

 13 | function takes_my_a(MyA<Sub, Super, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> »$x«): void {
 16 |   takes_my_a($x);
 17 | }

which itself flows *from* this hint

 13 | function takes_my_a(MyA<Sub, Super, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(»MyB<Sub, Super>« $x): void {
 16 |   takes_my_a($x);
 17 | }

which itself flows *from* this hint

 5 | class MyB<-T1, T2> extends »MyA<Sub, T1, T2>« {}
 6 | 
 7 | class MyC<+T1, T2> extends MyA<T1, Super, T2> {}

which itself flows *into* this hint, via the (contravariant) 2nd type parameter of the class `\MyA`

 13 | function takes_my_a(MyA<Sub, Super, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<»Sub«, Super> $x): void {
 16 |   takes_my_a($x);
 17 | }

error: Typing[4110] Invalid argument

Expected `Super`

 13 | function takes_my_a(MyA<Sub, Super, »Super«> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {

But got `Sub`

 19 | function subtype_bad_invariant(MyB<Super, »Sub«> $x): void {
 20 |   takes_my_a($x);
 21 | }

Here's why: this hint

 19 | function subtype_bad_invariant(MyB<Super, »Sub«> $x): void {
 20 |   takes_my_a($x);
 21 | }

flows *into* this hint, via the (covariant) 3rd type parameter of the class `\MyA`

 5 | class MyB<-T1, T2> extends »MyA<Sub, T1, T2>« {}
 6 | 
 7 | class MyC<+T1, T2> extends MyA<T1, Super, T2> {}

which itself flows *into* this hint

 19 | function subtype_bad_invariant(»MyB<Super, Sub>« $x): void {
 20 |   takes_my_a($x);
 21 | }

which itself flows *into* this expression

 19 | function subtype_bad_invariant(MyB<Super, Sub> »$x«): void {
 20 |   takes_my_a($x);
 21 | }

which itself flows *into* this expression

 19 | function subtype_bad_invariant(MyB<Super, Sub> $x): void {
 20 |   takes_my_a(»$x«);
 21 | }

which itself flows *into* this expression, via the (contravariant) 1st function parameter

 19 | function subtype_bad_invariant(MyB<Super, Sub> $x): void {
 20 |   »takes_my_a«($x);
 21 | }

which itself flows *from* this declaration

 13 | function »takes_my_a«(MyA<Sub, Super, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {

which itself flows *into* this hint, via the (contravariant) 1st function parameter

 13 | function takes_my_a(»MyA<Sub, Super, Super>« $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {

which itself flows *into* this hint, via the (covariant) 3rd type parameter of the class `\MyA`

 13 | function takes_my_a(MyA<Sub, Super, »Super«> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {

error: Typing[4110] Invalid argument

Expected `Sub`

 19 | function subtype_bad_invariant(MyB<Super, »Sub«> $x): void {
 20 |   takes_my_a($x);
 21 | }

But got `Super`

 13 | function takes_my_a(MyA<Sub, Super, »Super«> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {

Here's why: this hint

 13 | function takes_my_a(MyA<Sub, Super, »Super«> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {

flows *into* this hint, via the (contravariant) 3rd type parameter of the class `\MyA`

 13 | function takes_my_a(»MyA<Sub, Super, Super>« $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {

which itself flows *from* this declaration, via the (contravariant) 1st function parameter

 13 | function »takes_my_a«(MyA<Sub, Super, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {

which itself flows *into* this expression

 19 | function subtype_bad_invariant(MyB<Super, Sub> $x): void {
 20 |   »takes_my_a«($x);
 21 | }

which itself flows *from* this expression, via the (contravariant) 1st function parameter

 19 | function subtype_bad_invariant(MyB<Super, Sub> $x): void {
 20 |   takes_my_a(»$x«);
 21 | }

which itself flows *from* this expression

 19 | function subtype_bad_invariant(MyB<Super, Sub> »$x«): void {
 20 |   takes_my_a($x);
 21 | }

which itself flows *from* this hint

 19 | function subtype_bad_invariant(»MyB<Super, Sub>« $x): void {
 20 |   takes_my_a($x);
 21 | }

which itself flows *from* this hint

 5 | class MyB<-T1, T2> extends »MyA<Sub, T1, T2>« {}
 6 | 
 7 | class MyC<+T1, T2> extends MyA<T1, Super, T2> {}

which itself flows *into* this hint, via the (contravariant) 3rd type parameter of the class `\MyA`

 19 | function subtype_bad_invariant(MyB<Super, »Sub«> $x): void {
 20 |   takes_my_a($x);
 21 | }

error: Typing[4110] Invalid argument

Expected `Sub`

 13 | function takes_my_a(MyA<»Sub«, Super, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {

But got `Super`

 23 | function subtype_bad_covariant(MyC<»Super«, Super> $x): void {
 24 |   takes_my_a($x);
 25 | }

Here's why: this hint

 23 | function subtype_bad_covariant(MyC<»Super«, Super> $x): void {
 24 |   takes_my_a($x);
 25 | }

flows *into* this hint, via the (covariant) 1st type parameter of the class `\MyA`

 7 | class MyC<+T1, T2> extends »MyA<T1, Super, T2>« {}
 8 | 
 9 | class Super {}

which itself flows *into* this hint

 23 | function subtype_bad_covariant(»MyC<Super, Super>« $x): void {
 24 |   takes_my_a($x);
 25 | }

which itself flows *into* this expression

 23 | function subtype_bad_covariant(MyC<Super, Super> »$x«): void {
 24 |   takes_my_a($x);
 25 | }

which itself flows *into* this expression

 23 | function subtype_bad_covariant(MyC<Super, Super> $x): void {
 24 |   takes_my_a(»$x«);
 25 | }

which itself flows *into* this expression, via the (contravariant) 1st function parameter

 23 | function subtype_bad_covariant(MyC<Super, Super> $x): void {
 24 |   »takes_my_a«($x);
 25 | }

which itself flows *from* this declaration

 13 | function »takes_my_a«(MyA<Sub, Super, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {

which itself flows *into* this hint, via the (contravariant) 1st function parameter

 13 | function takes_my_a(»MyA<Sub, Super, Super>« $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {

which itself flows *into* this hint, via the (covariant) 1st type parameter of the class `\MyA`

 13 | function takes_my_a(MyA<»Sub«, Super, Super> $_): void {}
 14 | 
 15 | function subtype_bad_contravariant(MyB<Sub, Super> $x): void {

4 errors found.
