<?hh
  /**
   * THIS FILE IS @generated; DO NOT EDIT IT
   * To regenerate this file, run
   *
   *   buck run //hphp/hack/test:gen_case_type_tests
   **/

  <<file: __EnableUnstableFeatures('case_types')>>

  
    class StringishObj {
      public function __toString(): string { return ''; }
    }
    

  enum MyEnum : string {
    A = 'A';
    B = 'B';
  }

  enum class EC : nonnull {
    float A = 3.141;
    (float, float) B = tuple(0.0, 0.0);
  }

  interface I {}

  class InstanceOfI implements I {}
  

  trait MyTrait {}

  class UsesMyTrait {
    use MyTrait;
  }
abstract final class AbsFinal {}
class :my-xhp implements XHPChild {}
class AClass {}
class ReifiedClass<reify T> {}
function my_func(): void {}

  abstract class BaseCheck {
    abstract const type T;
    abstract const string NAME;
    abstract protected static function values(): vec<this::T>;
    abstract protected static function funcParam(this::T $c): void;
    abstract protected static function funcReturn(mixed $c): this::T;
    abstract protected static function funcGenericParam<Tx as this::T>(Tx $c): void;
    abstract protected static function funcGenericReturn<Tx as this::T>(mixed $c): Tx;
    abstract protected static function propertyCheck(this::T $val): void;

    public static function run(): void {
      foreach(static::values() as $val) {
        // Param Checks
        static::funcParam($val);
        static::funcGenericParam($val);

        // Return Checks
        static::funcReturn($val);
        static::funcGenericReturn($val);

        // Property Checks
        static::propertyCheck($val);
      }
      echo (static::NAME .' Ok' . PHP_EOL);
    }
  }

  case type CT0 = NonExistent|(function(): void);

  
class CheckCT0<T as CT0> extends BaseCheck {
  const type T = CT0;
  const string NAME = 'CT0';

  <<__LateInit>>
  private CT0 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT0 $c): void {}

  protected static function funcReturn(mixed $c): CT0 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT0>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT0>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT0 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT0> {
    return vec[() ==> {},my_func<>,vec['my_func']];
  }
}
case type CT1 = NonExistent|(mixed, mixed);

  
class CheckCT1<T as CT1> extends BaseCheck {
  const type T = CT1;
  const string NAME = 'CT1';

  <<__LateInit>>
  private CT1 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT1 $c): void {}

  protected static function funcReturn(mixed $c): CT1 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT1>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT1>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT1 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT1> {
    return vec[tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT2 = NonExistent|?bool;

  
class CheckCT2<T as CT2> extends BaseCheck {
  const type T = CT2;
  const string NAME = 'CT2';

  <<__LateInit>>
  private CT2 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT2 $c): void {}

  protected static function funcReturn(mixed $c): CT2 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT2>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT2>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT2 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT2> {
    return vec[false,null,true];
  }
}
case type CT3 = NonExistent|AClass;

  
class CheckCT3<T as CT3> extends BaseCheck {
  const type T = CT3;
  const string NAME = 'CT3';

  <<__LateInit>>
  private CT3 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT3 $c): void {}

  protected static function funcReturn(mixed $c): CT3 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT3>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT3>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT3 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT3> {
    return vec[new AClass()];
  }
}
case type CT4 = NonExistent|AbsFinal;

  
class CheckCT4<T as CT4> extends BaseCheck {
  const type T = CT4;
  const string NAME = 'CT4';

  <<__LateInit>>
  private CT4 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT4 $c): void {}

  protected static function funcReturn(mixed $c): CT4 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT4>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT4>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT4 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT4> {
    return vec[];
  }
}
case type CT5 = NonExistent|Awaitable<num>;

  
class CheckCT5<T as CT5> extends BaseCheck {
  const type T = CT5;
  const string NAME = 'CT5';

  <<__LateInit>>
  private CT5 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT5 $c): void {}

  protected static function funcReturn(mixed $c): CT5 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT5>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT5>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT5 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT5> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT6 = NonExistent|Container<mixed>;

  
class CheckCT6<T as CT6> extends BaseCheck {
  const type T = CT6;
  const string NAME = 'CT6';

  <<__LateInit>>
  private CT6 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT6 $c): void {}

  protected static function funcReturn(mixed $c): CT6 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT6>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT6>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT6 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT6> {
    return vec[keyset[],vec[]];
  }
}
case type CT7 = NonExistent|HH\AnyArray<arraykey, mixed>;

  
class CheckCT7<T as CT7> extends BaseCheck {
  const type T = CT7;
  const string NAME = 'CT7';

  <<__LateInit>>
  private CT7 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT7 $c): void {}

  protected static function funcReturn(mixed $c): CT7 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT7>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT7>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT7 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT7> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT8 = NonExistent|HH\EnumClass\Label<EC, float>;

  
class CheckCT8<T as CT8> extends BaseCheck {
  const type T = CT8;
  const string NAME = 'CT8';

  <<__LateInit>>
  private CT8 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT8 $c): void {}

  protected static function funcReturn(mixed $c): CT8 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT8>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT8>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT8 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT8> {
    return vec[#A,EC#B];
  }
}
case type CT9 = NonExistent|HH\FunctionRef<(function(): void)>;

  
class CheckCT9<T as CT9> extends BaseCheck {
  const type T = CT9;
  const string NAME = 'CT9';

  <<__LateInit>>
  private CT9 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT9 $c): void {}

  protected static function funcReturn(mixed $c): CT9 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT9>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT9>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT9 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT9> {
    return vec[my_func<>];
  }
}
case type CT10 = NonExistent|HH\MemberOf<EC, float>;

  
class CheckCT10<T as CT10> extends BaseCheck {
  const type T = CT10;
  const string NAME = 'CT10';

  <<__LateInit>>
  private CT10 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT10 $c): void {}

  protected static function funcReturn(mixed $c): CT10 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT10>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT10>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT10 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT10> {
    return vec[EC::A,EC::B];
  }
}
case type CT11 = NonExistent|I;

  
class CheckCT11<T as CT11> extends BaseCheck {
  const type T = CT11;
  const string NAME = 'CT11';

  <<__LateInit>>
  private CT11 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT11 $c): void {}

  protected static function funcReturn(mixed $c): CT11 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT11>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT11>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT11 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT11> {
    return vec[new InstanceOfI()];
  }
}
case type CT12 = NonExistent|KeyedContainer<arraykey, mixed>;

  
class CheckCT12<T as CT12> extends BaseCheck {
  const type T = CT12;
  const string NAME = 'CT12';

  <<__LateInit>>
  private CT12 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT12 $c): void {}

  protected static function funcReturn(mixed $c): CT12 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT12>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT12>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT12 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT12> {
    return vec[dict[],vec[]];
  }
}
case type CT13 = NonExistent|KeyedTraversable<arraykey, mixed>;

  
class CheckCT13<T as CT13> extends BaseCheck {
  const type T = CT13;
  const string NAME = 'CT13';

  <<__LateInit>>
  private CT13 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT13 $c): void {}

  protected static function funcReturn(mixed $c): CT13 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT13>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT13>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT13 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT13> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT14 = NonExistent|MyEnum;

  
class CheckCT14<T as CT14> extends BaseCheck {
  const type T = CT14;
  const string NAME = 'CT14';

  <<__LateInit>>
  private CT14 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT14 $c): void {}

  protected static function funcReturn(mixed $c): CT14 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT14>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT14>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT14 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT14> {
    return vec['B',MyEnum::A];
  }
}
case type CT15 = NonExistent|MyTrait;

  
class CheckCT15<T as CT15> extends BaseCheck {
  const type T = CT15;
  const string NAME = 'CT15';

  <<__LateInit>>
  private CT15 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT15 $c): void {}

  protected static function funcReturn(mixed $c): CT15 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT15>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT15>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT15 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT15> {
    return vec[];
  }
}
case type CT16 = NonExistent|ReifiedClass<null>;

  
class CheckCT16<T as CT16> extends BaseCheck {
  const type T = CT16;
  const string NAME = 'CT16';

  <<__LateInit>>
  private CT16 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT16 $c): void {}

  protected static function funcReturn(mixed $c): CT16 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT16>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT16>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT16 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT16> {
    return vec[new ReifiedClass<null>()];
  }
}
case type CT17 = NonExistent|Stringish;

  
class CheckCT17<T as CT17> extends BaseCheck {
  const type T = CT17;
  const string NAME = 'CT17';

  <<__LateInit>>
  private CT17 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT17 $c): void {}

  protected static function funcReturn(mixed $c): CT17 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT17>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT17>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT17 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT17> {
    return vec['','hello world',new StringishObj()];
  }
}
case type CT18 = NonExistent|Traversable<mixed>;

  
class CheckCT18<T as CT18> extends BaseCheck {
  const type T = CT18;
  const string NAME = 'CT18';

  <<__LateInit>>
  private CT18 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT18 $c): void {}

  protected static function funcReturn(mixed $c): CT18 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT18>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT18>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT18 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT18> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT19 = NonExistent|XHPChild;

  
class CheckCT19<T as CT19> extends BaseCheck {
  const type T = CT19;
  const string NAME = 'CT19';

  <<__LateInit>>
  private CT19 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT19 $c): void {}

  protected static function funcReturn(mixed $c): CT19 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT19>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT19>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT19 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT19> {
    return vec['','hello world',0,1,<my-xhp/>];
  }
}
case type CT20 = NonExistent|arraykey;

  
class CheckCT20<T as CT20> extends BaseCheck {
  const type T = CT20;
  const string NAME = 'CT20';

  <<__LateInit>>
  private CT20 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT20 $c): void {}

  protected static function funcReturn(mixed $c): CT20 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT20>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT20>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT20 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT20> {
    return vec['','hello world',0,1];
  }
}
case type CT21 = NonExistent|bool;

  
class CheckCT21<T as CT21> extends BaseCheck {
  const type T = CT21;
  const string NAME = 'CT21';

  <<__LateInit>>
  private CT21 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT21 $c): void {}

  protected static function funcReturn(mixed $c): CT21 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT21>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT21>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT21 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT21> {
    return vec[false,true];
  }
}
case type CT22 = NonExistent|dict<arraykey, mixed>;

  
class CheckCT22<T as CT22> extends BaseCheck {
  const type T = CT22;
  const string NAME = 'CT22';

  <<__LateInit>>
  private CT22 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT22 $c): void {}

  protected static function funcReturn(mixed $c): CT22 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT22>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT22>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT22 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT22> {
    return vec[dict[]];
  }
}
case type CT23 = NonExistent|dynamic;

  
class CheckCT23<T as CT23> extends BaseCheck {
  const type T = CT23;
  const string NAME = 'CT23';

  <<__LateInit>>
  private CT23 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT23 $c): void {}

  protected static function funcReturn(mixed $c): CT23 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT23>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT23>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT23 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT23> {
    return vec[false,null,shape('x' => 10),shape(),true];
  }
}
case type CT24 = NonExistent|float;

  
class CheckCT24<T as CT24> extends BaseCheck {
  const type T = CT24;
  const string NAME = 'CT24';

  <<__LateInit>>
  private CT24 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT24 $c): void {}

  protected static function funcReturn(mixed $c): CT24 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT24>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT24>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT24 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT24> {
    return vec[0.0,3.14];
  }
}
case type CT25 = NonExistent|int;

  
class CheckCT25<T as CT25> extends BaseCheck {
  const type T = CT25;
  const string NAME = 'CT25';

  <<__LateInit>>
  private CT25 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT25 $c): void {}

  protected static function funcReturn(mixed $c): CT25 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT25>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT25>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT25 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT25> {
    return vec[0,1];
  }
}
case type CT26 = NonExistent|keyset<arraykey>;

  
class CheckCT26<T as CT26> extends BaseCheck {
  const type T = CT26;
  const string NAME = 'CT26';

  <<__LateInit>>
  private CT26 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT26 $c): void {}

  protected static function funcReturn(mixed $c): CT26 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT26>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT26>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT26 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT26> {
    return vec[keyset[]];
  }
}
case type CT27 = NonExistent|mixed;

  
class CheckCT27<T as CT27> extends BaseCheck {
  const type T = CT27;
  const string NAME = 'CT27';

  <<__LateInit>>
  private CT27 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT27 $c): void {}

  protected static function funcReturn(mixed $c): CT27 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT27>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT27>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT27 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT27> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT28 = NonExistent|nonnull;

  
class CheckCT28<T as CT28> extends BaseCheck {
  const type T = CT28;
  const string NAME = 'CT28';

  <<__LateInit>>
  private CT28 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT28 $c): void {}

  protected static function funcReturn(mixed $c): CT28 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT28>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT28>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT28 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT28> {
    return vec['','hello world',0,1,false,true];
  }
}
case type CT29 = NonExistent|noreturn;

  
class CheckCT29<T as CT29> extends BaseCheck {
  const type T = CT29;
  const string NAME = 'CT29';

  <<__LateInit>>
  private CT29 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT29 $c): void {}

  protected static function funcReturn(mixed $c): CT29 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT29>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT29>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT29 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT29> {
    return vec[];
  }
}
case type CT30 = NonExistent|nothing;

  
class CheckCT30<T as CT30> extends BaseCheck {
  const type T = CT30;
  const string NAME = 'CT30';

  <<__LateInit>>
  private CT30 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT30 $c): void {}

  protected static function funcReturn(mixed $c): CT30 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT30>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT30>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT30 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT30> {
    return vec[];
  }
}
case type CT31 = NonExistent|null;

  
class CheckCT31<T as CT31> extends BaseCheck {
  const type T = CT31;
  const string NAME = 'CT31';

  <<__LateInit>>
  private CT31 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT31 $c): void {}

  protected static function funcReturn(mixed $c): CT31 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT31>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT31>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT31 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT31> {
    return vec[null];
  }
}
case type CT32 = NonExistent|num;

  
class CheckCT32<T as CT32> extends BaseCheck {
  const type T = CT32;
  const string NAME = 'CT32';

  <<__LateInit>>
  private CT32 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT32 $c): void {}

  protected static function funcReturn(mixed $c): CT32 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT32>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT32>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT32 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT32> {
    return vec[0,0.0,1,3.14];
  }
}
case type CT33 = NonExistent|resource;

  
class CheckCT33<T as CT33> extends BaseCheck {
  const type T = CT33;
  const string NAME = 'CT33';

  <<__LateInit>>
  private CT33 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT33 $c): void {}

  protected static function funcReturn(mixed $c): CT33 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT33>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT33>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT33 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT33> {
    return vec[imagecreate(10, 10)];
  }
}
case type CT34 = NonExistent|shape(...);

  
class CheckCT34<T as CT34> extends BaseCheck {
  const type T = CT34;
  const string NAME = 'CT34';

  <<__LateInit>>
  private CT34 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT34 $c): void {}

  protected static function funcReturn(mixed $c): CT34 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT34>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT34>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT34 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT34> {
    return vec[shape('x' => 10),shape()];
  }
}
case type CT35 = NonExistent|string;

  
class CheckCT35<T as CT35> extends BaseCheck {
  const type T = CT35;
  const string NAME = 'CT35';

  <<__LateInit>>
  private CT35 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT35 $c): void {}

  protected static function funcReturn(mixed $c): CT35 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT35>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT35>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT35 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT35> {
    return vec['','hello world'];
  }
}
case type CT36 = NonExistent|vec<mixed>;

  
class CheckCT36<T as CT36> extends BaseCheck {
  const type T = CT36;
  const string NAME = 'CT36';

  <<__LateInit>>
  private CT36 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT36 $c): void {}

  protected static function funcReturn(mixed $c): CT36 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT36>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT36>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT36 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT36> {
    return vec[vec[]];
  }
}
case type CT37 = NonExistent|vec_or_dict<string>;

  
class CheckCT37<T as CT37> extends BaseCheck {
  const type T = CT37;
  const string NAME = 'CT37';

  <<__LateInit>>
  private CT37 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT37 $c): void {}

  protected static function funcReturn(mixed $c): CT37 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT37>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT37>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT37 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT37> {
    return vec[dict[],vec[]];
  }
}
case type CT38 = NonExistent|void;

  
class CheckCT38<T as CT38> extends BaseCheck {
  const type T = CT38;
  const string NAME = 'CT38';

  <<__LateInit>>
  private CT38 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT38 $c): void {}

  protected static function funcReturn(mixed $c): CT38 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT38>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT38>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT38 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT38> {
    return vec[null];
  }
}

  <<__EntryPoint>>
  function main(): void {
    CheckCT0::run();
CheckCT1::run();
CheckCT2::run();
CheckCT3::run();
CheckCT4::run();
CheckCT5::run();
CheckCT6::run();
CheckCT7::run();
CheckCT8::run();
CheckCT9::run();
CheckCT10::run();
CheckCT11::run();
CheckCT12::run();
CheckCT13::run();
CheckCT14::run();
CheckCT15::run();
CheckCT16::run();
CheckCT17::run();
CheckCT18::run();
CheckCT19::run();
CheckCT20::run();
CheckCT21::run();
CheckCT22::run();
CheckCT23::run();
CheckCT24::run();
CheckCT25::run();
CheckCT26::run();
CheckCT27::run();
CheckCT28::run();
CheckCT29::run();
CheckCT30::run();
CheckCT31::run();
CheckCT32::run();
CheckCT33::run();
CheckCT34::run();
CheckCT35::run();
CheckCT36::run();
CheckCT37::run();
CheckCT38::run();
  }