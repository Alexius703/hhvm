<?hh
  /**
   * THIS FILE IS @generated; DO NOT EDIT IT
   * To regenerate this file, run
   *
   *   buck run //hphp/hack/test:gen_case_type_tests
   **/

  <<file: __EnableUnstableFeatures('case_types')>>

  
    class StringishObj {
      public function __toString(): string { return ''; }
    }
    

  enum MyEnum : string {
    A = 'A';
    B = 'B';
  }

  enum class EC : nonnull {
    float A = 3.141;
    (float, float) B = tuple(0.0, 0.0);
  }

  interface I {}

  class InstanceOfI implements I {}
  

  trait MyTrait {}

  class UsesMyTrait {
    use MyTrait;
  }
abstract final class AbsFinal {}
class :my-xhp implements XHPChild {}
class AClass {}
class ReifiedClass<reify T> {}
function my_func(): void {}

  abstract class BaseCheck {
    abstract const type T;
    abstract const string NAME;
    abstract protected static function values(): vec<this::T>;
    abstract protected static function funcParam(this::T $c): void;
    abstract protected static function funcReturn(mixed $c): this::T;
    abstract protected static function funcGenericParam<Tx as this::T>(Tx $c): void;
    abstract protected static function funcGenericReturn<Tx as this::T>(mixed $c): Tx;
    abstract protected static function propertyCheck(this::T $val): void;

    public static function run(): void {
      foreach(static::values() as $val) {
        // Param Checks
        static::funcParam($val);
        static::funcGenericParam($val);

        // Return Checks
        static::funcReturn($val);
        static::funcGenericReturn($val);

        // Property Checks
        static::propertyCheck($val);
      }
      echo (static::NAME .' Ok' . PHP_EOL);
    }
  }

  case type CT0 = (function(): void)|(function(): void);

  
class CheckCT0<T as CT0> extends BaseCheck {
  const type T = CT0;
  const string NAME = 'CT0';

  <<__LateInit>>
  private CT0 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT0 $c): void {}

  protected static function funcReturn(mixed $c): CT0 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT0>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT0>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT0 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT0> {
    return vec[() ==> {},my_func<>,vec['my_func']];
  }
}
case type CT1 = (mixed, mixed)|(function(): void);

  
class CheckCT1<T as CT1> extends BaseCheck {
  const type T = CT1;
  const string NAME = 'CT1';

  <<__LateInit>>
  private CT1 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT1 $c): void {}

  protected static function funcReturn(mixed $c): CT1 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT1>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT1>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT1 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT1> {
    return vec[() ==> {},my_func<>,tuple(0, 0),tuple(1, 2, 3),vec['my_func']];
  }
}
case type CT2 = ?bool|(function(): void);

  
class CheckCT2<T as CT2> extends BaseCheck {
  const type T = CT2;
  const string NAME = 'CT2';

  <<__LateInit>>
  private CT2 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT2 $c): void {}

  protected static function funcReturn(mixed $c): CT2 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT2>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT2>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT2 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT2> {
    return vec[() ==> {},false,my_func<>,null,true,vec['my_func']];
  }
}
case type CT3 = AClass|(function(): void);

  
class CheckCT3<T as CT3> extends BaseCheck {
  const type T = CT3;
  const string NAME = 'CT3';

  <<__LateInit>>
  private CT3 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT3 $c): void {}

  protected static function funcReturn(mixed $c): CT3 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT3>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT3>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT3 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT3> {
    return vec[() ==> {},my_func<>,new AClass(),vec['my_func']];
  }
}
case type CT4 = AbsFinal|(function(): void);

  
class CheckCT4<T as CT4> extends BaseCheck {
  const type T = CT4;
  const string NAME = 'CT4';

  <<__LateInit>>
  private CT4 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT4 $c): void {}

  protected static function funcReturn(mixed $c): CT4 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT4>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT4>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT4 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT4> {
    return vec[() ==> {},my_func<>,vec['my_func']];
  }
}
case type CT5 = Awaitable<num>|(function(): void);

  
class CheckCT5<T as CT5> extends BaseCheck {
  const type T = CT5;
  const string NAME = 'CT5';

  <<__LateInit>>
  private CT5 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT5 $c): void {}

  protected static function funcReturn(mixed $c): CT5 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT5>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT5>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT5 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT5> {
    return vec[() ==> {},async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },my_func<>,vec['my_func']];
  }
}
case type CT6 = Container<mixed>|(function(): void);

  
class CheckCT6<T as CT6> extends BaseCheck {
  const type T = CT6;
  const string NAME = 'CT6';

  <<__LateInit>>
  private CT6 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT6 $c): void {}

  protected static function funcReturn(mixed $c): CT6 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT6>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT6>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT6 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT6> {
    return vec[() ==> {},keyset[],my_func<>,vec['my_func'],vec[]];
  }
}
case type CT7 = HH\AnyArray<arraykey, mixed>|(function(): void);

  
class CheckCT7<T as CT7> extends BaseCheck {
  const type T = CT7;
  const string NAME = 'CT7';

  <<__LateInit>>
  private CT7 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT7 $c): void {}

  protected static function funcReturn(mixed $c): CT7 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT7>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT7>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT7 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT7> {
    return vec[() ==> {},dict[],keyset[],my_func<>,vec['my_func'],vec[]];
  }
}
case type CT8 = HH\EnumClass\Label<EC, float>|(function(): void);

  
class CheckCT8<T as CT8> extends BaseCheck {
  const type T = CT8;
  const string NAME = 'CT8';

  <<__LateInit>>
  private CT8 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT8 $c): void {}

  protected static function funcReturn(mixed $c): CT8 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT8>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT8>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT8 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT8> {
    return vec[#A,() ==> {},EC#B,my_func<>,vec['my_func']];
  }
}
case type CT9 = HH\FunctionRef<(function(): void)>|(function(): void);

  
class CheckCT9<T as CT9> extends BaseCheck {
  const type T = CT9;
  const string NAME = 'CT9';

  <<__LateInit>>
  private CT9 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT9 $c): void {}

  protected static function funcReturn(mixed $c): CT9 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT9>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT9>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT9 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT9> {
    return vec[() ==> {},my_func<>,vec['my_func']];
  }
}
case type CT10 = HH\MemberOf<EC, float>|(function(): void);

  
class CheckCT10<T as CT10> extends BaseCheck {
  const type T = CT10;
  const string NAME = 'CT10';

  <<__LateInit>>
  private CT10 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT10 $c): void {}

  protected static function funcReturn(mixed $c): CT10 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT10>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT10>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT10 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT10> {
    return vec[() ==> {},EC::A,EC::B,my_func<>,vec['my_func']];
  }
}
case type CT11 = I|(function(): void);

  
class CheckCT11<T as CT11> extends BaseCheck {
  const type T = CT11;
  const string NAME = 'CT11';

  <<__LateInit>>
  private CT11 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT11 $c): void {}

  protected static function funcReturn(mixed $c): CT11 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT11>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT11>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT11 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT11> {
    return vec[() ==> {},my_func<>,new InstanceOfI(),vec['my_func']];
  }
}
case type CT12 = KeyedContainer<arraykey, mixed>|(function(): void);

  
class CheckCT12<T as CT12> extends BaseCheck {
  const type T = CT12;
  const string NAME = 'CT12';

  <<__LateInit>>
  private CT12 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT12 $c): void {}

  protected static function funcReturn(mixed $c): CT12 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT12>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT12>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT12 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT12> {
    return vec[() ==> {},dict[],my_func<>,vec['my_func'],vec[]];
  }
}
case type CT13 = KeyedTraversable<arraykey, mixed>|(function(): void);

  
class CheckCT13<T as CT13> extends BaseCheck {
  const type T = CT13;
  const string NAME = 'CT13';

  <<__LateInit>>
  private CT13 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT13 $c): void {}

  protected static function funcReturn(mixed $c): CT13 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT13>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT13>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT13 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT13> {
    return vec[() ==> {},dict[],keyset[],my_func<>,vec['my_func'],vec[]];
  }
}
case type CT14 = MyEnum|(function(): void);

  
class CheckCT14<T as CT14> extends BaseCheck {
  const type T = CT14;
  const string NAME = 'CT14';

  <<__LateInit>>
  private CT14 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT14 $c): void {}

  protected static function funcReturn(mixed $c): CT14 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT14>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT14>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT14 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT14> {
    return vec['B',() ==> {},MyEnum::A,my_func<>,vec['my_func']];
  }
}
case type CT15 = MyTrait|(function(): void);

  
class CheckCT15<T as CT15> extends BaseCheck {
  const type T = CT15;
  const string NAME = 'CT15';

  <<__LateInit>>
  private CT15 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT15 $c): void {}

  protected static function funcReturn(mixed $c): CT15 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT15>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT15>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT15 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT15> {
    return vec[() ==> {},my_func<>,vec['my_func']];
  }
}
case type CT16 = ReifiedClass<null>|(function(): void);

  
class CheckCT16<T as CT16> extends BaseCheck {
  const type T = CT16;
  const string NAME = 'CT16';

  <<__LateInit>>
  private CT16 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT16 $c): void {}

  protected static function funcReturn(mixed $c): CT16 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT16>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT16>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT16 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT16> {
    return vec[() ==> {},my_func<>,new ReifiedClass<null>(),vec['my_func']];
  }
}
case type CT17 = Stringish|(function(): void);

  
class CheckCT17<T as CT17> extends BaseCheck {
  const type T = CT17;
  const string NAME = 'CT17';

  <<__LateInit>>
  private CT17 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT17 $c): void {}

  protected static function funcReturn(mixed $c): CT17 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT17>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT17>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT17 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT17> {
    return vec['','hello world',() ==> {},my_func<>,new StringishObj(),vec['my_func']];
  }
}
case type CT18 = Traversable<mixed>|(function(): void);

  
class CheckCT18<T as CT18> extends BaseCheck {
  const type T = CT18;
  const string NAME = 'CT18';

  <<__LateInit>>
  private CT18 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT18 $c): void {}

  protected static function funcReturn(mixed $c): CT18 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT18>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT18>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT18 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT18> {
    return vec[() ==> {},dict[],keyset[],my_func<>,vec['my_func'],vec[]];
  }
}
case type CT19 = XHPChild|(function(): void);

  
class CheckCT19<T as CT19> extends BaseCheck {
  const type T = CT19;
  const string NAME = 'CT19';

  <<__LateInit>>
  private CT19 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT19 $c): void {}

  protected static function funcReturn(mixed $c): CT19 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT19>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT19>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT19 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT19> {
    return vec['','hello world',() ==> {},0,1,<my-xhp/>,my_func<>,vec['my_func']];
  }
}
case type CT20 = arraykey|(function(): void);

  
class CheckCT20<T as CT20> extends BaseCheck {
  const type T = CT20;
  const string NAME = 'CT20';

  <<__LateInit>>
  private CT20 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT20 $c): void {}

  protected static function funcReturn(mixed $c): CT20 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT20>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT20>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT20 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT20> {
    return vec['','hello world',() ==> {},0,1,my_func<>,vec['my_func']];
  }
}
case type CT21 = bool|(function(): void);

  
class CheckCT21<T as CT21> extends BaseCheck {
  const type T = CT21;
  const string NAME = 'CT21';

  <<__LateInit>>
  private CT21 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT21 $c): void {}

  protected static function funcReturn(mixed $c): CT21 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT21>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT21>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT21 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT21> {
    return vec[() ==> {},false,my_func<>,true,vec['my_func']];
  }
}
case type CT22 = dict<arraykey, mixed>|(function(): void);

  
class CheckCT22<T as CT22> extends BaseCheck {
  const type T = CT22;
  const string NAME = 'CT22';

  <<__LateInit>>
  private CT22 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT22 $c): void {}

  protected static function funcReturn(mixed $c): CT22 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT22>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT22>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT22 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT22> {
    return vec[() ==> {},dict[],my_func<>,vec['my_func']];
  }
}
case type CT23 = dynamic|(function(): void);

  
class CheckCT23<T as CT23> extends BaseCheck {
  const type T = CT23;
  const string NAME = 'CT23';

  <<__LateInit>>
  private CT23 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT23 $c): void {}

  protected static function funcReturn(mixed $c): CT23 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT23>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT23>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT23 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT23> {
    return vec[() ==> {},false,my_func<>,null,shape('x' => 10),shape(),true,vec['my_func']];
  }
}
case type CT24 = float|(function(): void);

  
class CheckCT24<T as CT24> extends BaseCheck {
  const type T = CT24;
  const string NAME = 'CT24';

  <<__LateInit>>
  private CT24 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT24 $c): void {}

  protected static function funcReturn(mixed $c): CT24 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT24>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT24>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT24 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT24> {
    return vec[() ==> {},0.0,3.14,my_func<>,vec['my_func']];
  }
}
case type CT25 = int|(function(): void);

  
class CheckCT25<T as CT25> extends BaseCheck {
  const type T = CT25;
  const string NAME = 'CT25';

  <<__LateInit>>
  private CT25 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT25 $c): void {}

  protected static function funcReturn(mixed $c): CT25 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT25>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT25>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT25 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT25> {
    return vec[() ==> {},0,1,my_func<>,vec['my_func']];
  }
}
case type CT26 = keyset<arraykey>|(function(): void);

  
class CheckCT26<T as CT26> extends BaseCheck {
  const type T = CT26;
  const string NAME = 'CT26';

  <<__LateInit>>
  private CT26 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT26 $c): void {}

  protected static function funcReturn(mixed $c): CT26 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT26>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT26>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT26 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT26> {
    return vec[() ==> {},keyset[],my_func<>,vec['my_func']];
  }
}
case type CT27 = mixed|(function(): void);

  
class CheckCT27<T as CT27> extends BaseCheck {
  const type T = CT27;
  const string NAME = 'CT27';

  <<__LateInit>>
  private CT27 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT27 $c): void {}

  protected static function funcReturn(mixed $c): CT27 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT27>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT27>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT27 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT27> {
    return vec['','hello world',() ==> {},0,1,false,my_func<>,null,true,vec['my_func']];
  }
}
case type CT28 = nonnull|(function(): void);

  
class CheckCT28<T as CT28> extends BaseCheck {
  const type T = CT28;
  const string NAME = 'CT28';

  <<__LateInit>>
  private CT28 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT28 $c): void {}

  protected static function funcReturn(mixed $c): CT28 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT28>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT28>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT28 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT28> {
    return vec['','hello world',() ==> {},0,1,false,my_func<>,true,vec['my_func']];
  }
}
case type CT29 = noreturn|(function(): void);

  
class CheckCT29<T as CT29> extends BaseCheck {
  const type T = CT29;
  const string NAME = 'CT29';

  <<__LateInit>>
  private CT29 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT29 $c): void {}

  protected static function funcReturn(mixed $c): CT29 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT29>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT29>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT29 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT29> {
    return vec[() ==> {},my_func<>,vec['my_func']];
  }
}
case type CT30 = nothing|(function(): void);

  
class CheckCT30<T as CT30> extends BaseCheck {
  const type T = CT30;
  const string NAME = 'CT30';

  <<__LateInit>>
  private CT30 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT30 $c): void {}

  protected static function funcReturn(mixed $c): CT30 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT30>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT30>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT30 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT30> {
    return vec[() ==> {},my_func<>,vec['my_func']];
  }
}
case type CT31 = null|(function(): void);

  
class CheckCT31<T as CT31> extends BaseCheck {
  const type T = CT31;
  const string NAME = 'CT31';

  <<__LateInit>>
  private CT31 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT31 $c): void {}

  protected static function funcReturn(mixed $c): CT31 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT31>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT31>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT31 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT31> {
    return vec[() ==> {},my_func<>,null,vec['my_func']];
  }
}
case type CT32 = num|(function(): void);

  
class CheckCT32<T as CT32> extends BaseCheck {
  const type T = CT32;
  const string NAME = 'CT32';

  <<__LateInit>>
  private CT32 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT32 $c): void {}

  protected static function funcReturn(mixed $c): CT32 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT32>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT32>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT32 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT32> {
    return vec[() ==> {},0,0.0,1,3.14,my_func<>,vec['my_func']];
  }
}
case type CT33 = resource|(function(): void);

  
class CheckCT33<T as CT33> extends BaseCheck {
  const type T = CT33;
  const string NAME = 'CT33';

  <<__LateInit>>
  private CT33 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT33 $c): void {}

  protected static function funcReturn(mixed $c): CT33 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT33>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT33>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT33 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT33> {
    return vec[() ==> {},imagecreate(10, 10),my_func<>,vec['my_func']];
  }
}
case type CT34 = shape(...)|(function(): void);

  
class CheckCT34<T as CT34> extends BaseCheck {
  const type T = CT34;
  const string NAME = 'CT34';

  <<__LateInit>>
  private CT34 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT34 $c): void {}

  protected static function funcReturn(mixed $c): CT34 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT34>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT34>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT34 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT34> {
    return vec[() ==> {},my_func<>,shape('x' => 10),shape(),vec['my_func']];
  }
}
case type CT35 = string|(function(): void);

  
class CheckCT35<T as CT35> extends BaseCheck {
  const type T = CT35;
  const string NAME = 'CT35';

  <<__LateInit>>
  private CT35 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT35 $c): void {}

  protected static function funcReturn(mixed $c): CT35 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT35>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT35>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT35 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT35> {
    return vec['','hello world',() ==> {},my_func<>,vec['my_func']];
  }
}
case type CT36 = vec<mixed>|(function(): void);

  
class CheckCT36<T as CT36> extends BaseCheck {
  const type T = CT36;
  const string NAME = 'CT36';

  <<__LateInit>>
  private CT36 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT36 $c): void {}

  protected static function funcReturn(mixed $c): CT36 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT36>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT36>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT36 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT36> {
    return vec[() ==> {},my_func<>,vec['my_func'],vec[]];
  }
}
case type CT37 = vec_or_dict<string>|(function(): void);

  
class CheckCT37<T as CT37> extends BaseCheck {
  const type T = CT37;
  const string NAME = 'CT37';

  <<__LateInit>>
  private CT37 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT37 $c): void {}

  protected static function funcReturn(mixed $c): CT37 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT37>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT37>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT37 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT37> {
    return vec[() ==> {},dict[],my_func<>,vec['my_func'],vec[]];
  }
}
case type CT38 = void|(function(): void);

  
class CheckCT38<T as CT38> extends BaseCheck {
  const type T = CT38;
  const string NAME = 'CT38';

  <<__LateInit>>
  private CT38 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT38 $c): void {}

  protected static function funcReturn(mixed $c): CT38 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT38>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT38>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT38 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT38> {
    return vec[() ==> {},my_func<>,null,vec['my_func']];
  }
}
case type CT39 = (mixed, mixed)|(mixed, mixed);

  
class CheckCT39<T as CT39> extends BaseCheck {
  const type T = CT39;
  const string NAME = 'CT39';

  <<__LateInit>>
  private CT39 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT39 $c): void {}

  protected static function funcReturn(mixed $c): CT39 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT39>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT39>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT39 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT39> {
    return vec[tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT40 = ?bool|(mixed, mixed);

  
class CheckCT40<T as CT40> extends BaseCheck {
  const type T = CT40;
  const string NAME = 'CT40';

  <<__LateInit>>
  private CT40 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT40 $c): void {}

  protected static function funcReturn(mixed $c): CT40 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT40>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT40>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT40 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT40> {
    return vec[false,null,true,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT41 = AClass|(mixed, mixed);

  
class CheckCT41<T as CT41> extends BaseCheck {
  const type T = CT41;
  const string NAME = 'CT41';

  <<__LateInit>>
  private CT41 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT41 $c): void {}

  protected static function funcReturn(mixed $c): CT41 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT41>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT41>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT41 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT41> {
    return vec[new AClass(),tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT42 = AbsFinal|(mixed, mixed);

  
class CheckCT42<T as CT42> extends BaseCheck {
  const type T = CT42;
  const string NAME = 'CT42';

  <<__LateInit>>
  private CT42 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT42 $c): void {}

  protected static function funcReturn(mixed $c): CT42 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT42>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT42>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT42 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT42> {
    return vec[tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT43 = Awaitable<num>|(mixed, mixed);

  
class CheckCT43<T as CT43> extends BaseCheck {
  const type T = CT43;
  const string NAME = 'CT43';

  <<__LateInit>>
  private CT43 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT43 $c): void {}

  protected static function funcReturn(mixed $c): CT43 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT43>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT43>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT43 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT43> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT44 = Container<mixed>|(mixed, mixed);

  
class CheckCT44<T as CT44> extends BaseCheck {
  const type T = CT44;
  const string NAME = 'CT44';

  <<__LateInit>>
  private CT44 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT44 $c): void {}

  protected static function funcReturn(mixed $c): CT44 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT44>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT44>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT44 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT44> {
    return vec[keyset[],tuple(0, 0),tuple(1, 2, 3),vec[]];
  }
}
case type CT45 = HH\AnyArray<arraykey, mixed>|(mixed, mixed);

  
class CheckCT45<T as CT45> extends BaseCheck {
  const type T = CT45;
  const string NAME = 'CT45';

  <<__LateInit>>
  private CT45 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT45 $c): void {}

  protected static function funcReturn(mixed $c): CT45 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT45>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT45>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT45 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT45> {
    return vec[dict[],keyset[],tuple(0, 0),tuple(1, 2, 3),vec[]];
  }
}
case type CT46 = HH\EnumClass\Label<EC, float>|(mixed, mixed);

  
class CheckCT46<T as CT46> extends BaseCheck {
  const type T = CT46;
  const string NAME = 'CT46';

  <<__LateInit>>
  private CT46 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT46 $c): void {}

  protected static function funcReturn(mixed $c): CT46 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT46>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT46>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT46 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT46> {
    return vec[#A,EC#B,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT47 = HH\FunctionRef<(function(): void)>|(mixed, mixed);

  
class CheckCT47<T as CT47> extends BaseCheck {
  const type T = CT47;
  const string NAME = 'CT47';

  <<__LateInit>>
  private CT47 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT47 $c): void {}

  protected static function funcReturn(mixed $c): CT47 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT47>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT47>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT47 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT47> {
    return vec[my_func<>,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT48 = HH\MemberOf<EC, float>|(mixed, mixed);

  
class CheckCT48<T as CT48> extends BaseCheck {
  const type T = CT48;
  const string NAME = 'CT48';

  <<__LateInit>>
  private CT48 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT48 $c): void {}

  protected static function funcReturn(mixed $c): CT48 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT48>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT48>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT48 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT48> {
    return vec[EC::A,EC::B,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT49 = I|(mixed, mixed);

  
class CheckCT49<T as CT49> extends BaseCheck {
  const type T = CT49;
  const string NAME = 'CT49';

  <<__LateInit>>
  private CT49 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT49 $c): void {}

  protected static function funcReturn(mixed $c): CT49 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT49>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT49>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT49 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT49> {
    return vec[new InstanceOfI(),tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT50 = KeyedContainer<arraykey, mixed>|(mixed, mixed);

  
class CheckCT50<T as CT50> extends BaseCheck {
  const type T = CT50;
  const string NAME = 'CT50';

  <<__LateInit>>
  private CT50 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT50 $c): void {}

  protected static function funcReturn(mixed $c): CT50 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT50>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT50>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT50 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT50> {
    return vec[dict[],tuple(0, 0),tuple(1, 2, 3),vec[]];
  }
}
case type CT51 = KeyedTraversable<arraykey, mixed>|(mixed, mixed);

  
class CheckCT51<T as CT51> extends BaseCheck {
  const type T = CT51;
  const string NAME = 'CT51';

  <<__LateInit>>
  private CT51 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT51 $c): void {}

  protected static function funcReturn(mixed $c): CT51 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT51>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT51>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT51 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT51> {
    return vec[dict[],keyset[],tuple(0, 0),tuple(1, 2, 3),vec[]];
  }
}
case type CT52 = MyEnum|(mixed, mixed);

  
class CheckCT52<T as CT52> extends BaseCheck {
  const type T = CT52;
  const string NAME = 'CT52';

  <<__LateInit>>
  private CT52 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT52 $c): void {}

  protected static function funcReturn(mixed $c): CT52 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT52>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT52>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT52 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT52> {
    return vec['B',MyEnum::A,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT53 = MyTrait|(mixed, mixed);

  
class CheckCT53<T as CT53> extends BaseCheck {
  const type T = CT53;
  const string NAME = 'CT53';

  <<__LateInit>>
  private CT53 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT53 $c): void {}

  protected static function funcReturn(mixed $c): CT53 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT53>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT53>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT53 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT53> {
    return vec[tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT54 = ReifiedClass<null>|(mixed, mixed);

  
class CheckCT54<T as CT54> extends BaseCheck {
  const type T = CT54;
  const string NAME = 'CT54';

  <<__LateInit>>
  private CT54 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT54 $c): void {}

  protected static function funcReturn(mixed $c): CT54 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT54>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT54>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT54 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT54> {
    return vec[new ReifiedClass<null>(),tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT55 = Stringish|(mixed, mixed);

  
class CheckCT55<T as CT55> extends BaseCheck {
  const type T = CT55;
  const string NAME = 'CT55';

  <<__LateInit>>
  private CT55 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT55 $c): void {}

  protected static function funcReturn(mixed $c): CT55 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT55>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT55>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT55 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT55> {
    return vec['','hello world',new StringishObj(),tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT56 = Traversable<mixed>|(mixed, mixed);

  
class CheckCT56<T as CT56> extends BaseCheck {
  const type T = CT56;
  const string NAME = 'CT56';

  <<__LateInit>>
  private CT56 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT56 $c): void {}

  protected static function funcReturn(mixed $c): CT56 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT56>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT56>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT56 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT56> {
    return vec[dict[],keyset[],tuple(0, 0),tuple(1, 2, 3),vec[]];
  }
}
case type CT57 = XHPChild|(mixed, mixed);

  
class CheckCT57<T as CT57> extends BaseCheck {
  const type T = CT57;
  const string NAME = 'CT57';

  <<__LateInit>>
  private CT57 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT57 $c): void {}

  protected static function funcReturn(mixed $c): CT57 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT57>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT57>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT57 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT57> {
    return vec['','hello world',0,1,<my-xhp/>,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT58 = arraykey|(mixed, mixed);

  
class CheckCT58<T as CT58> extends BaseCheck {
  const type T = CT58;
  const string NAME = 'CT58';

  <<__LateInit>>
  private CT58 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT58 $c): void {}

  protected static function funcReturn(mixed $c): CT58 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT58>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT58>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT58 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT58> {
    return vec['','hello world',0,1,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT59 = bool|(mixed, mixed);

  
class CheckCT59<T as CT59> extends BaseCheck {
  const type T = CT59;
  const string NAME = 'CT59';

  <<__LateInit>>
  private CT59 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT59 $c): void {}

  protected static function funcReturn(mixed $c): CT59 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT59>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT59>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT59 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT59> {
    return vec[false,true,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT60 = dict<arraykey, mixed>|(mixed, mixed);

  
class CheckCT60<T as CT60> extends BaseCheck {
  const type T = CT60;
  const string NAME = 'CT60';

  <<__LateInit>>
  private CT60 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT60 $c): void {}

  protected static function funcReturn(mixed $c): CT60 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT60>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT60>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT60 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT60> {
    return vec[dict[],tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT61 = dynamic|(mixed, mixed);

  
class CheckCT61<T as CT61> extends BaseCheck {
  const type T = CT61;
  const string NAME = 'CT61';

  <<__LateInit>>
  private CT61 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT61 $c): void {}

  protected static function funcReturn(mixed $c): CT61 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT61>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT61>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT61 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT61> {
    return vec[false,null,shape('x' => 10),shape(),true,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT62 = float|(mixed, mixed);

  
class CheckCT62<T as CT62> extends BaseCheck {
  const type T = CT62;
  const string NAME = 'CT62';

  <<__LateInit>>
  private CT62 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT62 $c): void {}

  protected static function funcReturn(mixed $c): CT62 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT62>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT62>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT62 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT62> {
    return vec[0.0,3.14,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT63 = int|(mixed, mixed);

  
class CheckCT63<T as CT63> extends BaseCheck {
  const type T = CT63;
  const string NAME = 'CT63';

  <<__LateInit>>
  private CT63 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT63 $c): void {}

  protected static function funcReturn(mixed $c): CT63 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT63>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT63>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT63 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT63> {
    return vec[0,1,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT64 = keyset<arraykey>|(mixed, mixed);

  
class CheckCT64<T as CT64> extends BaseCheck {
  const type T = CT64;
  const string NAME = 'CT64';

  <<__LateInit>>
  private CT64 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT64 $c): void {}

  protected static function funcReturn(mixed $c): CT64 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT64>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT64>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT64 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT64> {
    return vec[keyset[],tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT65 = mixed|(mixed, mixed);

  
class CheckCT65<T as CT65> extends BaseCheck {
  const type T = CT65;
  const string NAME = 'CT65';

  <<__LateInit>>
  private CT65 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT65 $c): void {}

  protected static function funcReturn(mixed $c): CT65 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT65>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT65>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT65 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT65> {
    return vec['','hello world',0,1,false,null,true,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT66 = nonnull|(mixed, mixed);

  
class CheckCT66<T as CT66> extends BaseCheck {
  const type T = CT66;
  const string NAME = 'CT66';

  <<__LateInit>>
  private CT66 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT66 $c): void {}

  protected static function funcReturn(mixed $c): CT66 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT66>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT66>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT66 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT66> {
    return vec['','hello world',0,1,false,true,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT67 = noreturn|(mixed, mixed);

  
class CheckCT67<T as CT67> extends BaseCheck {
  const type T = CT67;
  const string NAME = 'CT67';

  <<__LateInit>>
  private CT67 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT67 $c): void {}

  protected static function funcReturn(mixed $c): CT67 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT67>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT67>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT67 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT67> {
    return vec[tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT68 = nothing|(mixed, mixed);

  
class CheckCT68<T as CT68> extends BaseCheck {
  const type T = CT68;
  const string NAME = 'CT68';

  <<__LateInit>>
  private CT68 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT68 $c): void {}

  protected static function funcReturn(mixed $c): CT68 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT68>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT68>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT68 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT68> {
    return vec[tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT69 = null|(mixed, mixed);

  
class CheckCT69<T as CT69> extends BaseCheck {
  const type T = CT69;
  const string NAME = 'CT69';

  <<__LateInit>>
  private CT69 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT69 $c): void {}

  protected static function funcReturn(mixed $c): CT69 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT69>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT69>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT69 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT69> {
    return vec[null,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT70 = num|(mixed, mixed);

  
class CheckCT70<T as CT70> extends BaseCheck {
  const type T = CT70;
  const string NAME = 'CT70';

  <<__LateInit>>
  private CT70 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT70 $c): void {}

  protected static function funcReturn(mixed $c): CT70 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT70>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT70>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT70 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT70> {
    return vec[0,0.0,1,3.14,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT71 = resource|(mixed, mixed);

  
class CheckCT71<T as CT71> extends BaseCheck {
  const type T = CT71;
  const string NAME = 'CT71';

  <<__LateInit>>
  private CT71 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT71 $c): void {}

  protected static function funcReturn(mixed $c): CT71 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT71>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT71>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT71 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT71> {
    return vec[imagecreate(10, 10),tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT72 = shape(...)|(mixed, mixed);

  
class CheckCT72<T as CT72> extends BaseCheck {
  const type T = CT72;
  const string NAME = 'CT72';

  <<__LateInit>>
  private CT72 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT72 $c): void {}

  protected static function funcReturn(mixed $c): CT72 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT72>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT72>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT72 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT72> {
    return vec[shape('x' => 10),shape(),tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT73 = string|(mixed, mixed);

  
class CheckCT73<T as CT73> extends BaseCheck {
  const type T = CT73;
  const string NAME = 'CT73';

  <<__LateInit>>
  private CT73 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT73 $c): void {}

  protected static function funcReturn(mixed $c): CT73 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT73>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT73>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT73 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT73> {
    return vec['','hello world',tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT74 = vec<mixed>|(mixed, mixed);

  
class CheckCT74<T as CT74> extends BaseCheck {
  const type T = CT74;
  const string NAME = 'CT74';

  <<__LateInit>>
  private CT74 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT74 $c): void {}

  protected static function funcReturn(mixed $c): CT74 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT74>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT74>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT74 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT74> {
    return vec[tuple(0, 0),tuple(1, 2, 3),vec[]];
  }
}
case type CT75 = vec_or_dict<string>|(mixed, mixed);

  
class CheckCT75<T as CT75> extends BaseCheck {
  const type T = CT75;
  const string NAME = 'CT75';

  <<__LateInit>>
  private CT75 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT75 $c): void {}

  protected static function funcReturn(mixed $c): CT75 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT75>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT75>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT75 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT75> {
    return vec[dict[],tuple(0, 0),tuple(1, 2, 3),vec[]];
  }
}
case type CT76 = void|(mixed, mixed);

  
class CheckCT76<T as CT76> extends BaseCheck {
  const type T = CT76;
  const string NAME = 'CT76';

  <<__LateInit>>
  private CT76 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT76 $c): void {}

  protected static function funcReturn(mixed $c): CT76 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT76>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT76>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT76 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT76> {
    return vec[null,tuple(0, 0),tuple(1, 2, 3)];
  }
}
case type CT77 = ?bool|?bool;

  
class CheckCT77<T as CT77> extends BaseCheck {
  const type T = CT77;
  const string NAME = 'CT77';

  <<__LateInit>>
  private CT77 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT77 $c): void {}

  protected static function funcReturn(mixed $c): CT77 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT77>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT77>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT77 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT77> {
    return vec[false,null,true];
  }
}
case type CT78 = AbsFinal|?bool;

  
class CheckCT78<T as CT78> extends BaseCheck {
  const type T = CT78;
  const string NAME = 'CT78';

  <<__LateInit>>
  private CT78 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT78 $c): void {}

  protected static function funcReturn(mixed $c): CT78 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT78>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT78>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT78 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT78> {
    return vec[false,null,true];
  }
}
case type CT79 = Awaitable<num>|?bool;

  
class CheckCT79<T as CT79> extends BaseCheck {
  const type T = CT79;
  const string NAME = 'CT79';

  <<__LateInit>>
  private CT79 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT79 $c): void {}

  protected static function funcReturn(mixed $c): CT79 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT79>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT79>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT79 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT79> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },false,null,true];
  }
}
case type CT80 = Container<mixed>|?bool;

  
class CheckCT80<T as CT80> extends BaseCheck {
  const type T = CT80;
  const string NAME = 'CT80';

  <<__LateInit>>
  private CT80 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT80 $c): void {}

  protected static function funcReturn(mixed $c): CT80 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT80>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT80>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT80 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT80> {
    return vec[false,keyset[],null,true,vec[]];
  }
}
case type CT81 = HH\AnyArray<arraykey, mixed>|?bool;

  
class CheckCT81<T as CT81> extends BaseCheck {
  const type T = CT81;
  const string NAME = 'CT81';

  <<__LateInit>>
  private CT81 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT81 $c): void {}

  protected static function funcReturn(mixed $c): CT81 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT81>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT81>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT81 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT81> {
    return vec[dict[],false,keyset[],null,true,vec[]];
  }
}
case type CT82 = HH\EnumClass\Label<EC, float>|?bool;

  
class CheckCT82<T as CT82> extends BaseCheck {
  const type T = CT82;
  const string NAME = 'CT82';

  <<__LateInit>>
  private CT82 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT82 $c): void {}

  protected static function funcReturn(mixed $c): CT82 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT82>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT82>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT82 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT82> {
    return vec[#A,EC#B,false,null,true];
  }
}
case type CT83 = HH\FunctionRef<(function(): void)>|?bool;

  
class CheckCT83<T as CT83> extends BaseCheck {
  const type T = CT83;
  const string NAME = 'CT83';

  <<__LateInit>>
  private CT83 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT83 $c): void {}

  protected static function funcReturn(mixed $c): CT83 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT83>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT83>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT83 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT83> {
    return vec[false,my_func<>,null,true];
  }
}
case type CT84 = HH\MemberOf<EC, float>|?bool;

  
class CheckCT84<T as CT84> extends BaseCheck {
  const type T = CT84;
  const string NAME = 'CT84';

  <<__LateInit>>
  private CT84 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT84 $c): void {}

  protected static function funcReturn(mixed $c): CT84 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT84>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT84>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT84 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT84> {
    return vec[EC::A,EC::B,false,null,true];
  }
}
case type CT85 = KeyedContainer<arraykey, mixed>|?bool;

  
class CheckCT85<T as CT85> extends BaseCheck {
  const type T = CT85;
  const string NAME = 'CT85';

  <<__LateInit>>
  private CT85 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT85 $c): void {}

  protected static function funcReturn(mixed $c): CT85 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT85>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT85>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT85 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT85> {
    return vec[dict[],false,null,true,vec[]];
  }
}
case type CT86 = KeyedTraversable<arraykey, mixed>|?bool;

  
class CheckCT86<T as CT86> extends BaseCheck {
  const type T = CT86;
  const string NAME = 'CT86';

  <<__LateInit>>
  private CT86 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT86 $c): void {}

  protected static function funcReturn(mixed $c): CT86 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT86>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT86>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT86 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT86> {
    return vec[dict[],false,keyset[],null,true,vec[]];
  }
}
case type CT87 = MyEnum|?bool;

  
class CheckCT87<T as CT87> extends BaseCheck {
  const type T = CT87;
  const string NAME = 'CT87';

  <<__LateInit>>
  private CT87 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT87 $c): void {}

  protected static function funcReturn(mixed $c): CT87 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT87>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT87>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT87 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT87> {
    return vec['B',MyEnum::A,false,null,true];
  }
}
case type CT88 = MyTrait|?bool;

  
class CheckCT88<T as CT88> extends BaseCheck {
  const type T = CT88;
  const string NAME = 'CT88';

  <<__LateInit>>
  private CT88 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT88 $c): void {}

  protected static function funcReturn(mixed $c): CT88 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT88>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT88>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT88 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT88> {
    return vec[false,null,true];
  }
}
case type CT89 = Stringish|?bool;

  
class CheckCT89<T as CT89> extends BaseCheck {
  const type T = CT89;
  const string NAME = 'CT89';

  <<__LateInit>>
  private CT89 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT89 $c): void {}

  protected static function funcReturn(mixed $c): CT89 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT89>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT89>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT89 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT89> {
    return vec['','hello world',false,new StringishObj(),null,true];
  }
}
case type CT90 = Traversable<mixed>|?bool;

  
class CheckCT90<T as CT90> extends BaseCheck {
  const type T = CT90;
  const string NAME = 'CT90';

  <<__LateInit>>
  private CT90 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT90 $c): void {}

  protected static function funcReturn(mixed $c): CT90 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT90>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT90>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT90 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT90> {
    return vec[dict[],false,keyset[],null,true,vec[]];
  }
}
case type CT91 = XHPChild|?bool;

  
class CheckCT91<T as CT91> extends BaseCheck {
  const type T = CT91;
  const string NAME = 'CT91';

  <<__LateInit>>
  private CT91 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT91 $c): void {}

  protected static function funcReturn(mixed $c): CT91 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT91>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT91>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT91 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT91> {
    return vec['','hello world',0,1,<my-xhp/>,false,null,true];
  }
}
case type CT92 = arraykey|?bool;

  
class CheckCT92<T as CT92> extends BaseCheck {
  const type T = CT92;
  const string NAME = 'CT92';

  <<__LateInit>>
  private CT92 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT92 $c): void {}

  protected static function funcReturn(mixed $c): CT92 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT92>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT92>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT92 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT92> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT93 = bool|?bool;

  
class CheckCT93<T as CT93> extends BaseCheck {
  const type T = CT93;
  const string NAME = 'CT93';

  <<__LateInit>>
  private CT93 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT93 $c): void {}

  protected static function funcReturn(mixed $c): CT93 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT93>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT93>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT93 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT93> {
    return vec[false,null,true];
  }
}
case type CT94 = dict<arraykey, mixed>|?bool;

  
class CheckCT94<T as CT94> extends BaseCheck {
  const type T = CT94;
  const string NAME = 'CT94';

  <<__LateInit>>
  private CT94 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT94 $c): void {}

  protected static function funcReturn(mixed $c): CT94 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT94>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT94>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT94 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT94> {
    return vec[dict[],false,null,true];
  }
}
case type CT95 = dynamic|?bool;

  
class CheckCT95<T as CT95> extends BaseCheck {
  const type T = CT95;
  const string NAME = 'CT95';

  <<__LateInit>>
  private CT95 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT95 $c): void {}

  protected static function funcReturn(mixed $c): CT95 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT95>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT95>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT95 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT95> {
    return vec[false,null,shape('x' => 10),shape(),true];
  }
}
case type CT96 = float|?bool;

  
class CheckCT96<T as CT96> extends BaseCheck {
  const type T = CT96;
  const string NAME = 'CT96';

  <<__LateInit>>
  private CT96 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT96 $c): void {}

  protected static function funcReturn(mixed $c): CT96 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT96>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT96>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT96 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT96> {
    return vec[0.0,3.14,false,null,true];
  }
}
case type CT97 = int|?bool;

  
class CheckCT97<T as CT97> extends BaseCheck {
  const type T = CT97;
  const string NAME = 'CT97';

  <<__LateInit>>
  private CT97 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT97 $c): void {}

  protected static function funcReturn(mixed $c): CT97 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT97>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT97>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT97 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT97> {
    return vec[0,1,false,null,true];
  }
}
case type CT98 = keyset<arraykey>|?bool;

  
class CheckCT98<T as CT98> extends BaseCheck {
  const type T = CT98;
  const string NAME = 'CT98';

  <<__LateInit>>
  private CT98 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT98 $c): void {}

  protected static function funcReturn(mixed $c): CT98 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT98>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT98>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT98 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT98> {
    return vec[false,keyset[],null,true];
  }
}
case type CT99 = mixed|?bool;

  
class CheckCT99<T as CT99> extends BaseCheck {
  const type T = CT99;
  const string NAME = 'CT99';

  <<__LateInit>>
  private CT99 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT99 $c): void {}

  protected static function funcReturn(mixed $c): CT99 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT99>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT99>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT99 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT99> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT100 = nonnull|?bool;

  
class CheckCT100<T as CT100> extends BaseCheck {
  const type T = CT100;
  const string NAME = 'CT100';

  <<__LateInit>>
  private CT100 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT100 $c): void {}

  protected static function funcReturn(mixed $c): CT100 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT100>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT100>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT100 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT100> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT101 = noreturn|?bool;

  
class CheckCT101<T as CT101> extends BaseCheck {
  const type T = CT101;
  const string NAME = 'CT101';

  <<__LateInit>>
  private CT101 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT101 $c): void {}

  protected static function funcReturn(mixed $c): CT101 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT101>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT101>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT101 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT101> {
    return vec[false,null,true];
  }
}
case type CT102 = nothing|?bool;

  
class CheckCT102<T as CT102> extends BaseCheck {
  const type T = CT102;
  const string NAME = 'CT102';

  <<__LateInit>>
  private CT102 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT102 $c): void {}

  protected static function funcReturn(mixed $c): CT102 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT102>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT102>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT102 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT102> {
    return vec[false,null,true];
  }
}
case type CT103 = null|?bool;

  
class CheckCT103<T as CT103> extends BaseCheck {
  const type T = CT103;
  const string NAME = 'CT103';

  <<__LateInit>>
  private CT103 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT103 $c): void {}

  protected static function funcReturn(mixed $c): CT103 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT103>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT103>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT103 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT103> {
    return vec[false,null,true];
  }
}
case type CT104 = num|?bool;

  
class CheckCT104<T as CT104> extends BaseCheck {
  const type T = CT104;
  const string NAME = 'CT104';

  <<__LateInit>>
  private CT104 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT104 $c): void {}

  protected static function funcReturn(mixed $c): CT104 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT104>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT104>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT104 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT104> {
    return vec[0,0.0,1,3.14,false,null,true];
  }
}
case type CT105 = shape(...)|?bool;

  
class CheckCT105<T as CT105> extends BaseCheck {
  const type T = CT105;
  const string NAME = 'CT105';

  <<__LateInit>>
  private CT105 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT105 $c): void {}

  protected static function funcReturn(mixed $c): CT105 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT105>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT105>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT105 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT105> {
    return vec[false,null,shape('x' => 10),shape(),true];
  }
}
case type CT106 = string|?bool;

  
class CheckCT106<T as CT106> extends BaseCheck {
  const type T = CT106;
  const string NAME = 'CT106';

  <<__LateInit>>
  private CT106 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT106 $c): void {}

  protected static function funcReturn(mixed $c): CT106 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT106>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT106>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT106 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT106> {
    return vec['','hello world',false,null,true];
  }
}
case type CT107 = vec<mixed>|?bool;

  
class CheckCT107<T as CT107> extends BaseCheck {
  const type T = CT107;
  const string NAME = 'CT107';

  <<__LateInit>>
  private CT107 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT107 $c): void {}

  protected static function funcReturn(mixed $c): CT107 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT107>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT107>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT107 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT107> {
    return vec[false,null,true,vec[]];
  }
}
case type CT108 = vec_or_dict<string>|?bool;

  
class CheckCT108<T as CT108> extends BaseCheck {
  const type T = CT108;
  const string NAME = 'CT108';

  <<__LateInit>>
  private CT108 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT108 $c): void {}

  protected static function funcReturn(mixed $c): CT108 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT108>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT108>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT108 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT108> {
    return vec[dict[],false,null,true,vec[]];
  }
}
case type CT109 = void|?bool;

  
class CheckCT109<T as CT109> extends BaseCheck {
  const type T = CT109;
  const string NAME = 'CT109';

  <<__LateInit>>
  private CT109 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT109 $c): void {}

  protected static function funcReturn(mixed $c): CT109 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT109>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT109>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT109 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT109> {
    return vec[false,null,true];
  }
}
case type CT110 = AClass|AClass;

  
class CheckCT110<T as CT110> extends BaseCheck {
  const type T = CT110;
  const string NAME = 'CT110';

  <<__LateInit>>
  private CT110 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT110 $c): void {}

  protected static function funcReturn(mixed $c): CT110 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT110>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT110>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT110 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT110> {
    return vec[new AClass()];
  }
}
case type CT111 = AbsFinal|AClass;

  
class CheckCT111<T as CT111> extends BaseCheck {
  const type T = CT111;
  const string NAME = 'CT111';

  <<__LateInit>>
  private CT111 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT111 $c): void {}

  protected static function funcReturn(mixed $c): CT111 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT111>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT111>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT111 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT111> {
    return vec[new AClass()];
  }
}
case type CT112 = Awaitable<num>|AClass;

  
class CheckCT112<T as CT112> extends BaseCheck {
  const type T = CT112;
  const string NAME = 'CT112';

  <<__LateInit>>
  private CT112 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT112 $c): void {}

  protected static function funcReturn(mixed $c): CT112 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT112>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT112>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT112 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT112> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },new AClass()];
  }
}
case type CT113 = Container<mixed>|AClass;

  
class CheckCT113<T as CT113> extends BaseCheck {
  const type T = CT113;
  const string NAME = 'CT113';

  <<__LateInit>>
  private CT113 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT113 $c): void {}

  protected static function funcReturn(mixed $c): CT113 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT113>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT113>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT113 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT113> {
    return vec[keyset[],new AClass(),vec[]];
  }
}
case type CT114 = HH\AnyArray<arraykey, mixed>|AClass;

  
class CheckCT114<T as CT114> extends BaseCheck {
  const type T = CT114;
  const string NAME = 'CT114';

  <<__LateInit>>
  private CT114 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT114 $c): void {}

  protected static function funcReturn(mixed $c): CT114 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT114>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT114>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT114 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT114> {
    return vec[dict[],keyset[],new AClass(),vec[]];
  }
}
case type CT115 = HH\EnumClass\Label<EC, float>|AClass;

  
class CheckCT115<T as CT115> extends BaseCheck {
  const type T = CT115;
  const string NAME = 'CT115';

  <<__LateInit>>
  private CT115 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT115 $c): void {}

  protected static function funcReturn(mixed $c): CT115 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT115>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT115>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT115 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT115> {
    return vec[#A,EC#B,new AClass()];
  }
}
case type CT116 = HH\FunctionRef<(function(): void)>|AClass;

  
class CheckCT116<T as CT116> extends BaseCheck {
  const type T = CT116;
  const string NAME = 'CT116';

  <<__LateInit>>
  private CT116 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT116 $c): void {}

  protected static function funcReturn(mixed $c): CT116 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT116>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT116>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT116 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT116> {
    return vec[my_func<>,new AClass()];
  }
}
case type CT117 = HH\MemberOf<EC, float>|AClass;

  
class CheckCT117<T as CT117> extends BaseCheck {
  const type T = CT117;
  const string NAME = 'CT117';

  <<__LateInit>>
  private CT117 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT117 $c): void {}

  protected static function funcReturn(mixed $c): CT117 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT117>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT117>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT117 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT117> {
    return vec[EC::A,EC::B,new AClass()];
  }
}
case type CT118 = I|AClass;

  
class CheckCT118<T as CT118> extends BaseCheck {
  const type T = CT118;
  const string NAME = 'CT118';

  <<__LateInit>>
  private CT118 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT118 $c): void {}

  protected static function funcReturn(mixed $c): CT118 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT118>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT118>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT118 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT118> {
    return vec[new AClass(),new InstanceOfI()];
  }
}
case type CT119 = KeyedContainer<arraykey, mixed>|AClass;

  
class CheckCT119<T as CT119> extends BaseCheck {
  const type T = CT119;
  const string NAME = 'CT119';

  <<__LateInit>>
  private CT119 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT119 $c): void {}

  protected static function funcReturn(mixed $c): CT119 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT119>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT119>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT119 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT119> {
    return vec[dict[],new AClass(),vec[]];
  }
}
case type CT120 = KeyedTraversable<arraykey, mixed>|AClass;

  
class CheckCT120<T as CT120> extends BaseCheck {
  const type T = CT120;
  const string NAME = 'CT120';

  <<__LateInit>>
  private CT120 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT120 $c): void {}

  protected static function funcReturn(mixed $c): CT120 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT120>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT120>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT120 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT120> {
    return vec[dict[],keyset[],new AClass(),vec[]];
  }
}
case type CT121 = MyEnum|AClass;

  
class CheckCT121<T as CT121> extends BaseCheck {
  const type T = CT121;
  const string NAME = 'CT121';

  <<__LateInit>>
  private CT121 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT121 $c): void {}

  protected static function funcReturn(mixed $c): CT121 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT121>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT121>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT121 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT121> {
    return vec['B',MyEnum::A,new AClass()];
  }
}
case type CT122 = MyTrait|AClass;

  
class CheckCT122<T as CT122> extends BaseCheck {
  const type T = CT122;
  const string NAME = 'CT122';

  <<__LateInit>>
  private CT122 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT122 $c): void {}

  protected static function funcReturn(mixed $c): CT122 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT122>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT122>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT122 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT122> {
    return vec[new AClass()];
  }
}
case type CT123 = ReifiedClass<null>|AClass;

  
class CheckCT123<T as CT123> extends BaseCheck {
  const type T = CT123;
  const string NAME = 'CT123';

  <<__LateInit>>
  private CT123 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT123 $c): void {}

  protected static function funcReturn(mixed $c): CT123 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT123>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT123>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT123 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT123> {
    return vec[new AClass(),new ReifiedClass<null>()];
  }
}
case type CT124 = Stringish|AClass;

  
class CheckCT124<T as CT124> extends BaseCheck {
  const type T = CT124;
  const string NAME = 'CT124';

  <<__LateInit>>
  private CT124 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT124 $c): void {}

  protected static function funcReturn(mixed $c): CT124 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT124>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT124>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT124 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT124> {
    return vec['','hello world',new AClass(),new StringishObj()];
  }
}
case type CT125 = Traversable<mixed>|AClass;

  
class CheckCT125<T as CT125> extends BaseCheck {
  const type T = CT125;
  const string NAME = 'CT125';

  <<__LateInit>>
  private CT125 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT125 $c): void {}

  protected static function funcReturn(mixed $c): CT125 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT125>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT125>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT125 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT125> {
    return vec[dict[],keyset[],new AClass(),vec[]];
  }
}
case type CT126 = XHPChild|AClass;

  
class CheckCT126<T as CT126> extends BaseCheck {
  const type T = CT126;
  const string NAME = 'CT126';

  <<__LateInit>>
  private CT126 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT126 $c): void {}

  protected static function funcReturn(mixed $c): CT126 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT126>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT126>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT126 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT126> {
    return vec['','hello world',0,1,<my-xhp/>,new AClass()];
  }
}
case type CT127 = arraykey|AClass;

  
class CheckCT127<T as CT127> extends BaseCheck {
  const type T = CT127;
  const string NAME = 'CT127';

  <<__LateInit>>
  private CT127 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT127 $c): void {}

  protected static function funcReturn(mixed $c): CT127 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT127>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT127>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT127 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT127> {
    return vec['','hello world',0,1,new AClass()];
  }
}
case type CT128 = bool|AClass;

  
class CheckCT128<T as CT128> extends BaseCheck {
  const type T = CT128;
  const string NAME = 'CT128';

  <<__LateInit>>
  private CT128 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT128 $c): void {}

  protected static function funcReturn(mixed $c): CT128 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT128>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT128>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT128 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT128> {
    return vec[false,new AClass(),true];
  }
}
case type CT129 = dict<arraykey, mixed>|AClass;

  
class CheckCT129<T as CT129> extends BaseCheck {
  const type T = CT129;
  const string NAME = 'CT129';

  <<__LateInit>>
  private CT129 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT129 $c): void {}

  protected static function funcReturn(mixed $c): CT129 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT129>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT129>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT129 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT129> {
    return vec[dict[],new AClass()];
  }
}
case type CT130 = dynamic|AClass;

  
class CheckCT130<T as CT130> extends BaseCheck {
  const type T = CT130;
  const string NAME = 'CT130';

  <<__LateInit>>
  private CT130 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT130 $c): void {}

  protected static function funcReturn(mixed $c): CT130 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT130>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT130>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT130 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT130> {
    return vec[false,new AClass(),null,shape('x' => 10),shape(),true];
  }
}
case type CT131 = float|AClass;

  
class CheckCT131<T as CT131> extends BaseCheck {
  const type T = CT131;
  const string NAME = 'CT131';

  <<__LateInit>>
  private CT131 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT131 $c): void {}

  protected static function funcReturn(mixed $c): CT131 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT131>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT131>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT131 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT131> {
    return vec[0.0,3.14,new AClass()];
  }
}
case type CT132 = int|AClass;

  
class CheckCT132<T as CT132> extends BaseCheck {
  const type T = CT132;
  const string NAME = 'CT132';

  <<__LateInit>>
  private CT132 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT132 $c): void {}

  protected static function funcReturn(mixed $c): CT132 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT132>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT132>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT132 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT132> {
    return vec[0,1,new AClass()];
  }
}
case type CT133 = keyset<arraykey>|AClass;

  
class CheckCT133<T as CT133> extends BaseCheck {
  const type T = CT133;
  const string NAME = 'CT133';

  <<__LateInit>>
  private CT133 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT133 $c): void {}

  protected static function funcReturn(mixed $c): CT133 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT133>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT133>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT133 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT133> {
    return vec[keyset[],new AClass()];
  }
}
case type CT134 = mixed|AClass;

  
class CheckCT134<T as CT134> extends BaseCheck {
  const type T = CT134;
  const string NAME = 'CT134';

  <<__LateInit>>
  private CT134 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT134 $c): void {}

  protected static function funcReturn(mixed $c): CT134 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT134>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT134>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT134 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT134> {
    return vec['','hello world',0,1,false,new AClass(),null,true];
  }
}
case type CT135 = nonnull|AClass;

  
class CheckCT135<T as CT135> extends BaseCheck {
  const type T = CT135;
  const string NAME = 'CT135';

  <<__LateInit>>
  private CT135 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT135 $c): void {}

  protected static function funcReturn(mixed $c): CT135 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT135>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT135>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT135 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT135> {
    return vec['','hello world',0,1,false,new AClass(),true];
  }
}
case type CT136 = noreturn|AClass;

  
class CheckCT136<T as CT136> extends BaseCheck {
  const type T = CT136;
  const string NAME = 'CT136';

  <<__LateInit>>
  private CT136 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT136 $c): void {}

  protected static function funcReturn(mixed $c): CT136 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT136>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT136>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT136 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT136> {
    return vec[new AClass()];
  }
}
case type CT137 = nothing|AClass;

  
class CheckCT137<T as CT137> extends BaseCheck {
  const type T = CT137;
  const string NAME = 'CT137';

  <<__LateInit>>
  private CT137 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT137 $c): void {}

  protected static function funcReturn(mixed $c): CT137 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT137>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT137>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT137 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT137> {
    return vec[new AClass()];
  }
}
case type CT138 = null|AClass;

  
class CheckCT138<T as CT138> extends BaseCheck {
  const type T = CT138;
  const string NAME = 'CT138';

  <<__LateInit>>
  private CT138 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT138 $c): void {}

  protected static function funcReturn(mixed $c): CT138 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT138>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT138>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT138 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT138> {
    return vec[new AClass(),null];
  }
}
case type CT139 = num|AClass;

  
class CheckCT139<T as CT139> extends BaseCheck {
  const type T = CT139;
  const string NAME = 'CT139';

  <<__LateInit>>
  private CT139 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT139 $c): void {}

  protected static function funcReturn(mixed $c): CT139 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT139>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT139>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT139 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT139> {
    return vec[0,0.0,1,3.14,new AClass()];
  }
}
case type CT140 = resource|AClass;

  
class CheckCT140<T as CT140> extends BaseCheck {
  const type T = CT140;
  const string NAME = 'CT140';

  <<__LateInit>>
  private CT140 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT140 $c): void {}

  protected static function funcReturn(mixed $c): CT140 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT140>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT140>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT140 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT140> {
    return vec[imagecreate(10, 10),new AClass()];
  }
}
case type CT141 = shape(...)|AClass;

  
class CheckCT141<T as CT141> extends BaseCheck {
  const type T = CT141;
  const string NAME = 'CT141';

  <<__LateInit>>
  private CT141 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT141 $c): void {}

  protected static function funcReturn(mixed $c): CT141 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT141>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT141>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT141 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT141> {
    return vec[new AClass(),shape('x' => 10),shape()];
  }
}
case type CT142 = string|AClass;

  
class CheckCT142<T as CT142> extends BaseCheck {
  const type T = CT142;
  const string NAME = 'CT142';

  <<__LateInit>>
  private CT142 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT142 $c): void {}

  protected static function funcReturn(mixed $c): CT142 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT142>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT142>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT142 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT142> {
    return vec['','hello world',new AClass()];
  }
}
case type CT143 = vec<mixed>|AClass;

  
class CheckCT143<T as CT143> extends BaseCheck {
  const type T = CT143;
  const string NAME = 'CT143';

  <<__LateInit>>
  private CT143 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT143 $c): void {}

  protected static function funcReturn(mixed $c): CT143 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT143>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT143>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT143 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT143> {
    return vec[new AClass(),vec[]];
  }
}
case type CT144 = vec_or_dict<string>|AClass;

  
class CheckCT144<T as CT144> extends BaseCheck {
  const type T = CT144;
  const string NAME = 'CT144';

  <<__LateInit>>
  private CT144 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT144 $c): void {}

  protected static function funcReturn(mixed $c): CT144 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT144>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT144>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT144 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT144> {
    return vec[dict[],new AClass(),vec[]];
  }
}
case type CT145 = void|AClass;

  
class CheckCT145<T as CT145> extends BaseCheck {
  const type T = CT145;
  const string NAME = 'CT145';

  <<__LateInit>>
  private CT145 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT145 $c): void {}

  protected static function funcReturn(mixed $c): CT145 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT145>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT145>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT145 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT145> {
    return vec[new AClass(),null];
  }
}
case type CT146 = AbsFinal|AbsFinal;

  
class CheckCT146<T as CT146> extends BaseCheck {
  const type T = CT146;
  const string NAME = 'CT146';

  <<__LateInit>>
  private CT146 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT146 $c): void {}

  protected static function funcReturn(mixed $c): CT146 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT146>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT146>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT146 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT146> {
    return vec[];
  }
}
case type CT147 = Awaitable<num>|AbsFinal;

  
class CheckCT147<T as CT147> extends BaseCheck {
  const type T = CT147;
  const string NAME = 'CT147';

  <<__LateInit>>
  private CT147 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT147 $c): void {}

  protected static function funcReturn(mixed $c): CT147 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT147>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT147>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT147 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT147> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT148 = Container<mixed>|AbsFinal;

  
class CheckCT148<T as CT148> extends BaseCheck {
  const type T = CT148;
  const string NAME = 'CT148';

  <<__LateInit>>
  private CT148 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT148 $c): void {}

  protected static function funcReturn(mixed $c): CT148 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT148>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT148>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT148 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT148> {
    return vec[keyset[],vec[]];
  }
}
case type CT149 = HH\AnyArray<arraykey, mixed>|AbsFinal;

  
class CheckCT149<T as CT149> extends BaseCheck {
  const type T = CT149;
  const string NAME = 'CT149';

  <<__LateInit>>
  private CT149 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT149 $c): void {}

  protected static function funcReturn(mixed $c): CT149 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT149>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT149>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT149 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT149> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT150 = HH\EnumClass\Label<EC, float>|AbsFinal;

  
class CheckCT150<T as CT150> extends BaseCheck {
  const type T = CT150;
  const string NAME = 'CT150';

  <<__LateInit>>
  private CT150 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT150 $c): void {}

  protected static function funcReturn(mixed $c): CT150 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT150>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT150>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT150 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT150> {
    return vec[#A,EC#B];
  }
}
case type CT151 = HH\FunctionRef<(function(): void)>|AbsFinal;

  
class CheckCT151<T as CT151> extends BaseCheck {
  const type T = CT151;
  const string NAME = 'CT151';

  <<__LateInit>>
  private CT151 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT151 $c): void {}

  protected static function funcReturn(mixed $c): CT151 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT151>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT151>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT151 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT151> {
    return vec[my_func<>];
  }
}
case type CT152 = HH\MemberOf<EC, float>|AbsFinal;

  
class CheckCT152<T as CT152> extends BaseCheck {
  const type T = CT152;
  const string NAME = 'CT152';

  <<__LateInit>>
  private CT152 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT152 $c): void {}

  protected static function funcReturn(mixed $c): CT152 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT152>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT152>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT152 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT152> {
    return vec[EC::A,EC::B];
  }
}
case type CT153 = I|AbsFinal;

  
class CheckCT153<T as CT153> extends BaseCheck {
  const type T = CT153;
  const string NAME = 'CT153';

  <<__LateInit>>
  private CT153 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT153 $c): void {}

  protected static function funcReturn(mixed $c): CT153 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT153>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT153>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT153 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT153> {
    return vec[new InstanceOfI()];
  }
}
case type CT154 = KeyedContainer<arraykey, mixed>|AbsFinal;

  
class CheckCT154<T as CT154> extends BaseCheck {
  const type T = CT154;
  const string NAME = 'CT154';

  <<__LateInit>>
  private CT154 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT154 $c): void {}

  protected static function funcReturn(mixed $c): CT154 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT154>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT154>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT154 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT154> {
    return vec[dict[],vec[]];
  }
}
case type CT155 = KeyedTraversable<arraykey, mixed>|AbsFinal;

  
class CheckCT155<T as CT155> extends BaseCheck {
  const type T = CT155;
  const string NAME = 'CT155';

  <<__LateInit>>
  private CT155 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT155 $c): void {}

  protected static function funcReturn(mixed $c): CT155 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT155>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT155>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT155 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT155> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT156 = MyEnum|AbsFinal;

  
class CheckCT156<T as CT156> extends BaseCheck {
  const type T = CT156;
  const string NAME = 'CT156';

  <<__LateInit>>
  private CT156 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT156 $c): void {}

  protected static function funcReturn(mixed $c): CT156 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT156>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT156>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT156 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT156> {
    return vec['B',MyEnum::A];
  }
}
case type CT157 = MyTrait|AbsFinal;

  
class CheckCT157<T as CT157> extends BaseCheck {
  const type T = CT157;
  const string NAME = 'CT157';

  <<__LateInit>>
  private CT157 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT157 $c): void {}

  protected static function funcReturn(mixed $c): CT157 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT157>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT157>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT157 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT157> {
    return vec[];
  }
}
case type CT158 = ReifiedClass<null>|AbsFinal;

  
class CheckCT158<T as CT158> extends BaseCheck {
  const type T = CT158;
  const string NAME = 'CT158';

  <<__LateInit>>
  private CT158 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT158 $c): void {}

  protected static function funcReturn(mixed $c): CT158 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT158>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT158>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT158 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT158> {
    return vec[new ReifiedClass<null>()];
  }
}
case type CT159 = Stringish|AbsFinal;

  
class CheckCT159<T as CT159> extends BaseCheck {
  const type T = CT159;
  const string NAME = 'CT159';

  <<__LateInit>>
  private CT159 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT159 $c): void {}

  protected static function funcReturn(mixed $c): CT159 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT159>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT159>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT159 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT159> {
    return vec['','hello world',new StringishObj()];
  }
}
case type CT160 = Traversable<mixed>|AbsFinal;

  
class CheckCT160<T as CT160> extends BaseCheck {
  const type T = CT160;
  const string NAME = 'CT160';

  <<__LateInit>>
  private CT160 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT160 $c): void {}

  protected static function funcReturn(mixed $c): CT160 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT160>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT160>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT160 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT160> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT161 = XHPChild|AbsFinal;

  
class CheckCT161<T as CT161> extends BaseCheck {
  const type T = CT161;
  const string NAME = 'CT161';

  <<__LateInit>>
  private CT161 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT161 $c): void {}

  protected static function funcReturn(mixed $c): CT161 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT161>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT161>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT161 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT161> {
    return vec['','hello world',0,1,<my-xhp/>];
  }
}
case type CT162 = arraykey|AbsFinal;

  
class CheckCT162<T as CT162> extends BaseCheck {
  const type T = CT162;
  const string NAME = 'CT162';

  <<__LateInit>>
  private CT162 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT162 $c): void {}

  protected static function funcReturn(mixed $c): CT162 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT162>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT162>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT162 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT162> {
    return vec['','hello world',0,1];
  }
}
case type CT163 = bool|AbsFinal;

  
class CheckCT163<T as CT163> extends BaseCheck {
  const type T = CT163;
  const string NAME = 'CT163';

  <<__LateInit>>
  private CT163 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT163 $c): void {}

  protected static function funcReturn(mixed $c): CT163 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT163>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT163>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT163 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT163> {
    return vec[false,true];
  }
}
case type CT164 = dict<arraykey, mixed>|AbsFinal;

  
class CheckCT164<T as CT164> extends BaseCheck {
  const type T = CT164;
  const string NAME = 'CT164';

  <<__LateInit>>
  private CT164 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT164 $c): void {}

  protected static function funcReturn(mixed $c): CT164 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT164>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT164>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT164 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT164> {
    return vec[dict[]];
  }
}
case type CT165 = dynamic|AbsFinal;

  
class CheckCT165<T as CT165> extends BaseCheck {
  const type T = CT165;
  const string NAME = 'CT165';

  <<__LateInit>>
  private CT165 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT165 $c): void {}

  protected static function funcReturn(mixed $c): CT165 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT165>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT165>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT165 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT165> {
    return vec[false,null,shape('x' => 10),shape(),true];
  }
}
case type CT166 = float|AbsFinal;

  
class CheckCT166<T as CT166> extends BaseCheck {
  const type T = CT166;
  const string NAME = 'CT166';

  <<__LateInit>>
  private CT166 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT166 $c): void {}

  protected static function funcReturn(mixed $c): CT166 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT166>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT166>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT166 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT166> {
    return vec[0.0,3.14];
  }
}
case type CT167 = int|AbsFinal;

  
class CheckCT167<T as CT167> extends BaseCheck {
  const type T = CT167;
  const string NAME = 'CT167';

  <<__LateInit>>
  private CT167 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT167 $c): void {}

  protected static function funcReturn(mixed $c): CT167 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT167>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT167>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT167 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT167> {
    return vec[0,1];
  }
}
case type CT168 = keyset<arraykey>|AbsFinal;

  
class CheckCT168<T as CT168> extends BaseCheck {
  const type T = CT168;
  const string NAME = 'CT168';

  <<__LateInit>>
  private CT168 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT168 $c): void {}

  protected static function funcReturn(mixed $c): CT168 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT168>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT168>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT168 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT168> {
    return vec[keyset[]];
  }
}
case type CT169 = mixed|AbsFinal;

  
class CheckCT169<T as CT169> extends BaseCheck {
  const type T = CT169;
  const string NAME = 'CT169';

  <<__LateInit>>
  private CT169 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT169 $c): void {}

  protected static function funcReturn(mixed $c): CT169 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT169>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT169>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT169 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT169> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT170 = nonnull|AbsFinal;

  
class CheckCT170<T as CT170> extends BaseCheck {
  const type T = CT170;
  const string NAME = 'CT170';

  <<__LateInit>>
  private CT170 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT170 $c): void {}

  protected static function funcReturn(mixed $c): CT170 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT170>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT170>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT170 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT170> {
    return vec['','hello world',0,1,false,true];
  }
}
case type CT171 = noreturn|AbsFinal;

  
class CheckCT171<T as CT171> extends BaseCheck {
  const type T = CT171;
  const string NAME = 'CT171';

  <<__LateInit>>
  private CT171 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT171 $c): void {}

  protected static function funcReturn(mixed $c): CT171 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT171>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT171>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT171 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT171> {
    return vec[];
  }
}
case type CT172 = nothing|AbsFinal;

  
class CheckCT172<T as CT172> extends BaseCheck {
  const type T = CT172;
  const string NAME = 'CT172';

  <<__LateInit>>
  private CT172 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT172 $c): void {}

  protected static function funcReturn(mixed $c): CT172 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT172>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT172>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT172 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT172> {
    return vec[];
  }
}
case type CT173 = null|AbsFinal;

  
class CheckCT173<T as CT173> extends BaseCheck {
  const type T = CT173;
  const string NAME = 'CT173';

  <<__LateInit>>
  private CT173 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT173 $c): void {}

  protected static function funcReturn(mixed $c): CT173 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT173>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT173>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT173 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT173> {
    return vec[null];
  }
}
case type CT174 = num|AbsFinal;

  
class CheckCT174<T as CT174> extends BaseCheck {
  const type T = CT174;
  const string NAME = 'CT174';

  <<__LateInit>>
  private CT174 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT174 $c): void {}

  protected static function funcReturn(mixed $c): CT174 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT174>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT174>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT174 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT174> {
    return vec[0,0.0,1,3.14];
  }
}
case type CT175 = resource|AbsFinal;

  
class CheckCT175<T as CT175> extends BaseCheck {
  const type T = CT175;
  const string NAME = 'CT175';

  <<__LateInit>>
  private CT175 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT175 $c): void {}

  protected static function funcReturn(mixed $c): CT175 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT175>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT175>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT175 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT175> {
    return vec[imagecreate(10, 10)];
  }
}
case type CT176 = shape(...)|AbsFinal;

  
class CheckCT176<T as CT176> extends BaseCheck {
  const type T = CT176;
  const string NAME = 'CT176';

  <<__LateInit>>
  private CT176 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT176 $c): void {}

  protected static function funcReturn(mixed $c): CT176 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT176>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT176>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT176 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT176> {
    return vec[shape('x' => 10),shape()];
  }
}
case type CT177 = string|AbsFinal;

  
class CheckCT177<T as CT177> extends BaseCheck {
  const type T = CT177;
  const string NAME = 'CT177';

  <<__LateInit>>
  private CT177 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT177 $c): void {}

  protected static function funcReturn(mixed $c): CT177 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT177>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT177>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT177 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT177> {
    return vec['','hello world'];
  }
}
case type CT178 = vec<mixed>|AbsFinal;

  
class CheckCT178<T as CT178> extends BaseCheck {
  const type T = CT178;
  const string NAME = 'CT178';

  <<__LateInit>>
  private CT178 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT178 $c): void {}

  protected static function funcReturn(mixed $c): CT178 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT178>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT178>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT178 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT178> {
    return vec[vec[]];
  }
}
case type CT179 = vec_or_dict<string>|AbsFinal;

  
class CheckCT179<T as CT179> extends BaseCheck {
  const type T = CT179;
  const string NAME = 'CT179';

  <<__LateInit>>
  private CT179 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT179 $c): void {}

  protected static function funcReturn(mixed $c): CT179 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT179>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT179>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT179 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT179> {
    return vec[dict[],vec[]];
  }
}
case type CT180 = void|AbsFinal;

  
class CheckCT180<T as CT180> extends BaseCheck {
  const type T = CT180;
  const string NAME = 'CT180';

  <<__LateInit>>
  private CT180 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT180 $c): void {}

  protected static function funcReturn(mixed $c): CT180 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT180>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT180>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT180 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT180> {
    return vec[null];
  }
}
case type CT181 = Awaitable<num>|Awaitable<num>;

  
class CheckCT181<T as CT181> extends BaseCheck {
  const type T = CT181;
  const string NAME = 'CT181';

  <<__LateInit>>
  private CT181 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT181 $c): void {}

  protected static function funcReturn(mixed $c): CT181 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT181>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT181>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT181 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT181> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT182 = Container<mixed>|Awaitable<num>;

  
class CheckCT182<T as CT182> extends BaseCheck {
  const type T = CT182;
  const string NAME = 'CT182';

  <<__LateInit>>
  private CT182 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT182 $c): void {}

  protected static function funcReturn(mixed $c): CT182 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT182>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT182>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT182 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT182> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },keyset[],vec[]];
  }
}
case type CT183 = HH\AnyArray<arraykey, mixed>|Awaitable<num>;

  
class CheckCT183<T as CT183> extends BaseCheck {
  const type T = CT183;
  const string NAME = 'CT183';

  <<__LateInit>>
  private CT183 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT183 $c): void {}

  protected static function funcReturn(mixed $c): CT183 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT183>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT183>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT183 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT183> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },dict[],keyset[],vec[]];
  }
}
case type CT184 = HH\EnumClass\Label<EC, float>|Awaitable<num>;

  
class CheckCT184<T as CT184> extends BaseCheck {
  const type T = CT184;
  const string NAME = 'CT184';

  <<__LateInit>>
  private CT184 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT184 $c): void {}

  protected static function funcReturn(mixed $c): CT184 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT184>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT184>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT184 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT184> {
    return vec[#A,EC#B,async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT185 = HH\FunctionRef<(function(): void)>|Awaitable<num>;

  
class CheckCT185<T as CT185> extends BaseCheck {
  const type T = CT185;
  const string NAME = 'CT185';

  <<__LateInit>>
  private CT185 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT185 $c): void {}

  protected static function funcReturn(mixed $c): CT185 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT185>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT185>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT185 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT185> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },my_func<>];
  }
}
case type CT186 = HH\MemberOf<EC, float>|Awaitable<num>;

  
class CheckCT186<T as CT186> extends BaseCheck {
  const type T = CT186;
  const string NAME = 'CT186';

  <<__LateInit>>
  private CT186 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT186 $c): void {}

  protected static function funcReturn(mixed $c): CT186 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT186>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT186>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT186 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT186> {
    return vec[EC::A,EC::B,async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT187 = I|Awaitable<num>;

  
class CheckCT187<T as CT187> extends BaseCheck {
  const type T = CT187;
  const string NAME = 'CT187';

  <<__LateInit>>
  private CT187 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT187 $c): void {}

  protected static function funcReturn(mixed $c): CT187 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT187>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT187>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT187 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT187> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },new InstanceOfI()];
  }
}
case type CT188 = KeyedContainer<arraykey, mixed>|Awaitable<num>;

  
class CheckCT188<T as CT188> extends BaseCheck {
  const type T = CT188;
  const string NAME = 'CT188';

  <<__LateInit>>
  private CT188 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT188 $c): void {}

  protected static function funcReturn(mixed $c): CT188 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT188>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT188>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT188 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT188> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },dict[],vec[]];
  }
}
case type CT189 = KeyedTraversable<arraykey, mixed>|Awaitable<num>;

  
class CheckCT189<T as CT189> extends BaseCheck {
  const type T = CT189;
  const string NAME = 'CT189';

  <<__LateInit>>
  private CT189 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT189 $c): void {}

  protected static function funcReturn(mixed $c): CT189 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT189>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT189>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT189 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT189> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },dict[],keyset[],vec[]];
  }
}
case type CT190 = MyEnum|Awaitable<num>;

  
class CheckCT190<T as CT190> extends BaseCheck {
  const type T = CT190;
  const string NAME = 'CT190';

  <<__LateInit>>
  private CT190 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT190 $c): void {}

  protected static function funcReturn(mixed $c): CT190 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT190>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT190>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT190 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT190> {
    return vec['B',MyEnum::A,async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT191 = MyTrait|Awaitable<num>;

  
class CheckCT191<T as CT191> extends BaseCheck {
  const type T = CT191;
  const string NAME = 'CT191';

  <<__LateInit>>
  private CT191 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT191 $c): void {}

  protected static function funcReturn(mixed $c): CT191 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT191>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT191>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT191 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT191> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT192 = ReifiedClass<null>|Awaitable<num>;

  
class CheckCT192<T as CT192> extends BaseCheck {
  const type T = CT192;
  const string NAME = 'CT192';

  <<__LateInit>>
  private CT192 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT192 $c): void {}

  protected static function funcReturn(mixed $c): CT192 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT192>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT192>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT192 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT192> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },new ReifiedClass<null>()];
  }
}
case type CT193 = Stringish|Awaitable<num>;

  
class CheckCT193<T as CT193> extends BaseCheck {
  const type T = CT193;
  const string NAME = 'CT193';

  <<__LateInit>>
  private CT193 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT193 $c): void {}

  protected static function funcReturn(mixed $c): CT193 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT193>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT193>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT193 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT193> {
    return vec['','hello world',async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },new StringishObj()];
  }
}
case type CT194 = Traversable<mixed>|Awaitable<num>;

  
class CheckCT194<T as CT194> extends BaseCheck {
  const type T = CT194;
  const string NAME = 'CT194';

  <<__LateInit>>
  private CT194 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT194 $c): void {}

  protected static function funcReturn(mixed $c): CT194 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT194>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT194>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT194 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT194> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },dict[],keyset[],vec[]];
  }
}
case type CT195 = XHPChild|Awaitable<num>;

  
class CheckCT195<T as CT195> extends BaseCheck {
  const type T = CT195;
  const string NAME = 'CT195';

  <<__LateInit>>
  private CT195 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT195 $c): void {}

  protected static function funcReturn(mixed $c): CT195 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT195>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT195>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT195 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT195> {
    return vec['','hello world',0,1,<my-xhp/>,async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT196 = arraykey|Awaitable<num>;

  
class CheckCT196<T as CT196> extends BaseCheck {
  const type T = CT196;
  const string NAME = 'CT196';

  <<__LateInit>>
  private CT196 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT196 $c): void {}

  protected static function funcReturn(mixed $c): CT196 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT196>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT196>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT196 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT196> {
    return vec['','hello world',0,1,async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT197 = bool|Awaitable<num>;

  
class CheckCT197<T as CT197> extends BaseCheck {
  const type T = CT197;
  const string NAME = 'CT197';

  <<__LateInit>>
  private CT197 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT197 $c): void {}

  protected static function funcReturn(mixed $c): CT197 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT197>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT197>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT197 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT197> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },false,true];
  }
}
case type CT198 = dict<arraykey, mixed>|Awaitable<num>;

  
class CheckCT198<T as CT198> extends BaseCheck {
  const type T = CT198;
  const string NAME = 'CT198';

  <<__LateInit>>
  private CT198 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT198 $c): void {}

  protected static function funcReturn(mixed $c): CT198 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT198>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT198>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT198 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT198> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },dict[]];
  }
}
case type CT199 = dynamic|Awaitable<num>;

  
class CheckCT199<T as CT199> extends BaseCheck {
  const type T = CT199;
  const string NAME = 'CT199';

  <<__LateInit>>
  private CT199 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT199 $c): void {}

  protected static function funcReturn(mixed $c): CT199 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT199>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT199>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT199 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT199> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },false,null,shape('x' => 10),shape(),true];
  }
}
case type CT200 = float|Awaitable<num>;

  
class CheckCT200<T as CT200> extends BaseCheck {
  const type T = CT200;
  const string NAME = 'CT200';

  <<__LateInit>>
  private CT200 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT200 $c): void {}

  protected static function funcReturn(mixed $c): CT200 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT200>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT200>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT200 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT200> {
    return vec[0.0,3.14,async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT201 = int|Awaitable<num>;

  
class CheckCT201<T as CT201> extends BaseCheck {
  const type T = CT201;
  const string NAME = 'CT201';

  <<__LateInit>>
  private CT201 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT201 $c): void {}

  protected static function funcReturn(mixed $c): CT201 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT201>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT201>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT201 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT201> {
    return vec[0,1,async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT202 = keyset<arraykey>|Awaitable<num>;

  
class CheckCT202<T as CT202> extends BaseCheck {
  const type T = CT202;
  const string NAME = 'CT202';

  <<__LateInit>>
  private CT202 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT202 $c): void {}

  protected static function funcReturn(mixed $c): CT202 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT202>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT202>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT202 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT202> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },keyset[]];
  }
}
case type CT203 = mixed|Awaitable<num>;

  
class CheckCT203<T as CT203> extends BaseCheck {
  const type T = CT203;
  const string NAME = 'CT203';

  <<__LateInit>>
  private CT203 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT203 $c): void {}

  protected static function funcReturn(mixed $c): CT203 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT203>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT203>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT203 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT203> {
    return vec['','hello world',0,1,async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },false,null,true];
  }
}
case type CT204 = nonnull|Awaitable<num>;

  
class CheckCT204<T as CT204> extends BaseCheck {
  const type T = CT204;
  const string NAME = 'CT204';

  <<__LateInit>>
  private CT204 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT204 $c): void {}

  protected static function funcReturn(mixed $c): CT204 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT204>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT204>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT204 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT204> {
    return vec['','hello world',0,1,async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },false,true];
  }
}
case type CT205 = noreturn|Awaitable<num>;

  
class CheckCT205<T as CT205> extends BaseCheck {
  const type T = CT205;
  const string NAME = 'CT205';

  <<__LateInit>>
  private CT205 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT205 $c): void {}

  protected static function funcReturn(mixed $c): CT205 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT205>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT205>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT205 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT205> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT206 = nothing|Awaitable<num>;

  
class CheckCT206<T as CT206> extends BaseCheck {
  const type T = CT206;
  const string NAME = 'CT206';

  <<__LateInit>>
  private CT206 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT206 $c): void {}

  protected static function funcReturn(mixed $c): CT206 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT206>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT206>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT206 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT206> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT207 = null|Awaitable<num>;

  
class CheckCT207<T as CT207> extends BaseCheck {
  const type T = CT207;
  const string NAME = 'CT207';

  <<__LateInit>>
  private CT207 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT207 $c): void {}

  protected static function funcReturn(mixed $c): CT207 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT207>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT207>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT207 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT207> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },null];
  }
}
case type CT208 = num|Awaitable<num>;

  
class CheckCT208<T as CT208> extends BaseCheck {
  const type T = CT208;
  const string NAME = 'CT208';

  <<__LateInit>>
  private CT208 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT208 $c): void {}

  protected static function funcReturn(mixed $c): CT208 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT208>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT208>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT208 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT208> {
    return vec[0,0.0,1,3.14,async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT209 = resource|Awaitable<num>;

  
class CheckCT209<T as CT209> extends BaseCheck {
  const type T = CT209;
  const string NAME = 'CT209';

  <<__LateInit>>
  private CT209 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT209 $c): void {}

  protected static function funcReturn(mixed $c): CT209 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT209>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT209>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT209 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT209> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },imagecreate(10, 10)];
  }
}
case type CT210 = shape(...)|Awaitable<num>;

  
class CheckCT210<T as CT210> extends BaseCheck {
  const type T = CT210;
  const string NAME = 'CT210';

  <<__LateInit>>
  private CT210 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT210 $c): void {}

  protected static function funcReturn(mixed $c): CT210 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT210>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT210>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT210 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT210> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },shape('x' => 10),shape()];
  }
}
case type CT211 = string|Awaitable<num>;

  
class CheckCT211<T as CT211> extends BaseCheck {
  const type T = CT211;
  const string NAME = 'CT211';

  <<__LateInit>>
  private CT211 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT211 $c): void {}

  protected static function funcReturn(mixed $c): CT211 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT211>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT211>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT211 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT211> {
    return vec['','hello world',async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; }];
  }
}
case type CT212 = vec<mixed>|Awaitable<num>;

  
class CheckCT212<T as CT212> extends BaseCheck {
  const type T = CT212;
  const string NAME = 'CT212';

  <<__LateInit>>
  private CT212 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT212 $c): void {}

  protected static function funcReturn(mixed $c): CT212 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT212>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT212>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT212 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT212> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },vec[]];
  }
}
case type CT213 = vec_or_dict<string>|Awaitable<num>;

  
class CheckCT213<T as CT213> extends BaseCheck {
  const type T = CT213;
  const string NAME = 'CT213';

  <<__LateInit>>
  private CT213 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT213 $c): void {}

  protected static function funcReturn(mixed $c): CT213 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT213>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT213>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT213 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT213> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },dict[],vec[]];
  }
}
case type CT214 = void|Awaitable<num>;

  
class CheckCT214<T as CT214> extends BaseCheck {
  const type T = CT214;
  const string NAME = 'CT214';

  <<__LateInit>>
  private CT214 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT214 $c): void {}

  protected static function funcReturn(mixed $c): CT214 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT214>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT214>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT214 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT214> {
    return vec[async { return 0.0; },async { return 0; },async { return 1; },async { return 3.14; },null];
  }
}
case type CT215 = Container<mixed>|Container<mixed>;

  
class CheckCT215<T as CT215> extends BaseCheck {
  const type T = CT215;
  const string NAME = 'CT215';

  <<__LateInit>>
  private CT215 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT215 $c): void {}

  protected static function funcReturn(mixed $c): CT215 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT215>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT215>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT215 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT215> {
    return vec[keyset[],vec[]];
  }
}
case type CT216 = HH\AnyArray<arraykey, mixed>|Container<mixed>;

  
class CheckCT216<T as CT216> extends BaseCheck {
  const type T = CT216;
  const string NAME = 'CT216';

  <<__LateInit>>
  private CT216 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT216 $c): void {}

  protected static function funcReturn(mixed $c): CT216 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT216>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT216>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT216 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT216> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT217 = HH\EnumClass\Label<EC, float>|Container<mixed>;

  
class CheckCT217<T as CT217> extends BaseCheck {
  const type T = CT217;
  const string NAME = 'CT217';

  <<__LateInit>>
  private CT217 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT217 $c): void {}

  protected static function funcReturn(mixed $c): CT217 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT217>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT217>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT217 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT217> {
    return vec[#A,EC#B,keyset[],vec[]];
  }
}
case type CT218 = HH\FunctionRef<(function(): void)>|Container<mixed>;

  
class CheckCT218<T as CT218> extends BaseCheck {
  const type T = CT218;
  const string NAME = 'CT218';

  <<__LateInit>>
  private CT218 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT218 $c): void {}

  protected static function funcReturn(mixed $c): CT218 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT218>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT218>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT218 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT218> {
    return vec[keyset[],my_func<>,vec[]];
  }
}
case type CT219 = HH\MemberOf<EC, float>|Container<mixed>;

  
class CheckCT219<T as CT219> extends BaseCheck {
  const type T = CT219;
  const string NAME = 'CT219';

  <<__LateInit>>
  private CT219 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT219 $c): void {}

  protected static function funcReturn(mixed $c): CT219 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT219>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT219>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT219 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT219> {
    return vec[EC::A,EC::B,keyset[],vec[]];
  }
}
case type CT220 = I|Container<mixed>;

  
class CheckCT220<T as CT220> extends BaseCheck {
  const type T = CT220;
  const string NAME = 'CT220';

  <<__LateInit>>
  private CT220 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT220 $c): void {}

  protected static function funcReturn(mixed $c): CT220 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT220>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT220>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT220 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT220> {
    return vec[keyset[],new InstanceOfI(),vec[]];
  }
}
case type CT221 = KeyedContainer<arraykey, mixed>|Container<mixed>;

  
class CheckCT221<T as CT221> extends BaseCheck {
  const type T = CT221;
  const string NAME = 'CT221';

  <<__LateInit>>
  private CT221 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT221 $c): void {}

  protected static function funcReturn(mixed $c): CT221 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT221>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT221>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT221 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT221> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT222 = KeyedTraversable<arraykey, mixed>|Container<mixed>;

  
class CheckCT222<T as CT222> extends BaseCheck {
  const type T = CT222;
  const string NAME = 'CT222';

  <<__LateInit>>
  private CT222 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT222 $c): void {}

  protected static function funcReturn(mixed $c): CT222 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT222>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT222>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT222 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT222> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT223 = MyEnum|Container<mixed>;

  
class CheckCT223<T as CT223> extends BaseCheck {
  const type T = CT223;
  const string NAME = 'CT223';

  <<__LateInit>>
  private CT223 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT223 $c): void {}

  protected static function funcReturn(mixed $c): CT223 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT223>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT223>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT223 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT223> {
    return vec['B',MyEnum::A,keyset[],vec[]];
  }
}
case type CT224 = MyTrait|Container<mixed>;

  
class CheckCT224<T as CT224> extends BaseCheck {
  const type T = CT224;
  const string NAME = 'CT224';

  <<__LateInit>>
  private CT224 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT224 $c): void {}

  protected static function funcReturn(mixed $c): CT224 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT224>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT224>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT224 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT224> {
    return vec[keyset[],vec[]];
  }
}
case type CT225 = ReifiedClass<null>|Container<mixed>;

  
class CheckCT225<T as CT225> extends BaseCheck {
  const type T = CT225;
  const string NAME = 'CT225';

  <<__LateInit>>
  private CT225 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT225 $c): void {}

  protected static function funcReturn(mixed $c): CT225 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT225>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT225>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT225 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT225> {
    return vec[keyset[],new ReifiedClass<null>(),vec[]];
  }
}
case type CT226 = Stringish|Container<mixed>;

  
class CheckCT226<T as CT226> extends BaseCheck {
  const type T = CT226;
  const string NAME = 'CT226';

  <<__LateInit>>
  private CT226 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT226 $c): void {}

  protected static function funcReturn(mixed $c): CT226 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT226>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT226>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT226 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT226> {
    return vec['','hello world',keyset[],new StringishObj(),vec[]];
  }
}
case type CT227 = Traversable<mixed>|Container<mixed>;

  
class CheckCT227<T as CT227> extends BaseCheck {
  const type T = CT227;
  const string NAME = 'CT227';

  <<__LateInit>>
  private CT227 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT227 $c): void {}

  protected static function funcReturn(mixed $c): CT227 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT227>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT227>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT227 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT227> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT228 = XHPChild|Container<mixed>;

  
class CheckCT228<T as CT228> extends BaseCheck {
  const type T = CT228;
  const string NAME = 'CT228';

  <<__LateInit>>
  private CT228 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT228 $c): void {}

  protected static function funcReturn(mixed $c): CT228 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT228>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT228>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT228 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT228> {
    return vec['','hello world',0,1,<my-xhp/>,keyset[],vec[]];
  }
}
case type CT229 = arraykey|Container<mixed>;

  
class CheckCT229<T as CT229> extends BaseCheck {
  const type T = CT229;
  const string NAME = 'CT229';

  <<__LateInit>>
  private CT229 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT229 $c): void {}

  protected static function funcReturn(mixed $c): CT229 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT229>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT229>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT229 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT229> {
    return vec['','hello world',0,1,keyset[],vec[]];
  }
}
case type CT230 = bool|Container<mixed>;

  
class CheckCT230<T as CT230> extends BaseCheck {
  const type T = CT230;
  const string NAME = 'CT230';

  <<__LateInit>>
  private CT230 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT230 $c): void {}

  protected static function funcReturn(mixed $c): CT230 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT230>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT230>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT230 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT230> {
    return vec[false,keyset[],true,vec[]];
  }
}
case type CT231 = dict<arraykey, mixed>|Container<mixed>;

  
class CheckCT231<T as CT231> extends BaseCheck {
  const type T = CT231;
  const string NAME = 'CT231';

  <<__LateInit>>
  private CT231 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT231 $c): void {}

  protected static function funcReturn(mixed $c): CT231 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT231>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT231>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT231 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT231> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT232 = dynamic|Container<mixed>;

  
class CheckCT232<T as CT232> extends BaseCheck {
  const type T = CT232;
  const string NAME = 'CT232';

  <<__LateInit>>
  private CT232 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT232 $c): void {}

  protected static function funcReturn(mixed $c): CT232 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT232>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT232>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT232 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT232> {
    return vec[false,keyset[],null,shape('x' => 10),shape(),true,vec[]];
  }
}
case type CT233 = float|Container<mixed>;

  
class CheckCT233<T as CT233> extends BaseCheck {
  const type T = CT233;
  const string NAME = 'CT233';

  <<__LateInit>>
  private CT233 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT233 $c): void {}

  protected static function funcReturn(mixed $c): CT233 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT233>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT233>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT233 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT233> {
    return vec[0.0,3.14,keyset[],vec[]];
  }
}
case type CT234 = int|Container<mixed>;

  
class CheckCT234<T as CT234> extends BaseCheck {
  const type T = CT234;
  const string NAME = 'CT234';

  <<__LateInit>>
  private CT234 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT234 $c): void {}

  protected static function funcReturn(mixed $c): CT234 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT234>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT234>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT234 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT234> {
    return vec[0,1,keyset[],vec[]];
  }
}
case type CT235 = keyset<arraykey>|Container<mixed>;

  
class CheckCT235<T as CT235> extends BaseCheck {
  const type T = CT235;
  const string NAME = 'CT235';

  <<__LateInit>>
  private CT235 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT235 $c): void {}

  protected static function funcReturn(mixed $c): CT235 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT235>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT235>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT235 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT235> {
    return vec[keyset[],vec[]];
  }
}
case type CT236 = mixed|Container<mixed>;

  
class CheckCT236<T as CT236> extends BaseCheck {
  const type T = CT236;
  const string NAME = 'CT236';

  <<__LateInit>>
  private CT236 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT236 $c): void {}

  protected static function funcReturn(mixed $c): CT236 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT236>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT236>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT236 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT236> {
    return vec['','hello world',0,1,false,keyset[],null,true,vec[]];
  }
}
case type CT237 = nonnull|Container<mixed>;

  
class CheckCT237<T as CT237> extends BaseCheck {
  const type T = CT237;
  const string NAME = 'CT237';

  <<__LateInit>>
  private CT237 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT237 $c): void {}

  protected static function funcReturn(mixed $c): CT237 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT237>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT237>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT237 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT237> {
    return vec['','hello world',0,1,false,keyset[],true,vec[]];
  }
}
case type CT238 = noreturn|Container<mixed>;

  
class CheckCT238<T as CT238> extends BaseCheck {
  const type T = CT238;
  const string NAME = 'CT238';

  <<__LateInit>>
  private CT238 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT238 $c): void {}

  protected static function funcReturn(mixed $c): CT238 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT238>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT238>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT238 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT238> {
    return vec[keyset[],vec[]];
  }
}
case type CT239 = nothing|Container<mixed>;

  
class CheckCT239<T as CT239> extends BaseCheck {
  const type T = CT239;
  const string NAME = 'CT239';

  <<__LateInit>>
  private CT239 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT239 $c): void {}

  protected static function funcReturn(mixed $c): CT239 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT239>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT239>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT239 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT239> {
    return vec[keyset[],vec[]];
  }
}
case type CT240 = null|Container<mixed>;

  
class CheckCT240<T as CT240> extends BaseCheck {
  const type T = CT240;
  const string NAME = 'CT240';

  <<__LateInit>>
  private CT240 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT240 $c): void {}

  protected static function funcReturn(mixed $c): CT240 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT240>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT240>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT240 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT240> {
    return vec[keyset[],null,vec[]];
  }
}
case type CT241 = num|Container<mixed>;

  
class CheckCT241<T as CT241> extends BaseCheck {
  const type T = CT241;
  const string NAME = 'CT241';

  <<__LateInit>>
  private CT241 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT241 $c): void {}

  protected static function funcReturn(mixed $c): CT241 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT241>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT241>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT241 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT241> {
    return vec[0,0.0,1,3.14,keyset[],vec[]];
  }
}
case type CT242 = resource|Container<mixed>;

  
class CheckCT242<T as CT242> extends BaseCheck {
  const type T = CT242;
  const string NAME = 'CT242';

  <<__LateInit>>
  private CT242 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT242 $c): void {}

  protected static function funcReturn(mixed $c): CT242 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT242>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT242>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT242 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT242> {
    return vec[imagecreate(10, 10),keyset[],vec[]];
  }
}
case type CT243 = shape(...)|Container<mixed>;

  
class CheckCT243<T as CT243> extends BaseCheck {
  const type T = CT243;
  const string NAME = 'CT243';

  <<__LateInit>>
  private CT243 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT243 $c): void {}

  protected static function funcReturn(mixed $c): CT243 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT243>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT243>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT243 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT243> {
    return vec[keyset[],shape('x' => 10),shape(),vec[]];
  }
}
case type CT244 = string|Container<mixed>;

  
class CheckCT244<T as CT244> extends BaseCheck {
  const type T = CT244;
  const string NAME = 'CT244';

  <<__LateInit>>
  private CT244 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT244 $c): void {}

  protected static function funcReturn(mixed $c): CT244 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT244>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT244>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT244 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT244> {
    return vec['','hello world',keyset[],vec[]];
  }
}
case type CT245 = vec<mixed>|Container<mixed>;

  
class CheckCT245<T as CT245> extends BaseCheck {
  const type T = CT245;
  const string NAME = 'CT245';

  <<__LateInit>>
  private CT245 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT245 $c): void {}

  protected static function funcReturn(mixed $c): CT245 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT245>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT245>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT245 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT245> {
    return vec[keyset[],vec[]];
  }
}
case type CT246 = vec_or_dict<string>|Container<mixed>;

  
class CheckCT246<T as CT246> extends BaseCheck {
  const type T = CT246;
  const string NAME = 'CT246';

  <<__LateInit>>
  private CT246 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT246 $c): void {}

  protected static function funcReturn(mixed $c): CT246 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT246>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT246>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT246 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT246> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT247 = void|Container<mixed>;

  
class CheckCT247<T as CT247> extends BaseCheck {
  const type T = CT247;
  const string NAME = 'CT247';

  <<__LateInit>>
  private CT247 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT247 $c): void {}

  protected static function funcReturn(mixed $c): CT247 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT247>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT247>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT247 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT247> {
    return vec[keyset[],null,vec[]];
  }
}
case type CT248 = HH\AnyArray<arraykey, mixed>|HH\AnyArray<arraykey, mixed>;

  
class CheckCT248<T as CT248> extends BaseCheck {
  const type T = CT248;
  const string NAME = 'CT248';

  <<__LateInit>>
  private CT248 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT248 $c): void {}

  protected static function funcReturn(mixed $c): CT248 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT248>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT248>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT248 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT248> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT249 = HH\EnumClass\Label<EC, float>|HH\AnyArray<arraykey, mixed>;

  
class CheckCT249<T as CT249> extends BaseCheck {
  const type T = CT249;
  const string NAME = 'CT249';

  <<__LateInit>>
  private CT249 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT249 $c): void {}

  protected static function funcReturn(mixed $c): CT249 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT249>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT249>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT249 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT249> {
    return vec[#A,EC#B,dict[],keyset[],vec[]];
  }
}
case type CT250 = HH\FunctionRef<(function(): void)>|HH\AnyArray<arraykey, mixed>;

  
class CheckCT250<T as CT250> extends BaseCheck {
  const type T = CT250;
  const string NAME = 'CT250';

  <<__LateInit>>
  private CT250 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT250 $c): void {}

  protected static function funcReturn(mixed $c): CT250 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT250>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT250>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT250 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT250> {
    return vec[dict[],keyset[],my_func<>,vec[]];
  }
}
case type CT251 = HH\MemberOf<EC, float>|HH\AnyArray<arraykey, mixed>;

  
class CheckCT251<T as CT251> extends BaseCheck {
  const type T = CT251;
  const string NAME = 'CT251';

  <<__LateInit>>
  private CT251 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT251 $c): void {}

  protected static function funcReturn(mixed $c): CT251 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT251>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT251>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT251 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT251> {
    return vec[EC::A,EC::B,dict[],keyset[],vec[]];
  }
}
case type CT252 = I|HH\AnyArray<arraykey, mixed>;

  
class CheckCT252<T as CT252> extends BaseCheck {
  const type T = CT252;
  const string NAME = 'CT252';

  <<__LateInit>>
  private CT252 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT252 $c): void {}

  protected static function funcReturn(mixed $c): CT252 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT252>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT252>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT252 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT252> {
    return vec[dict[],keyset[],new InstanceOfI(),vec[]];
  }
}
case type CT253 = KeyedContainer<arraykey, mixed>|HH\AnyArray<arraykey, mixed>;

  
class CheckCT253<T as CT253> extends BaseCheck {
  const type T = CT253;
  const string NAME = 'CT253';

  <<__LateInit>>
  private CT253 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT253 $c): void {}

  protected static function funcReturn(mixed $c): CT253 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT253>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT253>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT253 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT253> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT254 = KeyedTraversable<arraykey, mixed>|HH\AnyArray<arraykey, mixed>;

  
class CheckCT254<T as CT254> extends BaseCheck {
  const type T = CT254;
  const string NAME = 'CT254';

  <<__LateInit>>
  private CT254 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT254 $c): void {}

  protected static function funcReturn(mixed $c): CT254 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT254>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT254>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT254 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT254> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT255 = MyEnum|HH\AnyArray<arraykey, mixed>;

  
class CheckCT255<T as CT255> extends BaseCheck {
  const type T = CT255;
  const string NAME = 'CT255';

  <<__LateInit>>
  private CT255 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT255 $c): void {}

  protected static function funcReturn(mixed $c): CT255 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT255>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT255>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT255 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT255> {
    return vec['B',MyEnum::A,dict[],keyset[],vec[]];
  }
}
case type CT256 = MyTrait|HH\AnyArray<arraykey, mixed>;

  
class CheckCT256<T as CT256> extends BaseCheck {
  const type T = CT256;
  const string NAME = 'CT256';

  <<__LateInit>>
  private CT256 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT256 $c): void {}

  protected static function funcReturn(mixed $c): CT256 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT256>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT256>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT256 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT256> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT257 = ReifiedClass<null>|HH\AnyArray<arraykey, mixed>;

  
class CheckCT257<T as CT257> extends BaseCheck {
  const type T = CT257;
  const string NAME = 'CT257';

  <<__LateInit>>
  private CT257 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT257 $c): void {}

  protected static function funcReturn(mixed $c): CT257 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT257>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT257>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT257 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT257> {
    return vec[dict[],keyset[],new ReifiedClass<null>(),vec[]];
  }
}
case type CT258 = Stringish|HH\AnyArray<arraykey, mixed>;

  
class CheckCT258<T as CT258> extends BaseCheck {
  const type T = CT258;
  const string NAME = 'CT258';

  <<__LateInit>>
  private CT258 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT258 $c): void {}

  protected static function funcReturn(mixed $c): CT258 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT258>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT258>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT258 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT258> {
    return vec['','hello world',dict[],keyset[],new StringishObj(),vec[]];
  }
}
case type CT259 = Traversable<mixed>|HH\AnyArray<arraykey, mixed>;

  
class CheckCT259<T as CT259> extends BaseCheck {
  const type T = CT259;
  const string NAME = 'CT259';

  <<__LateInit>>
  private CT259 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT259 $c): void {}

  protected static function funcReturn(mixed $c): CT259 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT259>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT259>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT259 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT259> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT260 = XHPChild|HH\AnyArray<arraykey, mixed>;

  
class CheckCT260<T as CT260> extends BaseCheck {
  const type T = CT260;
  const string NAME = 'CT260';

  <<__LateInit>>
  private CT260 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT260 $c): void {}

  protected static function funcReturn(mixed $c): CT260 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT260>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT260>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT260 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT260> {
    return vec['','hello world',0,1,<my-xhp/>,dict[],keyset[],vec[]];
  }
}
case type CT261 = arraykey|HH\AnyArray<arraykey, mixed>;

  
class CheckCT261<T as CT261> extends BaseCheck {
  const type T = CT261;
  const string NAME = 'CT261';

  <<__LateInit>>
  private CT261 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT261 $c): void {}

  protected static function funcReturn(mixed $c): CT261 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT261>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT261>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT261 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT261> {
    return vec['','hello world',0,1,dict[],keyset[],vec[]];
  }
}
case type CT262 = bool|HH\AnyArray<arraykey, mixed>;

  
class CheckCT262<T as CT262> extends BaseCheck {
  const type T = CT262;
  const string NAME = 'CT262';

  <<__LateInit>>
  private CT262 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT262 $c): void {}

  protected static function funcReturn(mixed $c): CT262 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT262>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT262>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT262 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT262> {
    return vec[dict[],false,keyset[],true,vec[]];
  }
}
case type CT263 = dict<arraykey, mixed>|HH\AnyArray<arraykey, mixed>;

  
class CheckCT263<T as CT263> extends BaseCheck {
  const type T = CT263;
  const string NAME = 'CT263';

  <<__LateInit>>
  private CT263 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT263 $c): void {}

  protected static function funcReturn(mixed $c): CT263 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT263>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT263>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT263 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT263> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT264 = dynamic|HH\AnyArray<arraykey, mixed>;

  
class CheckCT264<T as CT264> extends BaseCheck {
  const type T = CT264;
  const string NAME = 'CT264';

  <<__LateInit>>
  private CT264 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT264 $c): void {}

  protected static function funcReturn(mixed $c): CT264 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT264>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT264>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT264 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT264> {
    return vec[dict[],false,keyset[],null,shape('x' => 10),shape(),true,vec[]];
  }
}
case type CT265 = float|HH\AnyArray<arraykey, mixed>;

  
class CheckCT265<T as CT265> extends BaseCheck {
  const type T = CT265;
  const string NAME = 'CT265';

  <<__LateInit>>
  private CT265 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT265 $c): void {}

  protected static function funcReturn(mixed $c): CT265 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT265>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT265>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT265 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT265> {
    return vec[0.0,3.14,dict[],keyset[],vec[]];
  }
}
case type CT266 = int|HH\AnyArray<arraykey, mixed>;

  
class CheckCT266<T as CT266> extends BaseCheck {
  const type T = CT266;
  const string NAME = 'CT266';

  <<__LateInit>>
  private CT266 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT266 $c): void {}

  protected static function funcReturn(mixed $c): CT266 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT266>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT266>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT266 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT266> {
    return vec[0,1,dict[],keyset[],vec[]];
  }
}
case type CT267 = keyset<arraykey>|HH\AnyArray<arraykey, mixed>;

  
class CheckCT267<T as CT267> extends BaseCheck {
  const type T = CT267;
  const string NAME = 'CT267';

  <<__LateInit>>
  private CT267 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT267 $c): void {}

  protected static function funcReturn(mixed $c): CT267 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT267>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT267>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT267 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT267> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT268 = mixed|HH\AnyArray<arraykey, mixed>;

  
class CheckCT268<T as CT268> extends BaseCheck {
  const type T = CT268;
  const string NAME = 'CT268';

  <<__LateInit>>
  private CT268 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT268 $c): void {}

  protected static function funcReturn(mixed $c): CT268 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT268>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT268>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT268 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT268> {
    return vec['','hello world',0,1,dict[],false,keyset[],null,true,vec[]];
  }
}
case type CT269 = nonnull|HH\AnyArray<arraykey, mixed>;

  
class CheckCT269<T as CT269> extends BaseCheck {
  const type T = CT269;
  const string NAME = 'CT269';

  <<__LateInit>>
  private CT269 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT269 $c): void {}

  protected static function funcReturn(mixed $c): CT269 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT269>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT269>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT269 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT269> {
    return vec['','hello world',0,1,dict[],false,keyset[],true,vec[]];
  }
}
case type CT270 = noreturn|HH\AnyArray<arraykey, mixed>;

  
class CheckCT270<T as CT270> extends BaseCheck {
  const type T = CT270;
  const string NAME = 'CT270';

  <<__LateInit>>
  private CT270 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT270 $c): void {}

  protected static function funcReturn(mixed $c): CT270 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT270>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT270>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT270 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT270> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT271 = nothing|HH\AnyArray<arraykey, mixed>;

  
class CheckCT271<T as CT271> extends BaseCheck {
  const type T = CT271;
  const string NAME = 'CT271';

  <<__LateInit>>
  private CT271 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT271 $c): void {}

  protected static function funcReturn(mixed $c): CT271 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT271>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT271>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT271 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT271> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT272 = null|HH\AnyArray<arraykey, mixed>;

  
class CheckCT272<T as CT272> extends BaseCheck {
  const type T = CT272;
  const string NAME = 'CT272';

  <<__LateInit>>
  private CT272 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT272 $c): void {}

  protected static function funcReturn(mixed $c): CT272 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT272>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT272>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT272 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT272> {
    return vec[dict[],keyset[],null,vec[]];
  }
}
case type CT273 = num|HH\AnyArray<arraykey, mixed>;

  
class CheckCT273<T as CT273> extends BaseCheck {
  const type T = CT273;
  const string NAME = 'CT273';

  <<__LateInit>>
  private CT273 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT273 $c): void {}

  protected static function funcReturn(mixed $c): CT273 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT273>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT273>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT273 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT273> {
    return vec[0,0.0,1,3.14,dict[],keyset[],vec[]];
  }
}
case type CT274 = resource|HH\AnyArray<arraykey, mixed>;

  
class CheckCT274<T as CT274> extends BaseCheck {
  const type T = CT274;
  const string NAME = 'CT274';

  <<__LateInit>>
  private CT274 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT274 $c): void {}

  protected static function funcReturn(mixed $c): CT274 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT274>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT274>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT274 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT274> {
    return vec[dict[],imagecreate(10, 10),keyset[],vec[]];
  }
}
case type CT275 = shape(...)|HH\AnyArray<arraykey, mixed>;

  
class CheckCT275<T as CT275> extends BaseCheck {
  const type T = CT275;
  const string NAME = 'CT275';

  <<__LateInit>>
  private CT275 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT275 $c): void {}

  protected static function funcReturn(mixed $c): CT275 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT275>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT275>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT275 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT275> {
    return vec[dict[],keyset[],shape('x' => 10),shape(),vec[]];
  }
}
case type CT276 = string|HH\AnyArray<arraykey, mixed>;

  
class CheckCT276<T as CT276> extends BaseCheck {
  const type T = CT276;
  const string NAME = 'CT276';

  <<__LateInit>>
  private CT276 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT276 $c): void {}

  protected static function funcReturn(mixed $c): CT276 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT276>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT276>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT276 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT276> {
    return vec['','hello world',dict[],keyset[],vec[]];
  }
}
case type CT277 = vec<mixed>|HH\AnyArray<arraykey, mixed>;

  
class CheckCT277<T as CT277> extends BaseCheck {
  const type T = CT277;
  const string NAME = 'CT277';

  <<__LateInit>>
  private CT277 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT277 $c): void {}

  protected static function funcReturn(mixed $c): CT277 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT277>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT277>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT277 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT277> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT278 = vec_or_dict<string>|HH\AnyArray<arraykey, mixed>;

  
class CheckCT278<T as CT278> extends BaseCheck {
  const type T = CT278;
  const string NAME = 'CT278';

  <<__LateInit>>
  private CT278 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT278 $c): void {}

  protected static function funcReturn(mixed $c): CT278 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT278>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT278>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT278 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT278> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT279 = void|HH\AnyArray<arraykey, mixed>;

  
class CheckCT279<T as CT279> extends BaseCheck {
  const type T = CT279;
  const string NAME = 'CT279';

  <<__LateInit>>
  private CT279 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT279 $c): void {}

  protected static function funcReturn(mixed $c): CT279 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT279>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT279>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT279 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT279> {
    return vec[dict[],keyset[],null,vec[]];
  }
}
case type CT280 = HH\EnumClass\Label<EC, float>|HH\EnumClass\Label<EC, float>;

  
class CheckCT280<T as CT280> extends BaseCheck {
  const type T = CT280;
  const string NAME = 'CT280';

  <<__LateInit>>
  private CT280 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT280 $c): void {}

  protected static function funcReturn(mixed $c): CT280 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT280>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT280>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT280 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT280> {
    return vec[#A,EC#B];
  }
}
case type CT281 = HH\FunctionRef<(function(): void)>|HH\EnumClass\Label<EC, float>;

  
class CheckCT281<T as CT281> extends BaseCheck {
  const type T = CT281;
  const string NAME = 'CT281';

  <<__LateInit>>
  private CT281 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT281 $c): void {}

  protected static function funcReturn(mixed $c): CT281 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT281>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT281>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT281 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT281> {
    return vec[#A,EC#B,my_func<>];
  }
}
case type CT282 = HH\MemberOf<EC, float>|HH\EnumClass\Label<EC, float>;

  
class CheckCT282<T as CT282> extends BaseCheck {
  const type T = CT282;
  const string NAME = 'CT282';

  <<__LateInit>>
  private CT282 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT282 $c): void {}

  protected static function funcReturn(mixed $c): CT282 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT282>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT282>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT282 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT282> {
    return vec[#A,EC#B,EC::A,EC::B];
  }
}
case type CT283 = I|HH\EnumClass\Label<EC, float>;

  
class CheckCT283<T as CT283> extends BaseCheck {
  const type T = CT283;
  const string NAME = 'CT283';

  <<__LateInit>>
  private CT283 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT283 $c): void {}

  protected static function funcReturn(mixed $c): CT283 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT283>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT283>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT283 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT283> {
    return vec[#A,EC#B,new InstanceOfI()];
  }
}
case type CT284 = KeyedContainer<arraykey, mixed>|HH\EnumClass\Label<EC, float>;

  
class CheckCT284<T as CT284> extends BaseCheck {
  const type T = CT284;
  const string NAME = 'CT284';

  <<__LateInit>>
  private CT284 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT284 $c): void {}

  protected static function funcReturn(mixed $c): CT284 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT284>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT284>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT284 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT284> {
    return vec[#A,EC#B,dict[],vec[]];
  }
}
case type CT285 = KeyedTraversable<arraykey, mixed>|HH\EnumClass\Label<EC, float>;

  
class CheckCT285<T as CT285> extends BaseCheck {
  const type T = CT285;
  const string NAME = 'CT285';

  <<__LateInit>>
  private CT285 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT285 $c): void {}

  protected static function funcReturn(mixed $c): CT285 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT285>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT285>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT285 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT285> {
    return vec[#A,EC#B,dict[],keyset[],vec[]];
  }
}
case type CT286 = MyEnum|HH\EnumClass\Label<EC, float>;

  
class CheckCT286<T as CT286> extends BaseCheck {
  const type T = CT286;
  const string NAME = 'CT286';

  <<__LateInit>>
  private CT286 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT286 $c): void {}

  protected static function funcReturn(mixed $c): CT286 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT286>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT286>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT286 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT286> {
    return vec[#A,'B',EC#B,MyEnum::A];
  }
}
case type CT287 = MyTrait|HH\EnumClass\Label<EC, float>;

  
class CheckCT287<T as CT287> extends BaseCheck {
  const type T = CT287;
  const string NAME = 'CT287';

  <<__LateInit>>
  private CT287 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT287 $c): void {}

  protected static function funcReturn(mixed $c): CT287 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT287>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT287>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT287 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT287> {
    return vec[#A,EC#B];
  }
}
case type CT288 = ReifiedClass<null>|HH\EnumClass\Label<EC, float>;

  
class CheckCT288<T as CT288> extends BaseCheck {
  const type T = CT288;
  const string NAME = 'CT288';

  <<__LateInit>>
  private CT288 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT288 $c): void {}

  protected static function funcReturn(mixed $c): CT288 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT288>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT288>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT288 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT288> {
    return vec[#A,EC#B,new ReifiedClass<null>()];
  }
}
case type CT289 = Stringish|HH\EnumClass\Label<EC, float>;

  
class CheckCT289<T as CT289> extends BaseCheck {
  const type T = CT289;
  const string NAME = 'CT289';

  <<__LateInit>>
  private CT289 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT289 $c): void {}

  protected static function funcReturn(mixed $c): CT289 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT289>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT289>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT289 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT289> {
    return vec[#A,'','hello world',EC#B,new StringishObj()];
  }
}
case type CT290 = Traversable<mixed>|HH\EnumClass\Label<EC, float>;

  
class CheckCT290<T as CT290> extends BaseCheck {
  const type T = CT290;
  const string NAME = 'CT290';

  <<__LateInit>>
  private CT290 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT290 $c): void {}

  protected static function funcReturn(mixed $c): CT290 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT290>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT290>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT290 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT290> {
    return vec[#A,EC#B,dict[],keyset[],vec[]];
  }
}
case type CT291 = XHPChild|HH\EnumClass\Label<EC, float>;

  
class CheckCT291<T as CT291> extends BaseCheck {
  const type T = CT291;
  const string NAME = 'CT291';

  <<__LateInit>>
  private CT291 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT291 $c): void {}

  protected static function funcReturn(mixed $c): CT291 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT291>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT291>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT291 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT291> {
    return vec[#A,'','hello world',0,1,<my-xhp/>,EC#B];
  }
}
case type CT292 = arraykey|HH\EnumClass\Label<EC, float>;

  
class CheckCT292<T as CT292> extends BaseCheck {
  const type T = CT292;
  const string NAME = 'CT292';

  <<__LateInit>>
  private CT292 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT292 $c): void {}

  protected static function funcReturn(mixed $c): CT292 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT292>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT292>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT292 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT292> {
    return vec[#A,'','hello world',0,1,EC#B];
  }
}
case type CT293 = bool|HH\EnumClass\Label<EC, float>;

  
class CheckCT293<T as CT293> extends BaseCheck {
  const type T = CT293;
  const string NAME = 'CT293';

  <<__LateInit>>
  private CT293 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT293 $c): void {}

  protected static function funcReturn(mixed $c): CT293 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT293>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT293>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT293 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT293> {
    return vec[#A,EC#B,false,true];
  }
}
case type CT294 = dict<arraykey, mixed>|HH\EnumClass\Label<EC, float>;

  
class CheckCT294<T as CT294> extends BaseCheck {
  const type T = CT294;
  const string NAME = 'CT294';

  <<__LateInit>>
  private CT294 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT294 $c): void {}

  protected static function funcReturn(mixed $c): CT294 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT294>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT294>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT294 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT294> {
    return vec[#A,EC#B,dict[]];
  }
}
case type CT295 = dynamic|HH\EnumClass\Label<EC, float>;

  
class CheckCT295<T as CT295> extends BaseCheck {
  const type T = CT295;
  const string NAME = 'CT295';

  <<__LateInit>>
  private CT295 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT295 $c): void {}

  protected static function funcReturn(mixed $c): CT295 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT295>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT295>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT295 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT295> {
    return vec[#A,EC#B,false,null,shape('x' => 10),shape(),true];
  }
}
case type CT296 = float|HH\EnumClass\Label<EC, float>;

  
class CheckCT296<T as CT296> extends BaseCheck {
  const type T = CT296;
  const string NAME = 'CT296';

  <<__LateInit>>
  private CT296 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT296 $c): void {}

  protected static function funcReturn(mixed $c): CT296 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT296>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT296>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT296 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT296> {
    return vec[#A,0.0,3.14,EC#B];
  }
}
case type CT297 = int|HH\EnumClass\Label<EC, float>;

  
class CheckCT297<T as CT297> extends BaseCheck {
  const type T = CT297;
  const string NAME = 'CT297';

  <<__LateInit>>
  private CT297 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT297 $c): void {}

  protected static function funcReturn(mixed $c): CT297 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT297>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT297>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT297 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT297> {
    return vec[#A,0,1,EC#B];
  }
}
case type CT298 = keyset<arraykey>|HH\EnumClass\Label<EC, float>;

  
class CheckCT298<T as CT298> extends BaseCheck {
  const type T = CT298;
  const string NAME = 'CT298';

  <<__LateInit>>
  private CT298 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT298 $c): void {}

  protected static function funcReturn(mixed $c): CT298 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT298>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT298>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT298 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT298> {
    return vec[#A,EC#B,keyset[]];
  }
}
case type CT299 = mixed|HH\EnumClass\Label<EC, float>;

  
class CheckCT299<T as CT299> extends BaseCheck {
  const type T = CT299;
  const string NAME = 'CT299';

  <<__LateInit>>
  private CT299 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT299 $c): void {}

  protected static function funcReturn(mixed $c): CT299 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT299>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT299>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT299 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT299> {
    return vec[#A,'','hello world',0,1,EC#B,false,null,true];
  }
}
case type CT300 = nonnull|HH\EnumClass\Label<EC, float>;

  
class CheckCT300<T as CT300> extends BaseCheck {
  const type T = CT300;
  const string NAME = 'CT300';

  <<__LateInit>>
  private CT300 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT300 $c): void {}

  protected static function funcReturn(mixed $c): CT300 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT300>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT300>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT300 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT300> {
    return vec[#A,'','hello world',0,1,EC#B,false,true];
  }
}
case type CT301 = noreturn|HH\EnumClass\Label<EC, float>;

  
class CheckCT301<T as CT301> extends BaseCheck {
  const type T = CT301;
  const string NAME = 'CT301';

  <<__LateInit>>
  private CT301 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT301 $c): void {}

  protected static function funcReturn(mixed $c): CT301 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT301>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT301>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT301 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT301> {
    return vec[#A,EC#B];
  }
}
case type CT302 = nothing|HH\EnumClass\Label<EC, float>;

  
class CheckCT302<T as CT302> extends BaseCheck {
  const type T = CT302;
  const string NAME = 'CT302';

  <<__LateInit>>
  private CT302 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT302 $c): void {}

  protected static function funcReturn(mixed $c): CT302 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT302>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT302>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT302 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT302> {
    return vec[#A,EC#B];
  }
}
case type CT303 = null|HH\EnumClass\Label<EC, float>;

  
class CheckCT303<T as CT303> extends BaseCheck {
  const type T = CT303;
  const string NAME = 'CT303';

  <<__LateInit>>
  private CT303 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT303 $c): void {}

  protected static function funcReturn(mixed $c): CT303 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT303>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT303>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT303 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT303> {
    return vec[#A,EC#B,null];
  }
}
case type CT304 = num|HH\EnumClass\Label<EC, float>;

  
class CheckCT304<T as CT304> extends BaseCheck {
  const type T = CT304;
  const string NAME = 'CT304';

  <<__LateInit>>
  private CT304 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT304 $c): void {}

  protected static function funcReturn(mixed $c): CT304 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT304>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT304>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT304 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT304> {
    return vec[#A,0,0.0,1,3.14,EC#B];
  }
}
case type CT305 = resource|HH\EnumClass\Label<EC, float>;

  
class CheckCT305<T as CT305> extends BaseCheck {
  const type T = CT305;
  const string NAME = 'CT305';

  <<__LateInit>>
  private CT305 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT305 $c): void {}

  protected static function funcReturn(mixed $c): CT305 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT305>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT305>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT305 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT305> {
    return vec[#A,EC#B,imagecreate(10, 10)];
  }
}
case type CT306 = shape(...)|HH\EnumClass\Label<EC, float>;

  
class CheckCT306<T as CT306> extends BaseCheck {
  const type T = CT306;
  const string NAME = 'CT306';

  <<__LateInit>>
  private CT306 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT306 $c): void {}

  protected static function funcReturn(mixed $c): CT306 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT306>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT306>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT306 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT306> {
    return vec[#A,EC#B,shape('x' => 10),shape()];
  }
}
case type CT307 = string|HH\EnumClass\Label<EC, float>;

  
class CheckCT307<T as CT307> extends BaseCheck {
  const type T = CT307;
  const string NAME = 'CT307';

  <<__LateInit>>
  private CT307 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT307 $c): void {}

  protected static function funcReturn(mixed $c): CT307 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT307>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT307>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT307 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT307> {
    return vec[#A,'','hello world',EC#B];
  }
}
case type CT308 = vec<mixed>|HH\EnumClass\Label<EC, float>;

  
class CheckCT308<T as CT308> extends BaseCheck {
  const type T = CT308;
  const string NAME = 'CT308';

  <<__LateInit>>
  private CT308 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT308 $c): void {}

  protected static function funcReturn(mixed $c): CT308 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT308>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT308>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT308 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT308> {
    return vec[#A,EC#B,vec[]];
  }
}
case type CT309 = vec_or_dict<string>|HH\EnumClass\Label<EC, float>;

  
class CheckCT309<T as CT309> extends BaseCheck {
  const type T = CT309;
  const string NAME = 'CT309';

  <<__LateInit>>
  private CT309 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT309 $c): void {}

  protected static function funcReturn(mixed $c): CT309 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT309>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT309>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT309 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT309> {
    return vec[#A,EC#B,dict[],vec[]];
  }
}
case type CT310 = void|HH\EnumClass\Label<EC, float>;

  
class CheckCT310<T as CT310> extends BaseCheck {
  const type T = CT310;
  const string NAME = 'CT310';

  <<__LateInit>>
  private CT310 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT310 $c): void {}

  protected static function funcReturn(mixed $c): CT310 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT310>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT310>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT310 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT310> {
    return vec[#A,EC#B,null];
  }
}
case type CT311 = HH\FunctionRef<(function(): void)>|HH\FunctionRef<(function(): void)>;

  
class CheckCT311<T as CT311> extends BaseCheck {
  const type T = CT311;
  const string NAME = 'CT311';

  <<__LateInit>>
  private CT311 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT311 $c): void {}

  protected static function funcReturn(mixed $c): CT311 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT311>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT311>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT311 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT311> {
    return vec[my_func<>];
  }
}
case type CT312 = HH\MemberOf<EC, float>|HH\FunctionRef<(function(): void)>;

  
class CheckCT312<T as CT312> extends BaseCheck {
  const type T = CT312;
  const string NAME = 'CT312';

  <<__LateInit>>
  private CT312 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT312 $c): void {}

  protected static function funcReturn(mixed $c): CT312 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT312>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT312>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT312 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT312> {
    return vec[EC::A,EC::B,my_func<>];
  }
}
case type CT313 = I|HH\FunctionRef<(function(): void)>;

  
class CheckCT313<T as CT313> extends BaseCheck {
  const type T = CT313;
  const string NAME = 'CT313';

  <<__LateInit>>
  private CT313 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT313 $c): void {}

  protected static function funcReturn(mixed $c): CT313 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT313>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT313>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT313 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT313> {
    return vec[my_func<>,new InstanceOfI()];
  }
}
case type CT314 = KeyedContainer<arraykey, mixed>|HH\FunctionRef<(function(): void)>;

  
class CheckCT314<T as CT314> extends BaseCheck {
  const type T = CT314;
  const string NAME = 'CT314';

  <<__LateInit>>
  private CT314 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT314 $c): void {}

  protected static function funcReturn(mixed $c): CT314 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT314>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT314>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT314 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT314> {
    return vec[dict[],my_func<>,vec[]];
  }
}
case type CT315 = KeyedTraversable<arraykey, mixed>|HH\FunctionRef<(function(): void)>;

  
class CheckCT315<T as CT315> extends BaseCheck {
  const type T = CT315;
  const string NAME = 'CT315';

  <<__LateInit>>
  private CT315 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT315 $c): void {}

  protected static function funcReturn(mixed $c): CT315 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT315>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT315>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT315 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT315> {
    return vec[dict[],keyset[],my_func<>,vec[]];
  }
}
case type CT316 = MyEnum|HH\FunctionRef<(function(): void)>;

  
class CheckCT316<T as CT316> extends BaseCheck {
  const type T = CT316;
  const string NAME = 'CT316';

  <<__LateInit>>
  private CT316 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT316 $c): void {}

  protected static function funcReturn(mixed $c): CT316 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT316>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT316>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT316 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT316> {
    return vec['B',MyEnum::A,my_func<>];
  }
}
case type CT317 = MyTrait|HH\FunctionRef<(function(): void)>;

  
class CheckCT317<T as CT317> extends BaseCheck {
  const type T = CT317;
  const string NAME = 'CT317';

  <<__LateInit>>
  private CT317 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT317 $c): void {}

  protected static function funcReturn(mixed $c): CT317 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT317>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT317>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT317 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT317> {
    return vec[my_func<>];
  }
}
case type CT318 = ReifiedClass<null>|HH\FunctionRef<(function(): void)>;

  
class CheckCT318<T as CT318> extends BaseCheck {
  const type T = CT318;
  const string NAME = 'CT318';

  <<__LateInit>>
  private CT318 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT318 $c): void {}

  protected static function funcReturn(mixed $c): CT318 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT318>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT318>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT318 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT318> {
    return vec[my_func<>,new ReifiedClass<null>()];
  }
}
case type CT319 = Stringish|HH\FunctionRef<(function(): void)>;

  
class CheckCT319<T as CT319> extends BaseCheck {
  const type T = CT319;
  const string NAME = 'CT319';

  <<__LateInit>>
  private CT319 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT319 $c): void {}

  protected static function funcReturn(mixed $c): CT319 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT319>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT319>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT319 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT319> {
    return vec['','hello world',my_func<>,new StringishObj()];
  }
}
case type CT320 = Traversable<mixed>|HH\FunctionRef<(function(): void)>;

  
class CheckCT320<T as CT320> extends BaseCheck {
  const type T = CT320;
  const string NAME = 'CT320';

  <<__LateInit>>
  private CT320 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT320 $c): void {}

  protected static function funcReturn(mixed $c): CT320 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT320>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT320>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT320 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT320> {
    return vec[dict[],keyset[],my_func<>,vec[]];
  }
}
case type CT321 = XHPChild|HH\FunctionRef<(function(): void)>;

  
class CheckCT321<T as CT321> extends BaseCheck {
  const type T = CT321;
  const string NAME = 'CT321';

  <<__LateInit>>
  private CT321 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT321 $c): void {}

  protected static function funcReturn(mixed $c): CT321 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT321>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT321>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT321 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT321> {
    return vec['','hello world',0,1,<my-xhp/>,my_func<>];
  }
}
case type CT322 = arraykey|HH\FunctionRef<(function(): void)>;

  
class CheckCT322<T as CT322> extends BaseCheck {
  const type T = CT322;
  const string NAME = 'CT322';

  <<__LateInit>>
  private CT322 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT322 $c): void {}

  protected static function funcReturn(mixed $c): CT322 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT322>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT322>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT322 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT322> {
    return vec['','hello world',0,1,my_func<>];
  }
}
case type CT323 = bool|HH\FunctionRef<(function(): void)>;

  
class CheckCT323<T as CT323> extends BaseCheck {
  const type T = CT323;
  const string NAME = 'CT323';

  <<__LateInit>>
  private CT323 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT323 $c): void {}

  protected static function funcReturn(mixed $c): CT323 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT323>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT323>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT323 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT323> {
    return vec[false,my_func<>,true];
  }
}
case type CT324 = dict<arraykey, mixed>|HH\FunctionRef<(function(): void)>;

  
class CheckCT324<T as CT324> extends BaseCheck {
  const type T = CT324;
  const string NAME = 'CT324';

  <<__LateInit>>
  private CT324 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT324 $c): void {}

  protected static function funcReturn(mixed $c): CT324 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT324>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT324>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT324 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT324> {
    return vec[dict[],my_func<>];
  }
}
case type CT325 = dynamic|HH\FunctionRef<(function(): void)>;

  
class CheckCT325<T as CT325> extends BaseCheck {
  const type T = CT325;
  const string NAME = 'CT325';

  <<__LateInit>>
  private CT325 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT325 $c): void {}

  protected static function funcReturn(mixed $c): CT325 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT325>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT325>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT325 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT325> {
    return vec[false,my_func<>,null,shape('x' => 10),shape(),true];
  }
}
case type CT326 = float|HH\FunctionRef<(function(): void)>;

  
class CheckCT326<T as CT326> extends BaseCheck {
  const type T = CT326;
  const string NAME = 'CT326';

  <<__LateInit>>
  private CT326 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT326 $c): void {}

  protected static function funcReturn(mixed $c): CT326 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT326>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT326>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT326 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT326> {
    return vec[0.0,3.14,my_func<>];
  }
}
case type CT327 = int|HH\FunctionRef<(function(): void)>;

  
class CheckCT327<T as CT327> extends BaseCheck {
  const type T = CT327;
  const string NAME = 'CT327';

  <<__LateInit>>
  private CT327 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT327 $c): void {}

  protected static function funcReturn(mixed $c): CT327 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT327>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT327>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT327 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT327> {
    return vec[0,1,my_func<>];
  }
}
case type CT328 = keyset<arraykey>|HH\FunctionRef<(function(): void)>;

  
class CheckCT328<T as CT328> extends BaseCheck {
  const type T = CT328;
  const string NAME = 'CT328';

  <<__LateInit>>
  private CT328 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT328 $c): void {}

  protected static function funcReturn(mixed $c): CT328 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT328>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT328>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT328 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT328> {
    return vec[keyset[],my_func<>];
  }
}
case type CT329 = mixed|HH\FunctionRef<(function(): void)>;

  
class CheckCT329<T as CT329> extends BaseCheck {
  const type T = CT329;
  const string NAME = 'CT329';

  <<__LateInit>>
  private CT329 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT329 $c): void {}

  protected static function funcReturn(mixed $c): CT329 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT329>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT329>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT329 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT329> {
    return vec['','hello world',0,1,false,my_func<>,null,true];
  }
}
case type CT330 = nonnull|HH\FunctionRef<(function(): void)>;

  
class CheckCT330<T as CT330> extends BaseCheck {
  const type T = CT330;
  const string NAME = 'CT330';

  <<__LateInit>>
  private CT330 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT330 $c): void {}

  protected static function funcReturn(mixed $c): CT330 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT330>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT330>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT330 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT330> {
    return vec['','hello world',0,1,false,my_func<>,true];
  }
}
case type CT331 = noreturn|HH\FunctionRef<(function(): void)>;

  
class CheckCT331<T as CT331> extends BaseCheck {
  const type T = CT331;
  const string NAME = 'CT331';

  <<__LateInit>>
  private CT331 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT331 $c): void {}

  protected static function funcReturn(mixed $c): CT331 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT331>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT331>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT331 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT331> {
    return vec[my_func<>];
  }
}
case type CT332 = nothing|HH\FunctionRef<(function(): void)>;

  
class CheckCT332<T as CT332> extends BaseCheck {
  const type T = CT332;
  const string NAME = 'CT332';

  <<__LateInit>>
  private CT332 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT332 $c): void {}

  protected static function funcReturn(mixed $c): CT332 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT332>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT332>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT332 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT332> {
    return vec[my_func<>];
  }
}
case type CT333 = null|HH\FunctionRef<(function(): void)>;

  
class CheckCT333<T as CT333> extends BaseCheck {
  const type T = CT333;
  const string NAME = 'CT333';

  <<__LateInit>>
  private CT333 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT333 $c): void {}

  protected static function funcReturn(mixed $c): CT333 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT333>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT333>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT333 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT333> {
    return vec[my_func<>,null];
  }
}
case type CT334 = num|HH\FunctionRef<(function(): void)>;

  
class CheckCT334<T as CT334> extends BaseCheck {
  const type T = CT334;
  const string NAME = 'CT334';

  <<__LateInit>>
  private CT334 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT334 $c): void {}

  protected static function funcReturn(mixed $c): CT334 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT334>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT334>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT334 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT334> {
    return vec[0,0.0,1,3.14,my_func<>];
  }
}
case type CT335 = resource|HH\FunctionRef<(function(): void)>;

  
class CheckCT335<T as CT335> extends BaseCheck {
  const type T = CT335;
  const string NAME = 'CT335';

  <<__LateInit>>
  private CT335 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT335 $c): void {}

  protected static function funcReturn(mixed $c): CT335 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT335>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT335>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT335 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT335> {
    return vec[imagecreate(10, 10),my_func<>];
  }
}
case type CT336 = shape(...)|HH\FunctionRef<(function(): void)>;

  
class CheckCT336<T as CT336> extends BaseCheck {
  const type T = CT336;
  const string NAME = 'CT336';

  <<__LateInit>>
  private CT336 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT336 $c): void {}

  protected static function funcReturn(mixed $c): CT336 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT336>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT336>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT336 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT336> {
    return vec[my_func<>,shape('x' => 10),shape()];
  }
}
case type CT337 = string|HH\FunctionRef<(function(): void)>;

  
class CheckCT337<T as CT337> extends BaseCheck {
  const type T = CT337;
  const string NAME = 'CT337';

  <<__LateInit>>
  private CT337 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT337 $c): void {}

  protected static function funcReturn(mixed $c): CT337 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT337>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT337>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT337 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT337> {
    return vec['','hello world',my_func<>];
  }
}
case type CT338 = vec<mixed>|HH\FunctionRef<(function(): void)>;

  
class CheckCT338<T as CT338> extends BaseCheck {
  const type T = CT338;
  const string NAME = 'CT338';

  <<__LateInit>>
  private CT338 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT338 $c): void {}

  protected static function funcReturn(mixed $c): CT338 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT338>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT338>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT338 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT338> {
    return vec[my_func<>,vec[]];
  }
}
case type CT339 = vec_or_dict<string>|HH\FunctionRef<(function(): void)>;

  
class CheckCT339<T as CT339> extends BaseCheck {
  const type T = CT339;
  const string NAME = 'CT339';

  <<__LateInit>>
  private CT339 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT339 $c): void {}

  protected static function funcReturn(mixed $c): CT339 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT339>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT339>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT339 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT339> {
    return vec[dict[],my_func<>,vec[]];
  }
}
case type CT340 = void|HH\FunctionRef<(function(): void)>;

  
class CheckCT340<T as CT340> extends BaseCheck {
  const type T = CT340;
  const string NAME = 'CT340';

  <<__LateInit>>
  private CT340 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT340 $c): void {}

  protected static function funcReturn(mixed $c): CT340 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT340>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT340>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT340 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT340> {
    return vec[my_func<>,null];
  }
}
case type CT341 = HH\MemberOf<EC, float>|HH\MemberOf<EC, float>;

  
class CheckCT341<T as CT341> extends BaseCheck {
  const type T = CT341;
  const string NAME = 'CT341';

  <<__LateInit>>
  private CT341 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT341 $c): void {}

  protected static function funcReturn(mixed $c): CT341 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT341>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT341>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT341 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT341> {
    return vec[EC::A,EC::B];
  }
}
case type CT342 = I|HH\MemberOf<EC, float>;

  
class CheckCT342<T as CT342> extends BaseCheck {
  const type T = CT342;
  const string NAME = 'CT342';

  <<__LateInit>>
  private CT342 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT342 $c): void {}

  protected static function funcReturn(mixed $c): CT342 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT342>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT342>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT342 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT342> {
    return vec[EC::A,EC::B,new InstanceOfI()];
  }
}
case type CT343 = KeyedContainer<arraykey, mixed>|HH\MemberOf<EC, float>;

  
class CheckCT343<T as CT343> extends BaseCheck {
  const type T = CT343;
  const string NAME = 'CT343';

  <<__LateInit>>
  private CT343 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT343 $c): void {}

  protected static function funcReturn(mixed $c): CT343 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT343>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT343>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT343 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT343> {
    return vec[EC::A,EC::B,dict[],vec[]];
  }
}
case type CT344 = KeyedTraversable<arraykey, mixed>|HH\MemberOf<EC, float>;

  
class CheckCT344<T as CT344> extends BaseCheck {
  const type T = CT344;
  const string NAME = 'CT344';

  <<__LateInit>>
  private CT344 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT344 $c): void {}

  protected static function funcReturn(mixed $c): CT344 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT344>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT344>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT344 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT344> {
    return vec[EC::A,EC::B,dict[],keyset[],vec[]];
  }
}
case type CT345 = MyEnum|HH\MemberOf<EC, float>;

  
class CheckCT345<T as CT345> extends BaseCheck {
  const type T = CT345;
  const string NAME = 'CT345';

  <<__LateInit>>
  private CT345 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT345 $c): void {}

  protected static function funcReturn(mixed $c): CT345 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT345>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT345>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT345 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT345> {
    return vec['B',EC::A,EC::B,MyEnum::A];
  }
}
case type CT346 = MyTrait|HH\MemberOf<EC, float>;

  
class CheckCT346<T as CT346> extends BaseCheck {
  const type T = CT346;
  const string NAME = 'CT346';

  <<__LateInit>>
  private CT346 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT346 $c): void {}

  protected static function funcReturn(mixed $c): CT346 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT346>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT346>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT346 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT346> {
    return vec[EC::A,EC::B];
  }
}
case type CT347 = ReifiedClass<null>|HH\MemberOf<EC, float>;

  
class CheckCT347<T as CT347> extends BaseCheck {
  const type T = CT347;
  const string NAME = 'CT347';

  <<__LateInit>>
  private CT347 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT347 $c): void {}

  protected static function funcReturn(mixed $c): CT347 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT347>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT347>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT347 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT347> {
    return vec[EC::A,EC::B,new ReifiedClass<null>()];
  }
}
case type CT348 = Stringish|HH\MemberOf<EC, float>;

  
class CheckCT348<T as CT348> extends BaseCheck {
  const type T = CT348;
  const string NAME = 'CT348';

  <<__LateInit>>
  private CT348 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT348 $c): void {}

  protected static function funcReturn(mixed $c): CT348 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT348>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT348>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT348 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT348> {
    return vec['','hello world',EC::A,EC::B,new StringishObj()];
  }
}
case type CT349 = Traversable<mixed>|HH\MemberOf<EC, float>;

  
class CheckCT349<T as CT349> extends BaseCheck {
  const type T = CT349;
  const string NAME = 'CT349';

  <<__LateInit>>
  private CT349 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT349 $c): void {}

  protected static function funcReturn(mixed $c): CT349 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT349>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT349>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT349 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT349> {
    return vec[EC::A,EC::B,dict[],keyset[],vec[]];
  }
}
case type CT350 = XHPChild|HH\MemberOf<EC, float>;

  
class CheckCT350<T as CT350> extends BaseCheck {
  const type T = CT350;
  const string NAME = 'CT350';

  <<__LateInit>>
  private CT350 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT350 $c): void {}

  protected static function funcReturn(mixed $c): CT350 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT350>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT350>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT350 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT350> {
    return vec['','hello world',0,1,<my-xhp/>,EC::A,EC::B];
  }
}
case type CT351 = arraykey|HH\MemberOf<EC, float>;

  
class CheckCT351<T as CT351> extends BaseCheck {
  const type T = CT351;
  const string NAME = 'CT351';

  <<__LateInit>>
  private CT351 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT351 $c): void {}

  protected static function funcReturn(mixed $c): CT351 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT351>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT351>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT351 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT351> {
    return vec['','hello world',0,1,EC::A,EC::B];
  }
}
case type CT352 = bool|HH\MemberOf<EC, float>;

  
class CheckCT352<T as CT352> extends BaseCheck {
  const type T = CT352;
  const string NAME = 'CT352';

  <<__LateInit>>
  private CT352 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT352 $c): void {}

  protected static function funcReturn(mixed $c): CT352 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT352>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT352>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT352 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT352> {
    return vec[EC::A,EC::B,false,true];
  }
}
case type CT353 = dict<arraykey, mixed>|HH\MemberOf<EC, float>;

  
class CheckCT353<T as CT353> extends BaseCheck {
  const type T = CT353;
  const string NAME = 'CT353';

  <<__LateInit>>
  private CT353 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT353 $c): void {}

  protected static function funcReturn(mixed $c): CT353 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT353>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT353>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT353 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT353> {
    return vec[EC::A,EC::B,dict[]];
  }
}
case type CT354 = dynamic|HH\MemberOf<EC, float>;

  
class CheckCT354<T as CT354> extends BaseCheck {
  const type T = CT354;
  const string NAME = 'CT354';

  <<__LateInit>>
  private CT354 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT354 $c): void {}

  protected static function funcReturn(mixed $c): CT354 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT354>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT354>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT354 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT354> {
    return vec[EC::A,EC::B,false,null,shape('x' => 10),shape(),true];
  }
}
case type CT355 = float|HH\MemberOf<EC, float>;

  
class CheckCT355<T as CT355> extends BaseCheck {
  const type T = CT355;
  const string NAME = 'CT355';

  <<__LateInit>>
  private CT355 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT355 $c): void {}

  protected static function funcReturn(mixed $c): CT355 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT355>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT355>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT355 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT355> {
    return vec[0.0,3.14,EC::A,EC::B];
  }
}
case type CT356 = int|HH\MemberOf<EC, float>;

  
class CheckCT356<T as CT356> extends BaseCheck {
  const type T = CT356;
  const string NAME = 'CT356';

  <<__LateInit>>
  private CT356 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT356 $c): void {}

  protected static function funcReturn(mixed $c): CT356 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT356>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT356>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT356 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT356> {
    return vec[0,1,EC::A,EC::B];
  }
}
case type CT357 = keyset<arraykey>|HH\MemberOf<EC, float>;

  
class CheckCT357<T as CT357> extends BaseCheck {
  const type T = CT357;
  const string NAME = 'CT357';

  <<__LateInit>>
  private CT357 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT357 $c): void {}

  protected static function funcReturn(mixed $c): CT357 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT357>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT357>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT357 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT357> {
    return vec[EC::A,EC::B,keyset[]];
  }
}
case type CT358 = mixed|HH\MemberOf<EC, float>;

  
class CheckCT358<T as CT358> extends BaseCheck {
  const type T = CT358;
  const string NAME = 'CT358';

  <<__LateInit>>
  private CT358 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT358 $c): void {}

  protected static function funcReturn(mixed $c): CT358 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT358>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT358>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT358 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT358> {
    return vec['','hello world',0,1,EC::A,EC::B,false,null,true];
  }
}
case type CT359 = nonnull|HH\MemberOf<EC, float>;

  
class CheckCT359<T as CT359> extends BaseCheck {
  const type T = CT359;
  const string NAME = 'CT359';

  <<__LateInit>>
  private CT359 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT359 $c): void {}

  protected static function funcReturn(mixed $c): CT359 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT359>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT359>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT359 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT359> {
    return vec['','hello world',0,1,EC::A,EC::B,false,true];
  }
}
case type CT360 = noreturn|HH\MemberOf<EC, float>;

  
class CheckCT360<T as CT360> extends BaseCheck {
  const type T = CT360;
  const string NAME = 'CT360';

  <<__LateInit>>
  private CT360 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT360 $c): void {}

  protected static function funcReturn(mixed $c): CT360 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT360>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT360>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT360 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT360> {
    return vec[EC::A,EC::B];
  }
}
case type CT361 = nothing|HH\MemberOf<EC, float>;

  
class CheckCT361<T as CT361> extends BaseCheck {
  const type T = CT361;
  const string NAME = 'CT361';

  <<__LateInit>>
  private CT361 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT361 $c): void {}

  protected static function funcReturn(mixed $c): CT361 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT361>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT361>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT361 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT361> {
    return vec[EC::A,EC::B];
  }
}
case type CT362 = null|HH\MemberOf<EC, float>;

  
class CheckCT362<T as CT362> extends BaseCheck {
  const type T = CT362;
  const string NAME = 'CT362';

  <<__LateInit>>
  private CT362 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT362 $c): void {}

  protected static function funcReturn(mixed $c): CT362 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT362>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT362>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT362 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT362> {
    return vec[EC::A,EC::B,null];
  }
}
case type CT363 = num|HH\MemberOf<EC, float>;

  
class CheckCT363<T as CT363> extends BaseCheck {
  const type T = CT363;
  const string NAME = 'CT363';

  <<__LateInit>>
  private CT363 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT363 $c): void {}

  protected static function funcReturn(mixed $c): CT363 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT363>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT363>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT363 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT363> {
    return vec[0,0.0,1,3.14,EC::A,EC::B];
  }
}
case type CT364 = resource|HH\MemberOf<EC, float>;

  
class CheckCT364<T as CT364> extends BaseCheck {
  const type T = CT364;
  const string NAME = 'CT364';

  <<__LateInit>>
  private CT364 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT364 $c): void {}

  protected static function funcReturn(mixed $c): CT364 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT364>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT364>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT364 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT364> {
    return vec[EC::A,EC::B,imagecreate(10, 10)];
  }
}
case type CT365 = shape(...)|HH\MemberOf<EC, float>;

  
class CheckCT365<T as CT365> extends BaseCheck {
  const type T = CT365;
  const string NAME = 'CT365';

  <<__LateInit>>
  private CT365 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT365 $c): void {}

  protected static function funcReturn(mixed $c): CT365 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT365>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT365>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT365 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT365> {
    return vec[EC::A,EC::B,shape('x' => 10),shape()];
  }
}
case type CT366 = string|HH\MemberOf<EC, float>;

  
class CheckCT366<T as CT366> extends BaseCheck {
  const type T = CT366;
  const string NAME = 'CT366';

  <<__LateInit>>
  private CT366 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT366 $c): void {}

  protected static function funcReturn(mixed $c): CT366 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT366>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT366>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT366 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT366> {
    return vec['','hello world',EC::A,EC::B];
  }
}
case type CT367 = vec<mixed>|HH\MemberOf<EC, float>;

  
class CheckCT367<T as CT367> extends BaseCheck {
  const type T = CT367;
  const string NAME = 'CT367';

  <<__LateInit>>
  private CT367 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT367 $c): void {}

  protected static function funcReturn(mixed $c): CT367 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT367>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT367>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT367 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT367> {
    return vec[EC::A,EC::B,vec[]];
  }
}
case type CT368 = vec_or_dict<string>|HH\MemberOf<EC, float>;

  
class CheckCT368<T as CT368> extends BaseCheck {
  const type T = CT368;
  const string NAME = 'CT368';

  <<__LateInit>>
  private CT368 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT368 $c): void {}

  protected static function funcReturn(mixed $c): CT368 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT368>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT368>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT368 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT368> {
    return vec[EC::A,EC::B,dict[],vec[]];
  }
}
case type CT369 = void|HH\MemberOf<EC, float>;

  
class CheckCT369<T as CT369> extends BaseCheck {
  const type T = CT369;
  const string NAME = 'CT369';

  <<__LateInit>>
  private CT369 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT369 $c): void {}

  protected static function funcReturn(mixed $c): CT369 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT369>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT369>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT369 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT369> {
    return vec[EC::A,EC::B,null];
  }
}
case type CT370 = I|I;

  
class CheckCT370<T as CT370> extends BaseCheck {
  const type T = CT370;
  const string NAME = 'CT370';

  <<__LateInit>>
  private CT370 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT370 $c): void {}

  protected static function funcReturn(mixed $c): CT370 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT370>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT370>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT370 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT370> {
    return vec[new InstanceOfI()];
  }
}
case type CT371 = KeyedContainer<arraykey, mixed>|I;

  
class CheckCT371<T as CT371> extends BaseCheck {
  const type T = CT371;
  const string NAME = 'CT371';

  <<__LateInit>>
  private CT371 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT371 $c): void {}

  protected static function funcReturn(mixed $c): CT371 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT371>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT371>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT371 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT371> {
    return vec[dict[],new InstanceOfI(),vec[]];
  }
}
case type CT372 = KeyedTraversable<arraykey, mixed>|I;

  
class CheckCT372<T as CT372> extends BaseCheck {
  const type T = CT372;
  const string NAME = 'CT372';

  <<__LateInit>>
  private CT372 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT372 $c): void {}

  protected static function funcReturn(mixed $c): CT372 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT372>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT372>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT372 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT372> {
    return vec[dict[],keyset[],new InstanceOfI(),vec[]];
  }
}
case type CT373 = MyEnum|I;

  
class CheckCT373<T as CT373> extends BaseCheck {
  const type T = CT373;
  const string NAME = 'CT373';

  <<__LateInit>>
  private CT373 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT373 $c): void {}

  protected static function funcReturn(mixed $c): CT373 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT373>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT373>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT373 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT373> {
    return vec['B',MyEnum::A,new InstanceOfI()];
  }
}
case type CT374 = MyTrait|I;

  
class CheckCT374<T as CT374> extends BaseCheck {
  const type T = CT374;
  const string NAME = 'CT374';

  <<__LateInit>>
  private CT374 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT374 $c): void {}

  protected static function funcReturn(mixed $c): CT374 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT374>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT374>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT374 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT374> {
    return vec[new InstanceOfI()];
  }
}
case type CT375 = ReifiedClass<null>|I;

  
class CheckCT375<T as CT375> extends BaseCheck {
  const type T = CT375;
  const string NAME = 'CT375';

  <<__LateInit>>
  private CT375 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT375 $c): void {}

  protected static function funcReturn(mixed $c): CT375 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT375>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT375>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT375 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT375> {
    return vec[new InstanceOfI(),new ReifiedClass<null>()];
  }
}
case type CT376 = Stringish|I;

  
class CheckCT376<T as CT376> extends BaseCheck {
  const type T = CT376;
  const string NAME = 'CT376';

  <<__LateInit>>
  private CT376 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT376 $c): void {}

  protected static function funcReturn(mixed $c): CT376 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT376>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT376>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT376 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT376> {
    return vec['','hello world',new InstanceOfI(),new StringishObj()];
  }
}
case type CT377 = Traversable<mixed>|I;

  
class CheckCT377<T as CT377> extends BaseCheck {
  const type T = CT377;
  const string NAME = 'CT377';

  <<__LateInit>>
  private CT377 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT377 $c): void {}

  protected static function funcReturn(mixed $c): CT377 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT377>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT377>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT377 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT377> {
    return vec[dict[],keyset[],new InstanceOfI(),vec[]];
  }
}
case type CT378 = XHPChild|I;

  
class CheckCT378<T as CT378> extends BaseCheck {
  const type T = CT378;
  const string NAME = 'CT378';

  <<__LateInit>>
  private CT378 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT378 $c): void {}

  protected static function funcReturn(mixed $c): CT378 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT378>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT378>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT378 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT378> {
    return vec['','hello world',0,1,<my-xhp/>,new InstanceOfI()];
  }
}
case type CT379 = arraykey|I;

  
class CheckCT379<T as CT379> extends BaseCheck {
  const type T = CT379;
  const string NAME = 'CT379';

  <<__LateInit>>
  private CT379 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT379 $c): void {}

  protected static function funcReturn(mixed $c): CT379 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT379>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT379>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT379 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT379> {
    return vec['','hello world',0,1,new InstanceOfI()];
  }
}
case type CT380 = bool|I;

  
class CheckCT380<T as CT380> extends BaseCheck {
  const type T = CT380;
  const string NAME = 'CT380';

  <<__LateInit>>
  private CT380 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT380 $c): void {}

  protected static function funcReturn(mixed $c): CT380 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT380>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT380>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT380 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT380> {
    return vec[false,new InstanceOfI(),true];
  }
}
case type CT381 = dict<arraykey, mixed>|I;

  
class CheckCT381<T as CT381> extends BaseCheck {
  const type T = CT381;
  const string NAME = 'CT381';

  <<__LateInit>>
  private CT381 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT381 $c): void {}

  protected static function funcReturn(mixed $c): CT381 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT381>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT381>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT381 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT381> {
    return vec[dict[],new InstanceOfI()];
  }
}
case type CT382 = dynamic|I;

  
class CheckCT382<T as CT382> extends BaseCheck {
  const type T = CT382;
  const string NAME = 'CT382';

  <<__LateInit>>
  private CT382 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT382 $c): void {}

  protected static function funcReturn(mixed $c): CT382 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT382>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT382>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT382 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT382> {
    return vec[false,new InstanceOfI(),null,shape('x' => 10),shape(),true];
  }
}
case type CT383 = float|I;

  
class CheckCT383<T as CT383> extends BaseCheck {
  const type T = CT383;
  const string NAME = 'CT383';

  <<__LateInit>>
  private CT383 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT383 $c): void {}

  protected static function funcReturn(mixed $c): CT383 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT383>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT383>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT383 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT383> {
    return vec[0.0,3.14,new InstanceOfI()];
  }
}
case type CT384 = int|I;

  
class CheckCT384<T as CT384> extends BaseCheck {
  const type T = CT384;
  const string NAME = 'CT384';

  <<__LateInit>>
  private CT384 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT384 $c): void {}

  protected static function funcReturn(mixed $c): CT384 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT384>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT384>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT384 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT384> {
    return vec[0,1,new InstanceOfI()];
  }
}
case type CT385 = keyset<arraykey>|I;

  
class CheckCT385<T as CT385> extends BaseCheck {
  const type T = CT385;
  const string NAME = 'CT385';

  <<__LateInit>>
  private CT385 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT385 $c): void {}

  protected static function funcReturn(mixed $c): CT385 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT385>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT385>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT385 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT385> {
    return vec[keyset[],new InstanceOfI()];
  }
}
case type CT386 = mixed|I;

  
class CheckCT386<T as CT386> extends BaseCheck {
  const type T = CT386;
  const string NAME = 'CT386';

  <<__LateInit>>
  private CT386 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT386 $c): void {}

  protected static function funcReturn(mixed $c): CT386 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT386>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT386>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT386 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT386> {
    return vec['','hello world',0,1,false,new InstanceOfI(),null,true];
  }
}
case type CT387 = nonnull|I;

  
class CheckCT387<T as CT387> extends BaseCheck {
  const type T = CT387;
  const string NAME = 'CT387';

  <<__LateInit>>
  private CT387 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT387 $c): void {}

  protected static function funcReturn(mixed $c): CT387 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT387>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT387>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT387 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT387> {
    return vec['','hello world',0,1,false,new InstanceOfI(),true];
  }
}
case type CT388 = noreturn|I;

  
class CheckCT388<T as CT388> extends BaseCheck {
  const type T = CT388;
  const string NAME = 'CT388';

  <<__LateInit>>
  private CT388 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT388 $c): void {}

  protected static function funcReturn(mixed $c): CT388 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT388>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT388>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT388 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT388> {
    return vec[new InstanceOfI()];
  }
}
case type CT389 = nothing|I;

  
class CheckCT389<T as CT389> extends BaseCheck {
  const type T = CT389;
  const string NAME = 'CT389';

  <<__LateInit>>
  private CT389 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT389 $c): void {}

  protected static function funcReturn(mixed $c): CT389 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT389>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT389>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT389 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT389> {
    return vec[new InstanceOfI()];
  }
}
case type CT390 = null|I;

  
class CheckCT390<T as CT390> extends BaseCheck {
  const type T = CT390;
  const string NAME = 'CT390';

  <<__LateInit>>
  private CT390 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT390 $c): void {}

  protected static function funcReturn(mixed $c): CT390 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT390>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT390>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT390 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT390> {
    return vec[new InstanceOfI(),null];
  }
}
case type CT391 = num|I;

  
class CheckCT391<T as CT391> extends BaseCheck {
  const type T = CT391;
  const string NAME = 'CT391';

  <<__LateInit>>
  private CT391 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT391 $c): void {}

  protected static function funcReturn(mixed $c): CT391 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT391>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT391>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT391 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT391> {
    return vec[0,0.0,1,3.14,new InstanceOfI()];
  }
}
case type CT392 = resource|I;

  
class CheckCT392<T as CT392> extends BaseCheck {
  const type T = CT392;
  const string NAME = 'CT392';

  <<__LateInit>>
  private CT392 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT392 $c): void {}

  protected static function funcReturn(mixed $c): CT392 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT392>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT392>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT392 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT392> {
    return vec[imagecreate(10, 10),new InstanceOfI()];
  }
}
case type CT393 = shape(...)|I;

  
class CheckCT393<T as CT393> extends BaseCheck {
  const type T = CT393;
  const string NAME = 'CT393';

  <<__LateInit>>
  private CT393 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT393 $c): void {}

  protected static function funcReturn(mixed $c): CT393 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT393>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT393>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT393 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT393> {
    return vec[new InstanceOfI(),shape('x' => 10),shape()];
  }
}
case type CT394 = string|I;

  
class CheckCT394<T as CT394> extends BaseCheck {
  const type T = CT394;
  const string NAME = 'CT394';

  <<__LateInit>>
  private CT394 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT394 $c): void {}

  protected static function funcReturn(mixed $c): CT394 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT394>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT394>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT394 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT394> {
    return vec['','hello world',new InstanceOfI()];
  }
}
case type CT395 = vec<mixed>|I;

  
class CheckCT395<T as CT395> extends BaseCheck {
  const type T = CT395;
  const string NAME = 'CT395';

  <<__LateInit>>
  private CT395 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT395 $c): void {}

  protected static function funcReturn(mixed $c): CT395 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT395>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT395>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT395 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT395> {
    return vec[new InstanceOfI(),vec[]];
  }
}
case type CT396 = vec_or_dict<string>|I;

  
class CheckCT396<T as CT396> extends BaseCheck {
  const type T = CT396;
  const string NAME = 'CT396';

  <<__LateInit>>
  private CT396 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT396 $c): void {}

  protected static function funcReturn(mixed $c): CT396 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT396>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT396>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT396 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT396> {
    return vec[dict[],new InstanceOfI(),vec[]];
  }
}
case type CT397 = void|I;

  
class CheckCT397<T as CT397> extends BaseCheck {
  const type T = CT397;
  const string NAME = 'CT397';

  <<__LateInit>>
  private CT397 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT397 $c): void {}

  protected static function funcReturn(mixed $c): CT397 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT397>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT397>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT397 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT397> {
    return vec[new InstanceOfI(),null];
  }
}
case type CT398 = KeyedContainer<arraykey, mixed>|KeyedContainer<arraykey, mixed>;

  
class CheckCT398<T as CT398> extends BaseCheck {
  const type T = CT398;
  const string NAME = 'CT398';

  <<__LateInit>>
  private CT398 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT398 $c): void {}

  protected static function funcReturn(mixed $c): CT398 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT398>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT398>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT398 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT398> {
    return vec[dict[],vec[]];
  }
}
case type CT399 = KeyedTraversable<arraykey, mixed>|KeyedContainer<arraykey, mixed>;

  
class CheckCT399<T as CT399> extends BaseCheck {
  const type T = CT399;
  const string NAME = 'CT399';

  <<__LateInit>>
  private CT399 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT399 $c): void {}

  protected static function funcReturn(mixed $c): CT399 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT399>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT399>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT399 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT399> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT400 = MyEnum|KeyedContainer<arraykey, mixed>;

  
class CheckCT400<T as CT400> extends BaseCheck {
  const type T = CT400;
  const string NAME = 'CT400';

  <<__LateInit>>
  private CT400 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT400 $c): void {}

  protected static function funcReturn(mixed $c): CT400 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT400>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT400>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT400 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT400> {
    return vec['B',MyEnum::A,dict[],vec[]];
  }
}
case type CT401 = MyTrait|KeyedContainer<arraykey, mixed>;

  
class CheckCT401<T as CT401> extends BaseCheck {
  const type T = CT401;
  const string NAME = 'CT401';

  <<__LateInit>>
  private CT401 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT401 $c): void {}

  protected static function funcReturn(mixed $c): CT401 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT401>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT401>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT401 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT401> {
    return vec[dict[],vec[]];
  }
}
case type CT402 = ReifiedClass<null>|KeyedContainer<arraykey, mixed>;

  
class CheckCT402<T as CT402> extends BaseCheck {
  const type T = CT402;
  const string NAME = 'CT402';

  <<__LateInit>>
  private CT402 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT402 $c): void {}

  protected static function funcReturn(mixed $c): CT402 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT402>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT402>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT402 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT402> {
    return vec[dict[],new ReifiedClass<null>(),vec[]];
  }
}
case type CT403 = Stringish|KeyedContainer<arraykey, mixed>;

  
class CheckCT403<T as CT403> extends BaseCheck {
  const type T = CT403;
  const string NAME = 'CT403';

  <<__LateInit>>
  private CT403 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT403 $c): void {}

  protected static function funcReturn(mixed $c): CT403 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT403>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT403>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT403 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT403> {
    return vec['','hello world',dict[],new StringishObj(),vec[]];
  }
}
case type CT404 = Traversable<mixed>|KeyedContainer<arraykey, mixed>;

  
class CheckCT404<T as CT404> extends BaseCheck {
  const type T = CT404;
  const string NAME = 'CT404';

  <<__LateInit>>
  private CT404 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT404 $c): void {}

  protected static function funcReturn(mixed $c): CT404 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT404>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT404>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT404 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT404> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT405 = XHPChild|KeyedContainer<arraykey, mixed>;

  
class CheckCT405<T as CT405> extends BaseCheck {
  const type T = CT405;
  const string NAME = 'CT405';

  <<__LateInit>>
  private CT405 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT405 $c): void {}

  protected static function funcReturn(mixed $c): CT405 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT405>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT405>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT405 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT405> {
    return vec['','hello world',0,1,<my-xhp/>,dict[],vec[]];
  }
}
case type CT406 = arraykey|KeyedContainer<arraykey, mixed>;

  
class CheckCT406<T as CT406> extends BaseCheck {
  const type T = CT406;
  const string NAME = 'CT406';

  <<__LateInit>>
  private CT406 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT406 $c): void {}

  protected static function funcReturn(mixed $c): CT406 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT406>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT406>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT406 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT406> {
    return vec['','hello world',0,1,dict[],vec[]];
  }
}
case type CT407 = bool|KeyedContainer<arraykey, mixed>;

  
class CheckCT407<T as CT407> extends BaseCheck {
  const type T = CT407;
  const string NAME = 'CT407';

  <<__LateInit>>
  private CT407 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT407 $c): void {}

  protected static function funcReturn(mixed $c): CT407 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT407>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT407>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT407 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT407> {
    return vec[dict[],false,true,vec[]];
  }
}
case type CT408 = dict<arraykey, mixed>|KeyedContainer<arraykey, mixed>;

  
class CheckCT408<T as CT408> extends BaseCheck {
  const type T = CT408;
  const string NAME = 'CT408';

  <<__LateInit>>
  private CT408 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT408 $c): void {}

  protected static function funcReturn(mixed $c): CT408 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT408>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT408>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT408 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT408> {
    return vec[dict[],vec[]];
  }
}
case type CT409 = dynamic|KeyedContainer<arraykey, mixed>;

  
class CheckCT409<T as CT409> extends BaseCheck {
  const type T = CT409;
  const string NAME = 'CT409';

  <<__LateInit>>
  private CT409 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT409 $c): void {}

  protected static function funcReturn(mixed $c): CT409 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT409>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT409>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT409 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT409> {
    return vec[dict[],false,null,shape('x' => 10),shape(),true,vec[]];
  }
}
case type CT410 = float|KeyedContainer<arraykey, mixed>;

  
class CheckCT410<T as CT410> extends BaseCheck {
  const type T = CT410;
  const string NAME = 'CT410';

  <<__LateInit>>
  private CT410 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT410 $c): void {}

  protected static function funcReturn(mixed $c): CT410 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT410>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT410>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT410 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT410> {
    return vec[0.0,3.14,dict[],vec[]];
  }
}
case type CT411 = int|KeyedContainer<arraykey, mixed>;

  
class CheckCT411<T as CT411> extends BaseCheck {
  const type T = CT411;
  const string NAME = 'CT411';

  <<__LateInit>>
  private CT411 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT411 $c): void {}

  protected static function funcReturn(mixed $c): CT411 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT411>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT411>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT411 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT411> {
    return vec[0,1,dict[],vec[]];
  }
}
case type CT412 = keyset<arraykey>|KeyedContainer<arraykey, mixed>;

  
class CheckCT412<T as CT412> extends BaseCheck {
  const type T = CT412;
  const string NAME = 'CT412';

  <<__LateInit>>
  private CT412 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT412 $c): void {}

  protected static function funcReturn(mixed $c): CT412 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT412>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT412>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT412 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT412> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT413 = mixed|KeyedContainer<arraykey, mixed>;

  
class CheckCT413<T as CT413> extends BaseCheck {
  const type T = CT413;
  const string NAME = 'CT413';

  <<__LateInit>>
  private CT413 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT413 $c): void {}

  protected static function funcReturn(mixed $c): CT413 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT413>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT413>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT413 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT413> {
    return vec['','hello world',0,1,dict[],false,null,true,vec[]];
  }
}
case type CT414 = nonnull|KeyedContainer<arraykey, mixed>;

  
class CheckCT414<T as CT414> extends BaseCheck {
  const type T = CT414;
  const string NAME = 'CT414';

  <<__LateInit>>
  private CT414 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT414 $c): void {}

  protected static function funcReturn(mixed $c): CT414 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT414>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT414>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT414 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT414> {
    return vec['','hello world',0,1,dict[],false,true,vec[]];
  }
}
case type CT415 = noreturn|KeyedContainer<arraykey, mixed>;

  
class CheckCT415<T as CT415> extends BaseCheck {
  const type T = CT415;
  const string NAME = 'CT415';

  <<__LateInit>>
  private CT415 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT415 $c): void {}

  protected static function funcReturn(mixed $c): CT415 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT415>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT415>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT415 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT415> {
    return vec[dict[],vec[]];
  }
}
case type CT416 = nothing|KeyedContainer<arraykey, mixed>;

  
class CheckCT416<T as CT416> extends BaseCheck {
  const type T = CT416;
  const string NAME = 'CT416';

  <<__LateInit>>
  private CT416 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT416 $c): void {}

  protected static function funcReturn(mixed $c): CT416 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT416>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT416>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT416 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT416> {
    return vec[dict[],vec[]];
  }
}
case type CT417 = null|KeyedContainer<arraykey, mixed>;

  
class CheckCT417<T as CT417> extends BaseCheck {
  const type T = CT417;
  const string NAME = 'CT417';

  <<__LateInit>>
  private CT417 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT417 $c): void {}

  protected static function funcReturn(mixed $c): CT417 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT417>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT417>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT417 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT417> {
    return vec[dict[],null,vec[]];
  }
}
case type CT418 = num|KeyedContainer<arraykey, mixed>;

  
class CheckCT418<T as CT418> extends BaseCheck {
  const type T = CT418;
  const string NAME = 'CT418';

  <<__LateInit>>
  private CT418 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT418 $c): void {}

  protected static function funcReturn(mixed $c): CT418 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT418>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT418>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT418 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT418> {
    return vec[0,0.0,1,3.14,dict[],vec[]];
  }
}
case type CT419 = resource|KeyedContainer<arraykey, mixed>;

  
class CheckCT419<T as CT419> extends BaseCheck {
  const type T = CT419;
  const string NAME = 'CT419';

  <<__LateInit>>
  private CT419 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT419 $c): void {}

  protected static function funcReturn(mixed $c): CT419 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT419>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT419>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT419 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT419> {
    return vec[dict[],imagecreate(10, 10),vec[]];
  }
}
case type CT420 = shape(...)|KeyedContainer<arraykey, mixed>;

  
class CheckCT420<T as CT420> extends BaseCheck {
  const type T = CT420;
  const string NAME = 'CT420';

  <<__LateInit>>
  private CT420 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT420 $c): void {}

  protected static function funcReturn(mixed $c): CT420 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT420>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT420>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT420 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT420> {
    return vec[dict[],shape('x' => 10),shape(),vec[]];
  }
}
case type CT421 = string|KeyedContainer<arraykey, mixed>;

  
class CheckCT421<T as CT421> extends BaseCheck {
  const type T = CT421;
  const string NAME = 'CT421';

  <<__LateInit>>
  private CT421 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT421 $c): void {}

  protected static function funcReturn(mixed $c): CT421 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT421>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT421>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT421 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT421> {
    return vec['','hello world',dict[],vec[]];
  }
}
case type CT422 = vec<mixed>|KeyedContainer<arraykey, mixed>;

  
class CheckCT422<T as CT422> extends BaseCheck {
  const type T = CT422;
  const string NAME = 'CT422';

  <<__LateInit>>
  private CT422 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT422 $c): void {}

  protected static function funcReturn(mixed $c): CT422 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT422>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT422>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT422 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT422> {
    return vec[dict[],vec[]];
  }
}
case type CT423 = vec_or_dict<string>|KeyedContainer<arraykey, mixed>;

  
class CheckCT423<T as CT423> extends BaseCheck {
  const type T = CT423;
  const string NAME = 'CT423';

  <<__LateInit>>
  private CT423 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT423 $c): void {}

  protected static function funcReturn(mixed $c): CT423 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT423>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT423>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT423 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT423> {
    return vec[dict[],vec[]];
  }
}
case type CT424 = void|KeyedContainer<arraykey, mixed>;

  
class CheckCT424<T as CT424> extends BaseCheck {
  const type T = CT424;
  const string NAME = 'CT424';

  <<__LateInit>>
  private CT424 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT424 $c): void {}

  protected static function funcReturn(mixed $c): CT424 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT424>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT424>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT424 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT424> {
    return vec[dict[],null,vec[]];
  }
}
case type CT425 = KeyedTraversable<arraykey, mixed>|KeyedTraversable<arraykey, mixed>;

  
class CheckCT425<T as CT425> extends BaseCheck {
  const type T = CT425;
  const string NAME = 'CT425';

  <<__LateInit>>
  private CT425 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT425 $c): void {}

  protected static function funcReturn(mixed $c): CT425 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT425>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT425>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT425 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT425> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT426 = MyEnum|KeyedTraversable<arraykey, mixed>;

  
class CheckCT426<T as CT426> extends BaseCheck {
  const type T = CT426;
  const string NAME = 'CT426';

  <<__LateInit>>
  private CT426 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT426 $c): void {}

  protected static function funcReturn(mixed $c): CT426 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT426>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT426>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT426 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT426> {
    return vec['B',MyEnum::A,dict[],keyset[],vec[]];
  }
}
case type CT427 = MyTrait|KeyedTraversable<arraykey, mixed>;

  
class CheckCT427<T as CT427> extends BaseCheck {
  const type T = CT427;
  const string NAME = 'CT427';

  <<__LateInit>>
  private CT427 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT427 $c): void {}

  protected static function funcReturn(mixed $c): CT427 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT427>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT427>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT427 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT427> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT428 = ReifiedClass<null>|KeyedTraversable<arraykey, mixed>;

  
class CheckCT428<T as CT428> extends BaseCheck {
  const type T = CT428;
  const string NAME = 'CT428';

  <<__LateInit>>
  private CT428 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT428 $c): void {}

  protected static function funcReturn(mixed $c): CT428 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT428>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT428>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT428 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT428> {
    return vec[dict[],keyset[],new ReifiedClass<null>(),vec[]];
  }
}
case type CT429 = Stringish|KeyedTraversable<arraykey, mixed>;

  
class CheckCT429<T as CT429> extends BaseCheck {
  const type T = CT429;
  const string NAME = 'CT429';

  <<__LateInit>>
  private CT429 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT429 $c): void {}

  protected static function funcReturn(mixed $c): CT429 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT429>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT429>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT429 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT429> {
    return vec['','hello world',dict[],keyset[],new StringishObj(),vec[]];
  }
}
case type CT430 = Traversable<mixed>|KeyedTraversable<arraykey, mixed>;

  
class CheckCT430<T as CT430> extends BaseCheck {
  const type T = CT430;
  const string NAME = 'CT430';

  <<__LateInit>>
  private CT430 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT430 $c): void {}

  protected static function funcReturn(mixed $c): CT430 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT430>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT430>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT430 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT430> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT431 = XHPChild|KeyedTraversable<arraykey, mixed>;

  
class CheckCT431<T as CT431> extends BaseCheck {
  const type T = CT431;
  const string NAME = 'CT431';

  <<__LateInit>>
  private CT431 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT431 $c): void {}

  protected static function funcReturn(mixed $c): CT431 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT431>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT431>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT431 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT431> {
    return vec['','hello world',0,1,<my-xhp/>,dict[],keyset[],vec[]];
  }
}
case type CT432 = arraykey|KeyedTraversable<arraykey, mixed>;

  
class CheckCT432<T as CT432> extends BaseCheck {
  const type T = CT432;
  const string NAME = 'CT432';

  <<__LateInit>>
  private CT432 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT432 $c): void {}

  protected static function funcReturn(mixed $c): CT432 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT432>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT432>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT432 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT432> {
    return vec['','hello world',0,1,dict[],keyset[],vec[]];
  }
}
case type CT433 = bool|KeyedTraversable<arraykey, mixed>;

  
class CheckCT433<T as CT433> extends BaseCheck {
  const type T = CT433;
  const string NAME = 'CT433';

  <<__LateInit>>
  private CT433 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT433 $c): void {}

  protected static function funcReturn(mixed $c): CT433 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT433>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT433>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT433 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT433> {
    return vec[dict[],false,keyset[],true,vec[]];
  }
}
case type CT434 = dict<arraykey, mixed>|KeyedTraversable<arraykey, mixed>;

  
class CheckCT434<T as CT434> extends BaseCheck {
  const type T = CT434;
  const string NAME = 'CT434';

  <<__LateInit>>
  private CT434 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT434 $c): void {}

  protected static function funcReturn(mixed $c): CT434 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT434>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT434>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT434 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT434> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT435 = dynamic|KeyedTraversable<arraykey, mixed>;

  
class CheckCT435<T as CT435> extends BaseCheck {
  const type T = CT435;
  const string NAME = 'CT435';

  <<__LateInit>>
  private CT435 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT435 $c): void {}

  protected static function funcReturn(mixed $c): CT435 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT435>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT435>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT435 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT435> {
    return vec[dict[],false,keyset[],null,shape('x' => 10),shape(),true,vec[]];
  }
}
case type CT436 = float|KeyedTraversable<arraykey, mixed>;

  
class CheckCT436<T as CT436> extends BaseCheck {
  const type T = CT436;
  const string NAME = 'CT436';

  <<__LateInit>>
  private CT436 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT436 $c): void {}

  protected static function funcReturn(mixed $c): CT436 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT436>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT436>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT436 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT436> {
    return vec[0.0,3.14,dict[],keyset[],vec[]];
  }
}
case type CT437 = int|KeyedTraversable<arraykey, mixed>;

  
class CheckCT437<T as CT437> extends BaseCheck {
  const type T = CT437;
  const string NAME = 'CT437';

  <<__LateInit>>
  private CT437 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT437 $c): void {}

  protected static function funcReturn(mixed $c): CT437 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT437>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT437>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT437 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT437> {
    return vec[0,1,dict[],keyset[],vec[]];
  }
}
case type CT438 = keyset<arraykey>|KeyedTraversable<arraykey, mixed>;

  
class CheckCT438<T as CT438> extends BaseCheck {
  const type T = CT438;
  const string NAME = 'CT438';

  <<__LateInit>>
  private CT438 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT438 $c): void {}

  protected static function funcReturn(mixed $c): CT438 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT438>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT438>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT438 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT438> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT439 = mixed|KeyedTraversable<arraykey, mixed>;

  
class CheckCT439<T as CT439> extends BaseCheck {
  const type T = CT439;
  const string NAME = 'CT439';

  <<__LateInit>>
  private CT439 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT439 $c): void {}

  protected static function funcReturn(mixed $c): CT439 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT439>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT439>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT439 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT439> {
    return vec['','hello world',0,1,dict[],false,keyset[],null,true,vec[]];
  }
}
case type CT440 = nonnull|KeyedTraversable<arraykey, mixed>;

  
class CheckCT440<T as CT440> extends BaseCheck {
  const type T = CT440;
  const string NAME = 'CT440';

  <<__LateInit>>
  private CT440 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT440 $c): void {}

  protected static function funcReturn(mixed $c): CT440 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT440>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT440>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT440 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT440> {
    return vec['','hello world',0,1,dict[],false,keyset[],true,vec[]];
  }
}
case type CT441 = noreturn|KeyedTraversable<arraykey, mixed>;

  
class CheckCT441<T as CT441> extends BaseCheck {
  const type T = CT441;
  const string NAME = 'CT441';

  <<__LateInit>>
  private CT441 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT441 $c): void {}

  protected static function funcReturn(mixed $c): CT441 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT441>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT441>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT441 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT441> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT442 = nothing|KeyedTraversable<arraykey, mixed>;

  
class CheckCT442<T as CT442> extends BaseCheck {
  const type T = CT442;
  const string NAME = 'CT442';

  <<__LateInit>>
  private CT442 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT442 $c): void {}

  protected static function funcReturn(mixed $c): CT442 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT442>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT442>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT442 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT442> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT443 = null|KeyedTraversable<arraykey, mixed>;

  
class CheckCT443<T as CT443> extends BaseCheck {
  const type T = CT443;
  const string NAME = 'CT443';

  <<__LateInit>>
  private CT443 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT443 $c): void {}

  protected static function funcReturn(mixed $c): CT443 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT443>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT443>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT443 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT443> {
    return vec[dict[],keyset[],null,vec[]];
  }
}
case type CT444 = num|KeyedTraversable<arraykey, mixed>;

  
class CheckCT444<T as CT444> extends BaseCheck {
  const type T = CT444;
  const string NAME = 'CT444';

  <<__LateInit>>
  private CT444 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT444 $c): void {}

  protected static function funcReturn(mixed $c): CT444 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT444>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT444>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT444 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT444> {
    return vec[0,0.0,1,3.14,dict[],keyset[],vec[]];
  }
}
case type CT445 = resource|KeyedTraversable<arraykey, mixed>;

  
class CheckCT445<T as CT445> extends BaseCheck {
  const type T = CT445;
  const string NAME = 'CT445';

  <<__LateInit>>
  private CT445 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT445 $c): void {}

  protected static function funcReturn(mixed $c): CT445 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT445>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT445>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT445 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT445> {
    return vec[dict[],imagecreate(10, 10),keyset[],vec[]];
  }
}
case type CT446 = shape(...)|KeyedTraversable<arraykey, mixed>;

  
class CheckCT446<T as CT446> extends BaseCheck {
  const type T = CT446;
  const string NAME = 'CT446';

  <<__LateInit>>
  private CT446 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT446 $c): void {}

  protected static function funcReturn(mixed $c): CT446 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT446>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT446>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT446 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT446> {
    return vec[dict[],keyset[],shape('x' => 10),shape(),vec[]];
  }
}
case type CT447 = string|KeyedTraversable<arraykey, mixed>;

  
class CheckCT447<T as CT447> extends BaseCheck {
  const type T = CT447;
  const string NAME = 'CT447';

  <<__LateInit>>
  private CT447 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT447 $c): void {}

  protected static function funcReturn(mixed $c): CT447 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT447>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT447>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT447 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT447> {
    return vec['','hello world',dict[],keyset[],vec[]];
  }
}
case type CT448 = vec<mixed>|KeyedTraversable<arraykey, mixed>;

  
class CheckCT448<T as CT448> extends BaseCheck {
  const type T = CT448;
  const string NAME = 'CT448';

  <<__LateInit>>
  private CT448 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT448 $c): void {}

  protected static function funcReturn(mixed $c): CT448 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT448>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT448>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT448 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT448> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT449 = vec_or_dict<string>|KeyedTraversable<arraykey, mixed>;

  
class CheckCT449<T as CT449> extends BaseCheck {
  const type T = CT449;
  const string NAME = 'CT449';

  <<__LateInit>>
  private CT449 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT449 $c): void {}

  protected static function funcReturn(mixed $c): CT449 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT449>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT449>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT449 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT449> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT450 = void|KeyedTraversable<arraykey, mixed>;

  
class CheckCT450<T as CT450> extends BaseCheck {
  const type T = CT450;
  const string NAME = 'CT450';

  <<__LateInit>>
  private CT450 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT450 $c): void {}

  protected static function funcReturn(mixed $c): CT450 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT450>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT450>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT450 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT450> {
    return vec[dict[],keyset[],null,vec[]];
  }
}
case type CT451 = MyEnum|MyEnum;

  
class CheckCT451<T as CT451> extends BaseCheck {
  const type T = CT451;
  const string NAME = 'CT451';

  <<__LateInit>>
  private CT451 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT451 $c): void {}

  protected static function funcReturn(mixed $c): CT451 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT451>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT451>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT451 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT451> {
    return vec['B',MyEnum::A];
  }
}
case type CT452 = MyTrait|MyEnum;

  
class CheckCT452<T as CT452> extends BaseCheck {
  const type T = CT452;
  const string NAME = 'CT452';

  <<__LateInit>>
  private CT452 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT452 $c): void {}

  protected static function funcReturn(mixed $c): CT452 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT452>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT452>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT452 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT452> {
    return vec['B',MyEnum::A];
  }
}
case type CT453 = ReifiedClass<null>|MyEnum;

  
class CheckCT453<T as CT453> extends BaseCheck {
  const type T = CT453;
  const string NAME = 'CT453';

  <<__LateInit>>
  private CT453 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT453 $c): void {}

  protected static function funcReturn(mixed $c): CT453 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT453>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT453>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT453 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT453> {
    return vec['B',MyEnum::A,new ReifiedClass<null>()];
  }
}
case type CT454 = Stringish|MyEnum;

  
class CheckCT454<T as CT454> extends BaseCheck {
  const type T = CT454;
  const string NAME = 'CT454';

  <<__LateInit>>
  private CT454 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT454 $c): void {}

  protected static function funcReturn(mixed $c): CT454 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT454>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT454>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT454 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT454> {
    return vec['','B','hello world',MyEnum::A,new StringishObj()];
  }
}
case type CT455 = Traversable<mixed>|MyEnum;

  
class CheckCT455<T as CT455> extends BaseCheck {
  const type T = CT455;
  const string NAME = 'CT455';

  <<__LateInit>>
  private CT455 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT455 $c): void {}

  protected static function funcReturn(mixed $c): CT455 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT455>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT455>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT455 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT455> {
    return vec['B',MyEnum::A,dict[],keyset[],vec[]];
  }
}
case type CT456 = XHPChild|MyEnum;

  
class CheckCT456<T as CT456> extends BaseCheck {
  const type T = CT456;
  const string NAME = 'CT456';

  <<__LateInit>>
  private CT456 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT456 $c): void {}

  protected static function funcReturn(mixed $c): CT456 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT456>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT456>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT456 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT456> {
    return vec['','B','hello world',0,1,<my-xhp/>,MyEnum::A];
  }
}
case type CT457 = arraykey|MyEnum;

  
class CheckCT457<T as CT457> extends BaseCheck {
  const type T = CT457;
  const string NAME = 'CT457';

  <<__LateInit>>
  private CT457 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT457 $c): void {}

  protected static function funcReturn(mixed $c): CT457 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT457>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT457>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT457 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT457> {
    return vec['','B','hello world',0,1,MyEnum::A];
  }
}
case type CT458 = bool|MyEnum;

  
class CheckCT458<T as CT458> extends BaseCheck {
  const type T = CT458;
  const string NAME = 'CT458';

  <<__LateInit>>
  private CT458 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT458 $c): void {}

  protected static function funcReturn(mixed $c): CT458 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT458>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT458>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT458 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT458> {
    return vec['B',MyEnum::A,false,true];
  }
}
case type CT459 = dict<arraykey, mixed>|MyEnum;

  
class CheckCT459<T as CT459> extends BaseCheck {
  const type T = CT459;
  const string NAME = 'CT459';

  <<__LateInit>>
  private CT459 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT459 $c): void {}

  protected static function funcReturn(mixed $c): CT459 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT459>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT459>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT459 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT459> {
    return vec['B',MyEnum::A,dict[]];
  }
}
case type CT460 = dynamic|MyEnum;

  
class CheckCT460<T as CT460> extends BaseCheck {
  const type T = CT460;
  const string NAME = 'CT460';

  <<__LateInit>>
  private CT460 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT460 $c): void {}

  protected static function funcReturn(mixed $c): CT460 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT460>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT460>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT460 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT460> {
    return vec['B',MyEnum::A,false,null,shape('x' => 10),shape(),true];
  }
}
case type CT461 = float|MyEnum;

  
class CheckCT461<T as CT461> extends BaseCheck {
  const type T = CT461;
  const string NAME = 'CT461';

  <<__LateInit>>
  private CT461 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT461 $c): void {}

  protected static function funcReturn(mixed $c): CT461 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT461>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT461>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT461 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT461> {
    return vec['B',0.0,3.14,MyEnum::A];
  }
}
case type CT462 = int|MyEnum;

  
class CheckCT462<T as CT462> extends BaseCheck {
  const type T = CT462;
  const string NAME = 'CT462';

  <<__LateInit>>
  private CT462 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT462 $c): void {}

  protected static function funcReturn(mixed $c): CT462 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT462>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT462>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT462 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT462> {
    return vec['B',0,1,MyEnum::A];
  }
}
case type CT463 = keyset<arraykey>|MyEnum;

  
class CheckCT463<T as CT463> extends BaseCheck {
  const type T = CT463;
  const string NAME = 'CT463';

  <<__LateInit>>
  private CT463 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT463 $c): void {}

  protected static function funcReturn(mixed $c): CT463 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT463>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT463>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT463 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT463> {
    return vec['B',MyEnum::A,keyset[]];
  }
}
case type CT464 = mixed|MyEnum;

  
class CheckCT464<T as CT464> extends BaseCheck {
  const type T = CT464;
  const string NAME = 'CT464';

  <<__LateInit>>
  private CT464 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT464 $c): void {}

  protected static function funcReturn(mixed $c): CT464 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT464>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT464>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT464 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT464> {
    return vec['','B','hello world',0,1,MyEnum::A,false,null,true];
  }
}
case type CT465 = nonnull|MyEnum;

  
class CheckCT465<T as CT465> extends BaseCheck {
  const type T = CT465;
  const string NAME = 'CT465';

  <<__LateInit>>
  private CT465 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT465 $c): void {}

  protected static function funcReturn(mixed $c): CT465 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT465>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT465>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT465 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT465> {
    return vec['','B','hello world',0,1,MyEnum::A,false,true];
  }
}
case type CT466 = noreturn|MyEnum;

  
class CheckCT466<T as CT466> extends BaseCheck {
  const type T = CT466;
  const string NAME = 'CT466';

  <<__LateInit>>
  private CT466 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT466 $c): void {}

  protected static function funcReturn(mixed $c): CT466 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT466>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT466>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT466 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT466> {
    return vec['B',MyEnum::A];
  }
}
case type CT467 = nothing|MyEnum;

  
class CheckCT467<T as CT467> extends BaseCheck {
  const type T = CT467;
  const string NAME = 'CT467';

  <<__LateInit>>
  private CT467 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT467 $c): void {}

  protected static function funcReturn(mixed $c): CT467 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT467>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT467>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT467 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT467> {
    return vec['B',MyEnum::A];
  }
}
case type CT468 = null|MyEnum;

  
class CheckCT468<T as CT468> extends BaseCheck {
  const type T = CT468;
  const string NAME = 'CT468';

  <<__LateInit>>
  private CT468 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT468 $c): void {}

  protected static function funcReturn(mixed $c): CT468 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT468>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT468>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT468 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT468> {
    return vec['B',MyEnum::A,null];
  }
}
case type CT469 = num|MyEnum;

  
class CheckCT469<T as CT469> extends BaseCheck {
  const type T = CT469;
  const string NAME = 'CT469';

  <<__LateInit>>
  private CT469 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT469 $c): void {}

  protected static function funcReturn(mixed $c): CT469 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT469>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT469>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT469 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT469> {
    return vec['B',0,0.0,1,3.14,MyEnum::A];
  }
}
case type CT470 = resource|MyEnum;

  
class CheckCT470<T as CT470> extends BaseCheck {
  const type T = CT470;
  const string NAME = 'CT470';

  <<__LateInit>>
  private CT470 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT470 $c): void {}

  protected static function funcReturn(mixed $c): CT470 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT470>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT470>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT470 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT470> {
    return vec['B',MyEnum::A,imagecreate(10, 10)];
  }
}
case type CT471 = shape(...)|MyEnum;

  
class CheckCT471<T as CT471> extends BaseCheck {
  const type T = CT471;
  const string NAME = 'CT471';

  <<__LateInit>>
  private CT471 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT471 $c): void {}

  protected static function funcReturn(mixed $c): CT471 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT471>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT471>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT471 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT471> {
    return vec['B',MyEnum::A,shape('x' => 10),shape()];
  }
}
case type CT472 = string|MyEnum;

  
class CheckCT472<T as CT472> extends BaseCheck {
  const type T = CT472;
  const string NAME = 'CT472';

  <<__LateInit>>
  private CT472 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT472 $c): void {}

  protected static function funcReturn(mixed $c): CT472 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT472>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT472>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT472 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT472> {
    return vec['','B','hello world',MyEnum::A];
  }
}
case type CT473 = vec<mixed>|MyEnum;

  
class CheckCT473<T as CT473> extends BaseCheck {
  const type T = CT473;
  const string NAME = 'CT473';

  <<__LateInit>>
  private CT473 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT473 $c): void {}

  protected static function funcReturn(mixed $c): CT473 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT473>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT473>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT473 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT473> {
    return vec['B',MyEnum::A,vec[]];
  }
}
case type CT474 = vec_or_dict<string>|MyEnum;

  
class CheckCT474<T as CT474> extends BaseCheck {
  const type T = CT474;
  const string NAME = 'CT474';

  <<__LateInit>>
  private CT474 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT474 $c): void {}

  protected static function funcReturn(mixed $c): CT474 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT474>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT474>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT474 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT474> {
    return vec['B',MyEnum::A,dict[],vec[]];
  }
}
case type CT475 = void|MyEnum;

  
class CheckCT475<T as CT475> extends BaseCheck {
  const type T = CT475;
  const string NAME = 'CT475';

  <<__LateInit>>
  private CT475 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT475 $c): void {}

  protected static function funcReturn(mixed $c): CT475 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT475>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT475>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT475 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT475> {
    return vec['B',MyEnum::A,null];
  }
}
case type CT476 = MyTrait|MyTrait;

  
class CheckCT476<T as CT476> extends BaseCheck {
  const type T = CT476;
  const string NAME = 'CT476';

  <<__LateInit>>
  private CT476 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT476 $c): void {}

  protected static function funcReturn(mixed $c): CT476 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT476>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT476>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT476 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT476> {
    return vec[];
  }
}
case type CT477 = ReifiedClass<null>|MyTrait;

  
class CheckCT477<T as CT477> extends BaseCheck {
  const type T = CT477;
  const string NAME = 'CT477';

  <<__LateInit>>
  private CT477 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT477 $c): void {}

  protected static function funcReturn(mixed $c): CT477 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT477>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT477>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT477 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT477> {
    return vec[new ReifiedClass<null>()];
  }
}
case type CT478 = Stringish|MyTrait;

  
class CheckCT478<T as CT478> extends BaseCheck {
  const type T = CT478;
  const string NAME = 'CT478';

  <<__LateInit>>
  private CT478 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT478 $c): void {}

  protected static function funcReturn(mixed $c): CT478 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT478>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT478>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT478 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT478> {
    return vec['','hello world',new StringishObj()];
  }
}
case type CT479 = Traversable<mixed>|MyTrait;

  
class CheckCT479<T as CT479> extends BaseCheck {
  const type T = CT479;
  const string NAME = 'CT479';

  <<__LateInit>>
  private CT479 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT479 $c): void {}

  protected static function funcReturn(mixed $c): CT479 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT479>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT479>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT479 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT479> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT480 = XHPChild|MyTrait;

  
class CheckCT480<T as CT480> extends BaseCheck {
  const type T = CT480;
  const string NAME = 'CT480';

  <<__LateInit>>
  private CT480 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT480 $c): void {}

  protected static function funcReturn(mixed $c): CT480 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT480>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT480>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT480 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT480> {
    return vec['','hello world',0,1,<my-xhp/>];
  }
}
case type CT481 = arraykey|MyTrait;

  
class CheckCT481<T as CT481> extends BaseCheck {
  const type T = CT481;
  const string NAME = 'CT481';

  <<__LateInit>>
  private CT481 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT481 $c): void {}

  protected static function funcReturn(mixed $c): CT481 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT481>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT481>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT481 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT481> {
    return vec['','hello world',0,1];
  }
}
case type CT482 = bool|MyTrait;

  
class CheckCT482<T as CT482> extends BaseCheck {
  const type T = CT482;
  const string NAME = 'CT482';

  <<__LateInit>>
  private CT482 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT482 $c): void {}

  protected static function funcReturn(mixed $c): CT482 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT482>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT482>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT482 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT482> {
    return vec[false,true];
  }
}
case type CT483 = dict<arraykey, mixed>|MyTrait;

  
class CheckCT483<T as CT483> extends BaseCheck {
  const type T = CT483;
  const string NAME = 'CT483';

  <<__LateInit>>
  private CT483 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT483 $c): void {}

  protected static function funcReturn(mixed $c): CT483 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT483>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT483>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT483 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT483> {
    return vec[dict[]];
  }
}
case type CT484 = dynamic|MyTrait;

  
class CheckCT484<T as CT484> extends BaseCheck {
  const type T = CT484;
  const string NAME = 'CT484';

  <<__LateInit>>
  private CT484 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT484 $c): void {}

  protected static function funcReturn(mixed $c): CT484 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT484>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT484>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT484 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT484> {
    return vec[false,null,shape('x' => 10),shape(),true];
  }
}
case type CT485 = float|MyTrait;

  
class CheckCT485<T as CT485> extends BaseCheck {
  const type T = CT485;
  const string NAME = 'CT485';

  <<__LateInit>>
  private CT485 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT485 $c): void {}

  protected static function funcReturn(mixed $c): CT485 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT485>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT485>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT485 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT485> {
    return vec[0.0,3.14];
  }
}
case type CT486 = int|MyTrait;

  
class CheckCT486<T as CT486> extends BaseCheck {
  const type T = CT486;
  const string NAME = 'CT486';

  <<__LateInit>>
  private CT486 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT486 $c): void {}

  protected static function funcReturn(mixed $c): CT486 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT486>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT486>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT486 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT486> {
    return vec[0,1];
  }
}
case type CT487 = keyset<arraykey>|MyTrait;

  
class CheckCT487<T as CT487> extends BaseCheck {
  const type T = CT487;
  const string NAME = 'CT487';

  <<__LateInit>>
  private CT487 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT487 $c): void {}

  protected static function funcReturn(mixed $c): CT487 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT487>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT487>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT487 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT487> {
    return vec[keyset[]];
  }
}
case type CT488 = mixed|MyTrait;

  
class CheckCT488<T as CT488> extends BaseCheck {
  const type T = CT488;
  const string NAME = 'CT488';

  <<__LateInit>>
  private CT488 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT488 $c): void {}

  protected static function funcReturn(mixed $c): CT488 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT488>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT488>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT488 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT488> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT489 = nonnull|MyTrait;

  
class CheckCT489<T as CT489> extends BaseCheck {
  const type T = CT489;
  const string NAME = 'CT489';

  <<__LateInit>>
  private CT489 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT489 $c): void {}

  protected static function funcReturn(mixed $c): CT489 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT489>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT489>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT489 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT489> {
    return vec['','hello world',0,1,false,true];
  }
}
case type CT490 = noreturn|MyTrait;

  
class CheckCT490<T as CT490> extends BaseCheck {
  const type T = CT490;
  const string NAME = 'CT490';

  <<__LateInit>>
  private CT490 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT490 $c): void {}

  protected static function funcReturn(mixed $c): CT490 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT490>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT490>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT490 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT490> {
    return vec[];
  }
}
case type CT491 = nothing|MyTrait;

  
class CheckCT491<T as CT491> extends BaseCheck {
  const type T = CT491;
  const string NAME = 'CT491';

  <<__LateInit>>
  private CT491 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT491 $c): void {}

  protected static function funcReturn(mixed $c): CT491 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT491>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT491>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT491 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT491> {
    return vec[];
  }
}
case type CT492 = null|MyTrait;

  
class CheckCT492<T as CT492> extends BaseCheck {
  const type T = CT492;
  const string NAME = 'CT492';

  <<__LateInit>>
  private CT492 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT492 $c): void {}

  protected static function funcReturn(mixed $c): CT492 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT492>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT492>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT492 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT492> {
    return vec[null];
  }
}
case type CT493 = num|MyTrait;

  
class CheckCT493<T as CT493> extends BaseCheck {
  const type T = CT493;
  const string NAME = 'CT493';

  <<__LateInit>>
  private CT493 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT493 $c): void {}

  protected static function funcReturn(mixed $c): CT493 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT493>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT493>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT493 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT493> {
    return vec[0,0.0,1,3.14];
  }
}
case type CT494 = resource|MyTrait;

  
class CheckCT494<T as CT494> extends BaseCheck {
  const type T = CT494;
  const string NAME = 'CT494';

  <<__LateInit>>
  private CT494 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT494 $c): void {}

  protected static function funcReturn(mixed $c): CT494 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT494>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT494>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT494 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT494> {
    return vec[imagecreate(10, 10)];
  }
}
case type CT495 = shape(...)|MyTrait;

  
class CheckCT495<T as CT495> extends BaseCheck {
  const type T = CT495;
  const string NAME = 'CT495';

  <<__LateInit>>
  private CT495 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT495 $c): void {}

  protected static function funcReturn(mixed $c): CT495 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT495>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT495>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT495 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT495> {
    return vec[shape('x' => 10),shape()];
  }
}
case type CT496 = string|MyTrait;

  
class CheckCT496<T as CT496> extends BaseCheck {
  const type T = CT496;
  const string NAME = 'CT496';

  <<__LateInit>>
  private CT496 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT496 $c): void {}

  protected static function funcReturn(mixed $c): CT496 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT496>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT496>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT496 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT496> {
    return vec['','hello world'];
  }
}
case type CT497 = vec<mixed>|MyTrait;

  
class CheckCT497<T as CT497> extends BaseCheck {
  const type T = CT497;
  const string NAME = 'CT497';

  <<__LateInit>>
  private CT497 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT497 $c): void {}

  protected static function funcReturn(mixed $c): CT497 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT497>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT497>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT497 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT497> {
    return vec[vec[]];
  }
}
case type CT498 = vec_or_dict<string>|MyTrait;

  
class CheckCT498<T as CT498> extends BaseCheck {
  const type T = CT498;
  const string NAME = 'CT498';

  <<__LateInit>>
  private CT498 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT498 $c): void {}

  protected static function funcReturn(mixed $c): CT498 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT498>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT498>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT498 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT498> {
    return vec[dict[],vec[]];
  }
}
case type CT499 = void|MyTrait;

  
class CheckCT499<T as CT499> extends BaseCheck {
  const type T = CT499;
  const string NAME = 'CT499';

  <<__LateInit>>
  private CT499 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT499 $c): void {}

  protected static function funcReturn(mixed $c): CT499 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT499>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT499>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT499 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT499> {
    return vec[null];
  }
}
case type CT500 = ReifiedClass<null>|ReifiedClass<null>;

  
class CheckCT500<T as CT500> extends BaseCheck {
  const type T = CT500;
  const string NAME = 'CT500';

  <<__LateInit>>
  private CT500 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT500 $c): void {}

  protected static function funcReturn(mixed $c): CT500 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT500>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT500>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT500 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT500> {
    return vec[new ReifiedClass<null>()];
  }
}
case type CT501 = Stringish|ReifiedClass<null>;

  
class CheckCT501<T as CT501> extends BaseCheck {
  const type T = CT501;
  const string NAME = 'CT501';

  <<__LateInit>>
  private CT501 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT501 $c): void {}

  protected static function funcReturn(mixed $c): CT501 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT501>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT501>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT501 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT501> {
    return vec['','hello world',new ReifiedClass<null>(),new StringishObj()];
  }
}
case type CT502 = Traversable<mixed>|ReifiedClass<null>;

  
class CheckCT502<T as CT502> extends BaseCheck {
  const type T = CT502;
  const string NAME = 'CT502';

  <<__LateInit>>
  private CT502 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT502 $c): void {}

  protected static function funcReturn(mixed $c): CT502 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT502>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT502>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT502 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT502> {
    return vec[dict[],keyset[],new ReifiedClass<null>(),vec[]];
  }
}
case type CT503 = XHPChild|ReifiedClass<null>;

  
class CheckCT503<T as CT503> extends BaseCheck {
  const type T = CT503;
  const string NAME = 'CT503';

  <<__LateInit>>
  private CT503 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT503 $c): void {}

  protected static function funcReturn(mixed $c): CT503 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT503>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT503>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT503 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT503> {
    return vec['','hello world',0,1,<my-xhp/>,new ReifiedClass<null>()];
  }
}
case type CT504 = arraykey|ReifiedClass<null>;

  
class CheckCT504<T as CT504> extends BaseCheck {
  const type T = CT504;
  const string NAME = 'CT504';

  <<__LateInit>>
  private CT504 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT504 $c): void {}

  protected static function funcReturn(mixed $c): CT504 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT504>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT504>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT504 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT504> {
    return vec['','hello world',0,1,new ReifiedClass<null>()];
  }
}
case type CT505 = bool|ReifiedClass<null>;

  
class CheckCT505<T as CT505> extends BaseCheck {
  const type T = CT505;
  const string NAME = 'CT505';

  <<__LateInit>>
  private CT505 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT505 $c): void {}

  protected static function funcReturn(mixed $c): CT505 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT505>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT505>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT505 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT505> {
    return vec[false,new ReifiedClass<null>(),true];
  }
}
case type CT506 = dict<arraykey, mixed>|ReifiedClass<null>;

  
class CheckCT506<T as CT506> extends BaseCheck {
  const type T = CT506;
  const string NAME = 'CT506';

  <<__LateInit>>
  private CT506 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT506 $c): void {}

  protected static function funcReturn(mixed $c): CT506 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT506>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT506>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT506 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT506> {
    return vec[dict[],new ReifiedClass<null>()];
  }
}
case type CT507 = dynamic|ReifiedClass<null>;

  
class CheckCT507<T as CT507> extends BaseCheck {
  const type T = CT507;
  const string NAME = 'CT507';

  <<__LateInit>>
  private CT507 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT507 $c): void {}

  protected static function funcReturn(mixed $c): CT507 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT507>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT507>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT507 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT507> {
    return vec[false,new ReifiedClass<null>(),null,shape('x' => 10),shape(),true];
  }
}
case type CT508 = float|ReifiedClass<null>;

  
class CheckCT508<T as CT508> extends BaseCheck {
  const type T = CT508;
  const string NAME = 'CT508';

  <<__LateInit>>
  private CT508 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT508 $c): void {}

  protected static function funcReturn(mixed $c): CT508 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT508>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT508>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT508 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT508> {
    return vec[0.0,3.14,new ReifiedClass<null>()];
  }
}
case type CT509 = int|ReifiedClass<null>;

  
class CheckCT509<T as CT509> extends BaseCheck {
  const type T = CT509;
  const string NAME = 'CT509';

  <<__LateInit>>
  private CT509 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT509 $c): void {}

  protected static function funcReturn(mixed $c): CT509 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT509>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT509>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT509 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT509> {
    return vec[0,1,new ReifiedClass<null>()];
  }
}
case type CT510 = keyset<arraykey>|ReifiedClass<null>;

  
class CheckCT510<T as CT510> extends BaseCheck {
  const type T = CT510;
  const string NAME = 'CT510';

  <<__LateInit>>
  private CT510 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT510 $c): void {}

  protected static function funcReturn(mixed $c): CT510 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT510>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT510>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT510 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT510> {
    return vec[keyset[],new ReifiedClass<null>()];
  }
}
case type CT511 = mixed|ReifiedClass<null>;

  
class CheckCT511<T as CT511> extends BaseCheck {
  const type T = CT511;
  const string NAME = 'CT511';

  <<__LateInit>>
  private CT511 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT511 $c): void {}

  protected static function funcReturn(mixed $c): CT511 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT511>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT511>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT511 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT511> {
    return vec['','hello world',0,1,false,new ReifiedClass<null>(),null,true];
  }
}
case type CT512 = nonnull|ReifiedClass<null>;

  
class CheckCT512<T as CT512> extends BaseCheck {
  const type T = CT512;
  const string NAME = 'CT512';

  <<__LateInit>>
  private CT512 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT512 $c): void {}

  protected static function funcReturn(mixed $c): CT512 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT512>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT512>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT512 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT512> {
    return vec['','hello world',0,1,false,new ReifiedClass<null>(),true];
  }
}
case type CT513 = noreturn|ReifiedClass<null>;

  
class CheckCT513<T as CT513> extends BaseCheck {
  const type T = CT513;
  const string NAME = 'CT513';

  <<__LateInit>>
  private CT513 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT513 $c): void {}

  protected static function funcReturn(mixed $c): CT513 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT513>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT513>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT513 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT513> {
    return vec[new ReifiedClass<null>()];
  }
}
case type CT514 = nothing|ReifiedClass<null>;

  
class CheckCT514<T as CT514> extends BaseCheck {
  const type T = CT514;
  const string NAME = 'CT514';

  <<__LateInit>>
  private CT514 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT514 $c): void {}

  protected static function funcReturn(mixed $c): CT514 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT514>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT514>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT514 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT514> {
    return vec[new ReifiedClass<null>()];
  }
}
case type CT515 = null|ReifiedClass<null>;

  
class CheckCT515<T as CT515> extends BaseCheck {
  const type T = CT515;
  const string NAME = 'CT515';

  <<__LateInit>>
  private CT515 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT515 $c): void {}

  protected static function funcReturn(mixed $c): CT515 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT515>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT515>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT515 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT515> {
    return vec[new ReifiedClass<null>(),null];
  }
}
case type CT516 = num|ReifiedClass<null>;

  
class CheckCT516<T as CT516> extends BaseCheck {
  const type T = CT516;
  const string NAME = 'CT516';

  <<__LateInit>>
  private CT516 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT516 $c): void {}

  protected static function funcReturn(mixed $c): CT516 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT516>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT516>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT516 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT516> {
    return vec[0,0.0,1,3.14,new ReifiedClass<null>()];
  }
}
case type CT517 = resource|ReifiedClass<null>;

  
class CheckCT517<T as CT517> extends BaseCheck {
  const type T = CT517;
  const string NAME = 'CT517';

  <<__LateInit>>
  private CT517 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT517 $c): void {}

  protected static function funcReturn(mixed $c): CT517 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT517>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT517>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT517 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT517> {
    return vec[imagecreate(10, 10),new ReifiedClass<null>()];
  }
}
case type CT518 = shape(...)|ReifiedClass<null>;

  
class CheckCT518<T as CT518> extends BaseCheck {
  const type T = CT518;
  const string NAME = 'CT518';

  <<__LateInit>>
  private CT518 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT518 $c): void {}

  protected static function funcReturn(mixed $c): CT518 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT518>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT518>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT518 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT518> {
    return vec[new ReifiedClass<null>(),shape('x' => 10),shape()];
  }
}
case type CT519 = string|ReifiedClass<null>;

  
class CheckCT519<T as CT519> extends BaseCheck {
  const type T = CT519;
  const string NAME = 'CT519';

  <<__LateInit>>
  private CT519 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT519 $c): void {}

  protected static function funcReturn(mixed $c): CT519 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT519>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT519>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT519 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT519> {
    return vec['','hello world',new ReifiedClass<null>()];
  }
}
case type CT520 = vec<mixed>|ReifiedClass<null>;

  
class CheckCT520<T as CT520> extends BaseCheck {
  const type T = CT520;
  const string NAME = 'CT520';

  <<__LateInit>>
  private CT520 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT520 $c): void {}

  protected static function funcReturn(mixed $c): CT520 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT520>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT520>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT520 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT520> {
    return vec[new ReifiedClass<null>(),vec[]];
  }
}
case type CT521 = vec_or_dict<string>|ReifiedClass<null>;

  
class CheckCT521<T as CT521> extends BaseCheck {
  const type T = CT521;
  const string NAME = 'CT521';

  <<__LateInit>>
  private CT521 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT521 $c): void {}

  protected static function funcReturn(mixed $c): CT521 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT521>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT521>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT521 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT521> {
    return vec[dict[],new ReifiedClass<null>(),vec[]];
  }
}
case type CT522 = void|ReifiedClass<null>;

  
class CheckCT522<T as CT522> extends BaseCheck {
  const type T = CT522;
  const string NAME = 'CT522';

  <<__LateInit>>
  private CT522 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT522 $c): void {}

  protected static function funcReturn(mixed $c): CT522 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT522>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT522>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT522 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT522> {
    return vec[new ReifiedClass<null>(),null];
  }
}
case type CT523 = Stringish|Stringish;

  
class CheckCT523<T as CT523> extends BaseCheck {
  const type T = CT523;
  const string NAME = 'CT523';

  <<__LateInit>>
  private CT523 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT523 $c): void {}

  protected static function funcReturn(mixed $c): CT523 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT523>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT523>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT523 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT523> {
    return vec['','hello world',new StringishObj()];
  }
}
case type CT524 = Traversable<mixed>|Stringish;

  
class CheckCT524<T as CT524> extends BaseCheck {
  const type T = CT524;
  const string NAME = 'CT524';

  <<__LateInit>>
  private CT524 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT524 $c): void {}

  protected static function funcReturn(mixed $c): CT524 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT524>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT524>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT524 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT524> {
    return vec['','hello world',dict[],keyset[],new StringishObj(),vec[]];
  }
}
case type CT525 = XHPChild|Stringish;

  
class CheckCT525<T as CT525> extends BaseCheck {
  const type T = CT525;
  const string NAME = 'CT525';

  <<__LateInit>>
  private CT525 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT525 $c): void {}

  protected static function funcReturn(mixed $c): CT525 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT525>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT525>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT525 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT525> {
    return vec['','hello world',0,1,<my-xhp/>,new StringishObj()];
  }
}
case type CT526 = arraykey|Stringish;

  
class CheckCT526<T as CT526> extends BaseCheck {
  const type T = CT526;
  const string NAME = 'CT526';

  <<__LateInit>>
  private CT526 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT526 $c): void {}

  protected static function funcReturn(mixed $c): CT526 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT526>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT526>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT526 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT526> {
    return vec['','hello world',0,1,new StringishObj()];
  }
}
case type CT527 = bool|Stringish;

  
class CheckCT527<T as CT527> extends BaseCheck {
  const type T = CT527;
  const string NAME = 'CT527';

  <<__LateInit>>
  private CT527 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT527 $c): void {}

  protected static function funcReturn(mixed $c): CT527 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT527>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT527>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT527 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT527> {
    return vec['','hello world',false,new StringishObj(),true];
  }
}
case type CT528 = dict<arraykey, mixed>|Stringish;

  
class CheckCT528<T as CT528> extends BaseCheck {
  const type T = CT528;
  const string NAME = 'CT528';

  <<__LateInit>>
  private CT528 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT528 $c): void {}

  protected static function funcReturn(mixed $c): CT528 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT528>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT528>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT528 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT528> {
    return vec['','hello world',dict[],new StringishObj()];
  }
}
case type CT529 = dynamic|Stringish;

  
class CheckCT529<T as CT529> extends BaseCheck {
  const type T = CT529;
  const string NAME = 'CT529';

  <<__LateInit>>
  private CT529 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT529 $c): void {}

  protected static function funcReturn(mixed $c): CT529 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT529>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT529>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT529 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT529> {
    return vec['','hello world',false,new StringishObj(),null,shape('x' => 10),shape(),true];
  }
}
case type CT530 = float|Stringish;

  
class CheckCT530<T as CT530> extends BaseCheck {
  const type T = CT530;
  const string NAME = 'CT530';

  <<__LateInit>>
  private CT530 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT530 $c): void {}

  protected static function funcReturn(mixed $c): CT530 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT530>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT530>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT530 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT530> {
    return vec['','hello world',0.0,3.14,new StringishObj()];
  }
}
case type CT531 = int|Stringish;

  
class CheckCT531<T as CT531> extends BaseCheck {
  const type T = CT531;
  const string NAME = 'CT531';

  <<__LateInit>>
  private CT531 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT531 $c): void {}

  protected static function funcReturn(mixed $c): CT531 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT531>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT531>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT531 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT531> {
    return vec['','hello world',0,1,new StringishObj()];
  }
}
case type CT532 = keyset<arraykey>|Stringish;

  
class CheckCT532<T as CT532> extends BaseCheck {
  const type T = CT532;
  const string NAME = 'CT532';

  <<__LateInit>>
  private CT532 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT532 $c): void {}

  protected static function funcReturn(mixed $c): CT532 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT532>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT532>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT532 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT532> {
    return vec['','hello world',keyset[],new StringishObj()];
  }
}
case type CT533 = mixed|Stringish;

  
class CheckCT533<T as CT533> extends BaseCheck {
  const type T = CT533;
  const string NAME = 'CT533';

  <<__LateInit>>
  private CT533 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT533 $c): void {}

  protected static function funcReturn(mixed $c): CT533 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT533>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT533>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT533 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT533> {
    return vec['','hello world',0,1,false,new StringishObj(),null,true];
  }
}
case type CT534 = nonnull|Stringish;

  
class CheckCT534<T as CT534> extends BaseCheck {
  const type T = CT534;
  const string NAME = 'CT534';

  <<__LateInit>>
  private CT534 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT534 $c): void {}

  protected static function funcReturn(mixed $c): CT534 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT534>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT534>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT534 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT534> {
    return vec['','hello world',0,1,false,new StringishObj(),true];
  }
}
case type CT535 = noreturn|Stringish;

  
class CheckCT535<T as CT535> extends BaseCheck {
  const type T = CT535;
  const string NAME = 'CT535';

  <<__LateInit>>
  private CT535 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT535 $c): void {}

  protected static function funcReturn(mixed $c): CT535 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT535>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT535>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT535 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT535> {
    return vec['','hello world',new StringishObj()];
  }
}
case type CT536 = nothing|Stringish;

  
class CheckCT536<T as CT536> extends BaseCheck {
  const type T = CT536;
  const string NAME = 'CT536';

  <<__LateInit>>
  private CT536 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT536 $c): void {}

  protected static function funcReturn(mixed $c): CT536 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT536>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT536>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT536 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT536> {
    return vec['','hello world',new StringishObj()];
  }
}
case type CT537 = null|Stringish;

  
class CheckCT537<T as CT537> extends BaseCheck {
  const type T = CT537;
  const string NAME = 'CT537';

  <<__LateInit>>
  private CT537 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT537 $c): void {}

  protected static function funcReturn(mixed $c): CT537 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT537>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT537>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT537 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT537> {
    return vec['','hello world',new StringishObj(),null];
  }
}
case type CT538 = num|Stringish;

  
class CheckCT538<T as CT538> extends BaseCheck {
  const type T = CT538;
  const string NAME = 'CT538';

  <<__LateInit>>
  private CT538 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT538 $c): void {}

  protected static function funcReturn(mixed $c): CT538 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT538>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT538>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT538 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT538> {
    return vec['','hello world',0,0.0,1,3.14,new StringishObj()];
  }
}
case type CT539 = resource|Stringish;

  
class CheckCT539<T as CT539> extends BaseCheck {
  const type T = CT539;
  const string NAME = 'CT539';

  <<__LateInit>>
  private CT539 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT539 $c): void {}

  protected static function funcReturn(mixed $c): CT539 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT539>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT539>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT539 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT539> {
    return vec['','hello world',imagecreate(10, 10),new StringishObj()];
  }
}
case type CT540 = shape(...)|Stringish;

  
class CheckCT540<T as CT540> extends BaseCheck {
  const type T = CT540;
  const string NAME = 'CT540';

  <<__LateInit>>
  private CT540 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT540 $c): void {}

  protected static function funcReturn(mixed $c): CT540 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT540>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT540>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT540 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT540> {
    return vec['','hello world',new StringishObj(),shape('x' => 10),shape()];
  }
}
case type CT541 = string|Stringish;

  
class CheckCT541<T as CT541> extends BaseCheck {
  const type T = CT541;
  const string NAME = 'CT541';

  <<__LateInit>>
  private CT541 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT541 $c): void {}

  protected static function funcReturn(mixed $c): CT541 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT541>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT541>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT541 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT541> {
    return vec['','hello world',new StringishObj()];
  }
}
case type CT542 = vec<mixed>|Stringish;

  
class CheckCT542<T as CT542> extends BaseCheck {
  const type T = CT542;
  const string NAME = 'CT542';

  <<__LateInit>>
  private CT542 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT542 $c): void {}

  protected static function funcReturn(mixed $c): CT542 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT542>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT542>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT542 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT542> {
    return vec['','hello world',new StringishObj(),vec[]];
  }
}
case type CT543 = vec_or_dict<string>|Stringish;

  
class CheckCT543<T as CT543> extends BaseCheck {
  const type T = CT543;
  const string NAME = 'CT543';

  <<__LateInit>>
  private CT543 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT543 $c): void {}

  protected static function funcReturn(mixed $c): CT543 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT543>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT543>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT543 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT543> {
    return vec['','hello world',dict[],new StringishObj(),vec[]];
  }
}
case type CT544 = void|Stringish;

  
class CheckCT544<T as CT544> extends BaseCheck {
  const type T = CT544;
  const string NAME = 'CT544';

  <<__LateInit>>
  private CT544 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT544 $c): void {}

  protected static function funcReturn(mixed $c): CT544 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT544>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT544>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT544 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT544> {
    return vec['','hello world',new StringishObj(),null];
  }
}
case type CT545 = Traversable<mixed>|Traversable<mixed>;

  
class CheckCT545<T as CT545> extends BaseCheck {
  const type T = CT545;
  const string NAME = 'CT545';

  <<__LateInit>>
  private CT545 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT545 $c): void {}

  protected static function funcReturn(mixed $c): CT545 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT545>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT545>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT545 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT545> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT546 = XHPChild|Traversable<mixed>;

  
class CheckCT546<T as CT546> extends BaseCheck {
  const type T = CT546;
  const string NAME = 'CT546';

  <<__LateInit>>
  private CT546 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT546 $c): void {}

  protected static function funcReturn(mixed $c): CT546 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT546>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT546>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT546 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT546> {
    return vec['','hello world',0,1,<my-xhp/>,dict[],keyset[],vec[]];
  }
}
case type CT547 = arraykey|Traversable<mixed>;

  
class CheckCT547<T as CT547> extends BaseCheck {
  const type T = CT547;
  const string NAME = 'CT547';

  <<__LateInit>>
  private CT547 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT547 $c): void {}

  protected static function funcReturn(mixed $c): CT547 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT547>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT547>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT547 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT547> {
    return vec['','hello world',0,1,dict[],keyset[],vec[]];
  }
}
case type CT548 = bool|Traversable<mixed>;

  
class CheckCT548<T as CT548> extends BaseCheck {
  const type T = CT548;
  const string NAME = 'CT548';

  <<__LateInit>>
  private CT548 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT548 $c): void {}

  protected static function funcReturn(mixed $c): CT548 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT548>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT548>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT548 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT548> {
    return vec[dict[],false,keyset[],true,vec[]];
  }
}
case type CT549 = dict<arraykey, mixed>|Traversable<mixed>;

  
class CheckCT549<T as CT549> extends BaseCheck {
  const type T = CT549;
  const string NAME = 'CT549';

  <<__LateInit>>
  private CT549 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT549 $c): void {}

  protected static function funcReturn(mixed $c): CT549 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT549>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT549>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT549 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT549> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT550 = dynamic|Traversable<mixed>;

  
class CheckCT550<T as CT550> extends BaseCheck {
  const type T = CT550;
  const string NAME = 'CT550';

  <<__LateInit>>
  private CT550 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT550 $c): void {}

  protected static function funcReturn(mixed $c): CT550 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT550>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT550>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT550 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT550> {
    return vec[dict[],false,keyset[],null,shape('x' => 10),shape(),true,vec[]];
  }
}
case type CT551 = float|Traversable<mixed>;

  
class CheckCT551<T as CT551> extends BaseCheck {
  const type T = CT551;
  const string NAME = 'CT551';

  <<__LateInit>>
  private CT551 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT551 $c): void {}

  protected static function funcReturn(mixed $c): CT551 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT551>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT551>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT551 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT551> {
    return vec[0.0,3.14,dict[],keyset[],vec[]];
  }
}
case type CT552 = int|Traversable<mixed>;

  
class CheckCT552<T as CT552> extends BaseCheck {
  const type T = CT552;
  const string NAME = 'CT552';

  <<__LateInit>>
  private CT552 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT552 $c): void {}

  protected static function funcReturn(mixed $c): CT552 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT552>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT552>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT552 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT552> {
    return vec[0,1,dict[],keyset[],vec[]];
  }
}
case type CT553 = keyset<arraykey>|Traversable<mixed>;

  
class CheckCT553<T as CT553> extends BaseCheck {
  const type T = CT553;
  const string NAME = 'CT553';

  <<__LateInit>>
  private CT553 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT553 $c): void {}

  protected static function funcReturn(mixed $c): CT553 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT553>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT553>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT553 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT553> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT554 = mixed|Traversable<mixed>;

  
class CheckCT554<T as CT554> extends BaseCheck {
  const type T = CT554;
  const string NAME = 'CT554';

  <<__LateInit>>
  private CT554 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT554 $c): void {}

  protected static function funcReturn(mixed $c): CT554 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT554>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT554>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT554 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT554> {
    return vec['','hello world',0,1,dict[],false,keyset[],null,true,vec[]];
  }
}
case type CT555 = nonnull|Traversable<mixed>;

  
class CheckCT555<T as CT555> extends BaseCheck {
  const type T = CT555;
  const string NAME = 'CT555';

  <<__LateInit>>
  private CT555 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT555 $c): void {}

  protected static function funcReturn(mixed $c): CT555 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT555>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT555>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT555 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT555> {
    return vec['','hello world',0,1,dict[],false,keyset[],true,vec[]];
  }
}
case type CT556 = noreturn|Traversable<mixed>;

  
class CheckCT556<T as CT556> extends BaseCheck {
  const type T = CT556;
  const string NAME = 'CT556';

  <<__LateInit>>
  private CT556 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT556 $c): void {}

  protected static function funcReturn(mixed $c): CT556 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT556>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT556>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT556 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT556> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT557 = nothing|Traversable<mixed>;

  
class CheckCT557<T as CT557> extends BaseCheck {
  const type T = CT557;
  const string NAME = 'CT557';

  <<__LateInit>>
  private CT557 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT557 $c): void {}

  protected static function funcReturn(mixed $c): CT557 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT557>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT557>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT557 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT557> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT558 = null|Traversable<mixed>;

  
class CheckCT558<T as CT558> extends BaseCheck {
  const type T = CT558;
  const string NAME = 'CT558';

  <<__LateInit>>
  private CT558 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT558 $c): void {}

  protected static function funcReturn(mixed $c): CT558 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT558>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT558>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT558 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT558> {
    return vec[dict[],keyset[],null,vec[]];
  }
}
case type CT559 = num|Traversable<mixed>;

  
class CheckCT559<T as CT559> extends BaseCheck {
  const type T = CT559;
  const string NAME = 'CT559';

  <<__LateInit>>
  private CT559 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT559 $c): void {}

  protected static function funcReturn(mixed $c): CT559 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT559>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT559>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT559 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT559> {
    return vec[0,0.0,1,3.14,dict[],keyset[],vec[]];
  }
}
case type CT560 = resource|Traversable<mixed>;

  
class CheckCT560<T as CT560> extends BaseCheck {
  const type T = CT560;
  const string NAME = 'CT560';

  <<__LateInit>>
  private CT560 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT560 $c): void {}

  protected static function funcReturn(mixed $c): CT560 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT560>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT560>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT560 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT560> {
    return vec[dict[],imagecreate(10, 10),keyset[],vec[]];
  }
}
case type CT561 = shape(...)|Traversable<mixed>;

  
class CheckCT561<T as CT561> extends BaseCheck {
  const type T = CT561;
  const string NAME = 'CT561';

  <<__LateInit>>
  private CT561 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT561 $c): void {}

  protected static function funcReturn(mixed $c): CT561 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT561>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT561>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT561 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT561> {
    return vec[dict[],keyset[],shape('x' => 10),shape(),vec[]];
  }
}
case type CT562 = string|Traversable<mixed>;

  
class CheckCT562<T as CT562> extends BaseCheck {
  const type T = CT562;
  const string NAME = 'CT562';

  <<__LateInit>>
  private CT562 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT562 $c): void {}

  protected static function funcReturn(mixed $c): CT562 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT562>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT562>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT562 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT562> {
    return vec['','hello world',dict[],keyset[],vec[]];
  }
}
case type CT563 = vec<mixed>|Traversable<mixed>;

  
class CheckCT563<T as CT563> extends BaseCheck {
  const type T = CT563;
  const string NAME = 'CT563';

  <<__LateInit>>
  private CT563 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT563 $c): void {}

  protected static function funcReturn(mixed $c): CT563 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT563>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT563>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT563 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT563> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT564 = vec_or_dict<string>|Traversable<mixed>;

  
class CheckCT564<T as CT564> extends BaseCheck {
  const type T = CT564;
  const string NAME = 'CT564';

  <<__LateInit>>
  private CT564 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT564 $c): void {}

  protected static function funcReturn(mixed $c): CT564 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT564>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT564>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT564 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT564> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT565 = void|Traversable<mixed>;

  
class CheckCT565<T as CT565> extends BaseCheck {
  const type T = CT565;
  const string NAME = 'CT565';

  <<__LateInit>>
  private CT565 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT565 $c): void {}

  protected static function funcReturn(mixed $c): CT565 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT565>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT565>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT565 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT565> {
    return vec[dict[],keyset[],null,vec[]];
  }
}
case type CT566 = XHPChild|XHPChild;

  
class CheckCT566<T as CT566> extends BaseCheck {
  const type T = CT566;
  const string NAME = 'CT566';

  <<__LateInit>>
  private CT566 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT566 $c): void {}

  protected static function funcReturn(mixed $c): CT566 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT566>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT566>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT566 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT566> {
    return vec['','hello world',0,1,<my-xhp/>];
  }
}
case type CT567 = arraykey|XHPChild;

  
class CheckCT567<T as CT567> extends BaseCheck {
  const type T = CT567;
  const string NAME = 'CT567';

  <<__LateInit>>
  private CT567 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT567 $c): void {}

  protected static function funcReturn(mixed $c): CT567 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT567>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT567>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT567 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT567> {
    return vec['','hello world',0,1,<my-xhp/>];
  }
}
case type CT568 = bool|XHPChild;

  
class CheckCT568<T as CT568> extends BaseCheck {
  const type T = CT568;
  const string NAME = 'CT568';

  <<__LateInit>>
  private CT568 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT568 $c): void {}

  protected static function funcReturn(mixed $c): CT568 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT568>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT568>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT568 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT568> {
    return vec['','hello world',0,1,<my-xhp/>,false,true];
  }
}
case type CT569 = dict<arraykey, mixed>|XHPChild;

  
class CheckCT569<T as CT569> extends BaseCheck {
  const type T = CT569;
  const string NAME = 'CT569';

  <<__LateInit>>
  private CT569 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT569 $c): void {}

  protected static function funcReturn(mixed $c): CT569 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT569>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT569>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT569 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT569> {
    return vec['','hello world',0,1,<my-xhp/>,dict[]];
  }
}
case type CT570 = dynamic|XHPChild;

  
class CheckCT570<T as CT570> extends BaseCheck {
  const type T = CT570;
  const string NAME = 'CT570';

  <<__LateInit>>
  private CT570 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT570 $c): void {}

  protected static function funcReturn(mixed $c): CT570 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT570>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT570>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT570 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT570> {
    return vec['','hello world',0,1,<my-xhp/>,false,null,shape('x' => 10),shape(),true];
  }
}
case type CT571 = float|XHPChild;

  
class CheckCT571<T as CT571> extends BaseCheck {
  const type T = CT571;
  const string NAME = 'CT571';

  <<__LateInit>>
  private CT571 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT571 $c): void {}

  protected static function funcReturn(mixed $c): CT571 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT571>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT571>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT571 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT571> {
    return vec['','hello world',0,0.0,1,3.14,<my-xhp/>];
  }
}
case type CT572 = int|XHPChild;

  
class CheckCT572<T as CT572> extends BaseCheck {
  const type T = CT572;
  const string NAME = 'CT572';

  <<__LateInit>>
  private CT572 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT572 $c): void {}

  protected static function funcReturn(mixed $c): CT572 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT572>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT572>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT572 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT572> {
    return vec['','hello world',0,1,<my-xhp/>];
  }
}
case type CT573 = keyset<arraykey>|XHPChild;

  
class CheckCT573<T as CT573> extends BaseCheck {
  const type T = CT573;
  const string NAME = 'CT573';

  <<__LateInit>>
  private CT573 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT573 $c): void {}

  protected static function funcReturn(mixed $c): CT573 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT573>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT573>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT573 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT573> {
    return vec['','hello world',0,1,<my-xhp/>,keyset[]];
  }
}
case type CT574 = mixed|XHPChild;

  
class CheckCT574<T as CT574> extends BaseCheck {
  const type T = CT574;
  const string NAME = 'CT574';

  <<__LateInit>>
  private CT574 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT574 $c): void {}

  protected static function funcReturn(mixed $c): CT574 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT574>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT574>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT574 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT574> {
    return vec['','hello world',0,1,<my-xhp/>,false,null,true];
  }
}
case type CT575 = nonnull|XHPChild;

  
class CheckCT575<T as CT575> extends BaseCheck {
  const type T = CT575;
  const string NAME = 'CT575';

  <<__LateInit>>
  private CT575 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT575 $c): void {}

  protected static function funcReturn(mixed $c): CT575 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT575>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT575>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT575 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT575> {
    return vec['','hello world',0,1,<my-xhp/>,false,true];
  }
}
case type CT576 = noreturn|XHPChild;

  
class CheckCT576<T as CT576> extends BaseCheck {
  const type T = CT576;
  const string NAME = 'CT576';

  <<__LateInit>>
  private CT576 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT576 $c): void {}

  protected static function funcReturn(mixed $c): CT576 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT576>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT576>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT576 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT576> {
    return vec['','hello world',0,1,<my-xhp/>];
  }
}
case type CT577 = nothing|XHPChild;

  
class CheckCT577<T as CT577> extends BaseCheck {
  const type T = CT577;
  const string NAME = 'CT577';

  <<__LateInit>>
  private CT577 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT577 $c): void {}

  protected static function funcReturn(mixed $c): CT577 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT577>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT577>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT577 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT577> {
    return vec['','hello world',0,1,<my-xhp/>];
  }
}
case type CT578 = null|XHPChild;

  
class CheckCT578<T as CT578> extends BaseCheck {
  const type T = CT578;
  const string NAME = 'CT578';

  <<__LateInit>>
  private CT578 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT578 $c): void {}

  protected static function funcReturn(mixed $c): CT578 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT578>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT578>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT578 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT578> {
    return vec['','hello world',0,1,<my-xhp/>,null];
  }
}
case type CT579 = num|XHPChild;

  
class CheckCT579<T as CT579> extends BaseCheck {
  const type T = CT579;
  const string NAME = 'CT579';

  <<__LateInit>>
  private CT579 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT579 $c): void {}

  protected static function funcReturn(mixed $c): CT579 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT579>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT579>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT579 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT579> {
    return vec['','hello world',0,0.0,1,3.14,<my-xhp/>];
  }
}
case type CT580 = resource|XHPChild;

  
class CheckCT580<T as CT580> extends BaseCheck {
  const type T = CT580;
  const string NAME = 'CT580';

  <<__LateInit>>
  private CT580 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT580 $c): void {}

  protected static function funcReturn(mixed $c): CT580 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT580>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT580>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT580 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT580> {
    return vec['','hello world',0,1,<my-xhp/>,imagecreate(10, 10)];
  }
}
case type CT581 = shape(...)|XHPChild;

  
class CheckCT581<T as CT581> extends BaseCheck {
  const type T = CT581;
  const string NAME = 'CT581';

  <<__LateInit>>
  private CT581 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT581 $c): void {}

  protected static function funcReturn(mixed $c): CT581 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT581>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT581>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT581 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT581> {
    return vec['','hello world',0,1,<my-xhp/>,shape('x' => 10),shape()];
  }
}
case type CT582 = string|XHPChild;

  
class CheckCT582<T as CT582> extends BaseCheck {
  const type T = CT582;
  const string NAME = 'CT582';

  <<__LateInit>>
  private CT582 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT582 $c): void {}

  protected static function funcReturn(mixed $c): CT582 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT582>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT582>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT582 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT582> {
    return vec['','hello world',0,1,<my-xhp/>];
  }
}
case type CT583 = vec<mixed>|XHPChild;

  
class CheckCT583<T as CT583> extends BaseCheck {
  const type T = CT583;
  const string NAME = 'CT583';

  <<__LateInit>>
  private CT583 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT583 $c): void {}

  protected static function funcReturn(mixed $c): CT583 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT583>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT583>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT583 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT583> {
    return vec['','hello world',0,1,<my-xhp/>,vec[]];
  }
}
case type CT584 = vec_or_dict<string>|XHPChild;

  
class CheckCT584<T as CT584> extends BaseCheck {
  const type T = CT584;
  const string NAME = 'CT584';

  <<__LateInit>>
  private CT584 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT584 $c): void {}

  protected static function funcReturn(mixed $c): CT584 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT584>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT584>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT584 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT584> {
    return vec['','hello world',0,1,<my-xhp/>,dict[],vec[]];
  }
}
case type CT585 = void|XHPChild;

  
class CheckCT585<T as CT585> extends BaseCheck {
  const type T = CT585;
  const string NAME = 'CT585';

  <<__LateInit>>
  private CT585 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT585 $c): void {}

  protected static function funcReturn(mixed $c): CT585 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT585>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT585>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT585 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT585> {
    return vec['','hello world',0,1,<my-xhp/>,null];
  }
}
case type CT586 = arraykey|arraykey;

  
class CheckCT586<T as CT586> extends BaseCheck {
  const type T = CT586;
  const string NAME = 'CT586';

  <<__LateInit>>
  private CT586 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT586 $c): void {}

  protected static function funcReturn(mixed $c): CT586 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT586>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT586>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT586 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT586> {
    return vec['','hello world',0,1];
  }
}
case type CT587 = bool|arraykey;

  
class CheckCT587<T as CT587> extends BaseCheck {
  const type T = CT587;
  const string NAME = 'CT587';

  <<__LateInit>>
  private CT587 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT587 $c): void {}

  protected static function funcReturn(mixed $c): CT587 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT587>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT587>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT587 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT587> {
    return vec['','hello world',0,1,false,true];
  }
}
case type CT588 = dict<arraykey, mixed>|arraykey;

  
class CheckCT588<T as CT588> extends BaseCheck {
  const type T = CT588;
  const string NAME = 'CT588';

  <<__LateInit>>
  private CT588 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT588 $c): void {}

  protected static function funcReturn(mixed $c): CT588 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT588>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT588>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT588 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT588> {
    return vec['','hello world',0,1,dict[]];
  }
}
case type CT589 = dynamic|arraykey;

  
class CheckCT589<T as CT589> extends BaseCheck {
  const type T = CT589;
  const string NAME = 'CT589';

  <<__LateInit>>
  private CT589 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT589 $c): void {}

  protected static function funcReturn(mixed $c): CT589 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT589>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT589>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT589 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT589> {
    return vec['','hello world',0,1,false,null,shape('x' => 10),shape(),true];
  }
}
case type CT590 = float|arraykey;

  
class CheckCT590<T as CT590> extends BaseCheck {
  const type T = CT590;
  const string NAME = 'CT590';

  <<__LateInit>>
  private CT590 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT590 $c): void {}

  protected static function funcReturn(mixed $c): CT590 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT590>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT590>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT590 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT590> {
    return vec['','hello world',0,0.0,1,3.14];
  }
}
case type CT591 = int|arraykey;

  
class CheckCT591<T as CT591> extends BaseCheck {
  const type T = CT591;
  const string NAME = 'CT591';

  <<__LateInit>>
  private CT591 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT591 $c): void {}

  protected static function funcReturn(mixed $c): CT591 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT591>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT591>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT591 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT591> {
    return vec['','hello world',0,1];
  }
}
case type CT592 = keyset<arraykey>|arraykey;

  
class CheckCT592<T as CT592> extends BaseCheck {
  const type T = CT592;
  const string NAME = 'CT592';

  <<__LateInit>>
  private CT592 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT592 $c): void {}

  protected static function funcReturn(mixed $c): CT592 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT592>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT592>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT592 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT592> {
    return vec['','hello world',0,1,keyset[]];
  }
}
case type CT593 = mixed|arraykey;

  
class CheckCT593<T as CT593> extends BaseCheck {
  const type T = CT593;
  const string NAME = 'CT593';

  <<__LateInit>>
  private CT593 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT593 $c): void {}

  protected static function funcReturn(mixed $c): CT593 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT593>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT593>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT593 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT593> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT594 = nonnull|arraykey;

  
class CheckCT594<T as CT594> extends BaseCheck {
  const type T = CT594;
  const string NAME = 'CT594';

  <<__LateInit>>
  private CT594 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT594 $c): void {}

  protected static function funcReturn(mixed $c): CT594 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT594>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT594>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT594 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT594> {
    return vec['','hello world',0,1,false,true];
  }
}
case type CT595 = noreturn|arraykey;

  
class CheckCT595<T as CT595> extends BaseCheck {
  const type T = CT595;
  const string NAME = 'CT595';

  <<__LateInit>>
  private CT595 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT595 $c): void {}

  protected static function funcReturn(mixed $c): CT595 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT595>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT595>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT595 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT595> {
    return vec['','hello world',0,1];
  }
}
case type CT596 = nothing|arraykey;

  
class CheckCT596<T as CT596> extends BaseCheck {
  const type T = CT596;
  const string NAME = 'CT596';

  <<__LateInit>>
  private CT596 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT596 $c): void {}

  protected static function funcReturn(mixed $c): CT596 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT596>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT596>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT596 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT596> {
    return vec['','hello world',0,1];
  }
}
case type CT597 = null|arraykey;

  
class CheckCT597<T as CT597> extends BaseCheck {
  const type T = CT597;
  const string NAME = 'CT597';

  <<__LateInit>>
  private CT597 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT597 $c): void {}

  protected static function funcReturn(mixed $c): CT597 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT597>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT597>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT597 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT597> {
    return vec['','hello world',0,1,null];
  }
}
case type CT598 = num|arraykey;

  
class CheckCT598<T as CT598> extends BaseCheck {
  const type T = CT598;
  const string NAME = 'CT598';

  <<__LateInit>>
  private CT598 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT598 $c): void {}

  protected static function funcReturn(mixed $c): CT598 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT598>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT598>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT598 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT598> {
    return vec['','hello world',0,0.0,1,3.14];
  }
}
case type CT599 = resource|arraykey;

  
class CheckCT599<T as CT599> extends BaseCheck {
  const type T = CT599;
  const string NAME = 'CT599';

  <<__LateInit>>
  private CT599 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT599 $c): void {}

  protected static function funcReturn(mixed $c): CT599 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT599>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT599>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT599 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT599> {
    return vec['','hello world',0,1,imagecreate(10, 10)];
  }
}
case type CT600 = shape(...)|arraykey;

  
class CheckCT600<T as CT600> extends BaseCheck {
  const type T = CT600;
  const string NAME = 'CT600';

  <<__LateInit>>
  private CT600 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT600 $c): void {}

  protected static function funcReturn(mixed $c): CT600 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT600>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT600>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT600 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT600> {
    return vec['','hello world',0,1,shape('x' => 10),shape()];
  }
}
case type CT601 = string|arraykey;

  
class CheckCT601<T as CT601> extends BaseCheck {
  const type T = CT601;
  const string NAME = 'CT601';

  <<__LateInit>>
  private CT601 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT601 $c): void {}

  protected static function funcReturn(mixed $c): CT601 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT601>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT601>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT601 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT601> {
    return vec['','hello world',0,1];
  }
}
case type CT602 = vec<mixed>|arraykey;

  
class CheckCT602<T as CT602> extends BaseCheck {
  const type T = CT602;
  const string NAME = 'CT602';

  <<__LateInit>>
  private CT602 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT602 $c): void {}

  protected static function funcReturn(mixed $c): CT602 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT602>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT602>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT602 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT602> {
    return vec['','hello world',0,1,vec[]];
  }
}
case type CT603 = vec_or_dict<string>|arraykey;

  
class CheckCT603<T as CT603> extends BaseCheck {
  const type T = CT603;
  const string NAME = 'CT603';

  <<__LateInit>>
  private CT603 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT603 $c): void {}

  protected static function funcReturn(mixed $c): CT603 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT603>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT603>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT603 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT603> {
    return vec['','hello world',0,1,dict[],vec[]];
  }
}
case type CT604 = void|arraykey;

  
class CheckCT604<T as CT604> extends BaseCheck {
  const type T = CT604;
  const string NAME = 'CT604';

  <<__LateInit>>
  private CT604 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT604 $c): void {}

  protected static function funcReturn(mixed $c): CT604 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT604>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT604>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT604 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT604> {
    return vec['','hello world',0,1,null];
  }
}
case type CT605 = bool|bool;

  
class CheckCT605<T as CT605> extends BaseCheck {
  const type T = CT605;
  const string NAME = 'CT605';

  <<__LateInit>>
  private CT605 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT605 $c): void {}

  protected static function funcReturn(mixed $c): CT605 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT605>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT605>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT605 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT605> {
    return vec[false,true];
  }
}
case type CT606 = dict<arraykey, mixed>|bool;

  
class CheckCT606<T as CT606> extends BaseCheck {
  const type T = CT606;
  const string NAME = 'CT606';

  <<__LateInit>>
  private CT606 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT606 $c): void {}

  protected static function funcReturn(mixed $c): CT606 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT606>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT606>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT606 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT606> {
    return vec[dict[],false,true];
  }
}
case type CT607 = dynamic|bool;

  
class CheckCT607<T as CT607> extends BaseCheck {
  const type T = CT607;
  const string NAME = 'CT607';

  <<__LateInit>>
  private CT607 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT607 $c): void {}

  protected static function funcReturn(mixed $c): CT607 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT607>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT607>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT607 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT607> {
    return vec[false,null,shape('x' => 10),shape(),true];
  }
}
case type CT608 = float|bool;

  
class CheckCT608<T as CT608> extends BaseCheck {
  const type T = CT608;
  const string NAME = 'CT608';

  <<__LateInit>>
  private CT608 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT608 $c): void {}

  protected static function funcReturn(mixed $c): CT608 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT608>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT608>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT608 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT608> {
    return vec[0.0,3.14,false,true];
  }
}
case type CT609 = int|bool;

  
class CheckCT609<T as CT609> extends BaseCheck {
  const type T = CT609;
  const string NAME = 'CT609';

  <<__LateInit>>
  private CT609 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT609 $c): void {}

  protected static function funcReturn(mixed $c): CT609 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT609>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT609>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT609 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT609> {
    return vec[0,1,false,true];
  }
}
case type CT610 = keyset<arraykey>|bool;

  
class CheckCT610<T as CT610> extends BaseCheck {
  const type T = CT610;
  const string NAME = 'CT610';

  <<__LateInit>>
  private CT610 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT610 $c): void {}

  protected static function funcReturn(mixed $c): CT610 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT610>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT610>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT610 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT610> {
    return vec[false,keyset[],true];
  }
}
case type CT611 = mixed|bool;

  
class CheckCT611<T as CT611> extends BaseCheck {
  const type T = CT611;
  const string NAME = 'CT611';

  <<__LateInit>>
  private CT611 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT611 $c): void {}

  protected static function funcReturn(mixed $c): CT611 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT611>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT611>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT611 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT611> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT612 = nonnull|bool;

  
class CheckCT612<T as CT612> extends BaseCheck {
  const type T = CT612;
  const string NAME = 'CT612';

  <<__LateInit>>
  private CT612 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT612 $c): void {}

  protected static function funcReturn(mixed $c): CT612 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT612>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT612>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT612 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT612> {
    return vec['','hello world',0,1,false,true];
  }
}
case type CT613 = noreturn|bool;

  
class CheckCT613<T as CT613> extends BaseCheck {
  const type T = CT613;
  const string NAME = 'CT613';

  <<__LateInit>>
  private CT613 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT613 $c): void {}

  protected static function funcReturn(mixed $c): CT613 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT613>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT613>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT613 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT613> {
    return vec[false,true];
  }
}
case type CT614 = nothing|bool;

  
class CheckCT614<T as CT614> extends BaseCheck {
  const type T = CT614;
  const string NAME = 'CT614';

  <<__LateInit>>
  private CT614 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT614 $c): void {}

  protected static function funcReturn(mixed $c): CT614 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT614>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT614>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT614 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT614> {
    return vec[false,true];
  }
}
case type CT615 = null|bool;

  
class CheckCT615<T as CT615> extends BaseCheck {
  const type T = CT615;
  const string NAME = 'CT615';

  <<__LateInit>>
  private CT615 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT615 $c): void {}

  protected static function funcReturn(mixed $c): CT615 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT615>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT615>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT615 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT615> {
    return vec[false,null,true];
  }
}
case type CT616 = num|bool;

  
class CheckCT616<T as CT616> extends BaseCheck {
  const type T = CT616;
  const string NAME = 'CT616';

  <<__LateInit>>
  private CT616 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT616 $c): void {}

  protected static function funcReturn(mixed $c): CT616 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT616>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT616>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT616 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT616> {
    return vec[0,0.0,1,3.14,false,true];
  }
}
case type CT617 = resource|bool;

  
class CheckCT617<T as CT617> extends BaseCheck {
  const type T = CT617;
  const string NAME = 'CT617';

  <<__LateInit>>
  private CT617 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT617 $c): void {}

  protected static function funcReturn(mixed $c): CT617 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT617>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT617>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT617 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT617> {
    return vec[false,imagecreate(10, 10),true];
  }
}
case type CT618 = shape(...)|bool;

  
class CheckCT618<T as CT618> extends BaseCheck {
  const type T = CT618;
  const string NAME = 'CT618';

  <<__LateInit>>
  private CT618 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT618 $c): void {}

  protected static function funcReturn(mixed $c): CT618 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT618>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT618>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT618 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT618> {
    return vec[false,shape('x' => 10),shape(),true];
  }
}
case type CT619 = string|bool;

  
class CheckCT619<T as CT619> extends BaseCheck {
  const type T = CT619;
  const string NAME = 'CT619';

  <<__LateInit>>
  private CT619 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT619 $c): void {}

  protected static function funcReturn(mixed $c): CT619 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT619>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT619>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT619 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT619> {
    return vec['','hello world',false,true];
  }
}
case type CT620 = vec<mixed>|bool;

  
class CheckCT620<T as CT620> extends BaseCheck {
  const type T = CT620;
  const string NAME = 'CT620';

  <<__LateInit>>
  private CT620 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT620 $c): void {}

  protected static function funcReturn(mixed $c): CT620 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT620>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT620>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT620 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT620> {
    return vec[false,true,vec[]];
  }
}
case type CT621 = vec_or_dict<string>|bool;

  
class CheckCT621<T as CT621> extends BaseCheck {
  const type T = CT621;
  const string NAME = 'CT621';

  <<__LateInit>>
  private CT621 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT621 $c): void {}

  protected static function funcReturn(mixed $c): CT621 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT621>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT621>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT621 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT621> {
    return vec[dict[],false,true,vec[]];
  }
}
case type CT622 = void|bool;

  
class CheckCT622<T as CT622> extends BaseCheck {
  const type T = CT622;
  const string NAME = 'CT622';

  <<__LateInit>>
  private CT622 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT622 $c): void {}

  protected static function funcReturn(mixed $c): CT622 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT622>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT622>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT622 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT622> {
    return vec[false,null,true];
  }
}
case type CT623 = dict<arraykey, mixed>|dict<arraykey, mixed>;

  
class CheckCT623<T as CT623> extends BaseCheck {
  const type T = CT623;
  const string NAME = 'CT623';

  <<__LateInit>>
  private CT623 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT623 $c): void {}

  protected static function funcReturn(mixed $c): CT623 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT623>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT623>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT623 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT623> {
    return vec[dict[]];
  }
}
case type CT624 = dynamic|dict<arraykey, mixed>;

  
class CheckCT624<T as CT624> extends BaseCheck {
  const type T = CT624;
  const string NAME = 'CT624';

  <<__LateInit>>
  private CT624 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT624 $c): void {}

  protected static function funcReturn(mixed $c): CT624 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT624>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT624>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT624 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT624> {
    return vec[dict[],false,null,shape('x' => 10),shape(),true];
  }
}
case type CT625 = float|dict<arraykey, mixed>;

  
class CheckCT625<T as CT625> extends BaseCheck {
  const type T = CT625;
  const string NAME = 'CT625';

  <<__LateInit>>
  private CT625 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT625 $c): void {}

  protected static function funcReturn(mixed $c): CT625 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT625>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT625>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT625 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT625> {
    return vec[0.0,3.14,dict[]];
  }
}
case type CT626 = int|dict<arraykey, mixed>;

  
class CheckCT626<T as CT626> extends BaseCheck {
  const type T = CT626;
  const string NAME = 'CT626';

  <<__LateInit>>
  private CT626 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT626 $c): void {}

  protected static function funcReturn(mixed $c): CT626 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT626>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT626>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT626 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT626> {
    return vec[0,1,dict[]];
  }
}
case type CT627 = keyset<arraykey>|dict<arraykey, mixed>;

  
class CheckCT627<T as CT627> extends BaseCheck {
  const type T = CT627;
  const string NAME = 'CT627';

  <<__LateInit>>
  private CT627 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT627 $c): void {}

  protected static function funcReturn(mixed $c): CT627 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT627>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT627>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT627 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT627> {
    return vec[dict[],keyset[]];
  }
}
case type CT628 = mixed|dict<arraykey, mixed>;

  
class CheckCT628<T as CT628> extends BaseCheck {
  const type T = CT628;
  const string NAME = 'CT628';

  <<__LateInit>>
  private CT628 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT628 $c): void {}

  protected static function funcReturn(mixed $c): CT628 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT628>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT628>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT628 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT628> {
    return vec['','hello world',0,1,dict[],false,null,true];
  }
}
case type CT629 = nonnull|dict<arraykey, mixed>;

  
class CheckCT629<T as CT629> extends BaseCheck {
  const type T = CT629;
  const string NAME = 'CT629';

  <<__LateInit>>
  private CT629 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT629 $c): void {}

  protected static function funcReturn(mixed $c): CT629 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT629>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT629>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT629 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT629> {
    return vec['','hello world',0,1,dict[],false,true];
  }
}
case type CT630 = noreturn|dict<arraykey, mixed>;

  
class CheckCT630<T as CT630> extends BaseCheck {
  const type T = CT630;
  const string NAME = 'CT630';

  <<__LateInit>>
  private CT630 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT630 $c): void {}

  protected static function funcReturn(mixed $c): CT630 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT630>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT630>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT630 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT630> {
    return vec[dict[]];
  }
}
case type CT631 = nothing|dict<arraykey, mixed>;

  
class CheckCT631<T as CT631> extends BaseCheck {
  const type T = CT631;
  const string NAME = 'CT631';

  <<__LateInit>>
  private CT631 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT631 $c): void {}

  protected static function funcReturn(mixed $c): CT631 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT631>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT631>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT631 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT631> {
    return vec[dict[]];
  }
}
case type CT632 = null|dict<arraykey, mixed>;

  
class CheckCT632<T as CT632> extends BaseCheck {
  const type T = CT632;
  const string NAME = 'CT632';

  <<__LateInit>>
  private CT632 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT632 $c): void {}

  protected static function funcReturn(mixed $c): CT632 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT632>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT632>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT632 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT632> {
    return vec[dict[],null];
  }
}
case type CT633 = num|dict<arraykey, mixed>;

  
class CheckCT633<T as CT633> extends BaseCheck {
  const type T = CT633;
  const string NAME = 'CT633';

  <<__LateInit>>
  private CT633 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT633 $c): void {}

  protected static function funcReturn(mixed $c): CT633 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT633>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT633>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT633 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT633> {
    return vec[0,0.0,1,3.14,dict[]];
  }
}
case type CT634 = resource|dict<arraykey, mixed>;

  
class CheckCT634<T as CT634> extends BaseCheck {
  const type T = CT634;
  const string NAME = 'CT634';

  <<__LateInit>>
  private CT634 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT634 $c): void {}

  protected static function funcReturn(mixed $c): CT634 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT634>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT634>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT634 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT634> {
    return vec[dict[],imagecreate(10, 10)];
  }
}
case type CT635 = shape(...)|dict<arraykey, mixed>;

  
class CheckCT635<T as CT635> extends BaseCheck {
  const type T = CT635;
  const string NAME = 'CT635';

  <<__LateInit>>
  private CT635 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT635 $c): void {}

  protected static function funcReturn(mixed $c): CT635 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT635>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT635>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT635 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT635> {
    return vec[dict[],shape('x' => 10),shape()];
  }
}
case type CT636 = string|dict<arraykey, mixed>;

  
class CheckCT636<T as CT636> extends BaseCheck {
  const type T = CT636;
  const string NAME = 'CT636';

  <<__LateInit>>
  private CT636 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT636 $c): void {}

  protected static function funcReturn(mixed $c): CT636 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT636>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT636>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT636 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT636> {
    return vec['','hello world',dict[]];
  }
}
case type CT637 = vec<mixed>|dict<arraykey, mixed>;

  
class CheckCT637<T as CT637> extends BaseCheck {
  const type T = CT637;
  const string NAME = 'CT637';

  <<__LateInit>>
  private CT637 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT637 $c): void {}

  protected static function funcReturn(mixed $c): CT637 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT637>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT637>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT637 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT637> {
    return vec[dict[],vec[]];
  }
}
case type CT638 = vec_or_dict<string>|dict<arraykey, mixed>;

  
class CheckCT638<T as CT638> extends BaseCheck {
  const type T = CT638;
  const string NAME = 'CT638';

  <<__LateInit>>
  private CT638 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT638 $c): void {}

  protected static function funcReturn(mixed $c): CT638 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT638>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT638>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT638 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT638> {
    return vec[dict[],vec[]];
  }
}
case type CT639 = void|dict<arraykey, mixed>;

  
class CheckCT639<T as CT639> extends BaseCheck {
  const type T = CT639;
  const string NAME = 'CT639';

  <<__LateInit>>
  private CT639 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT639 $c): void {}

  protected static function funcReturn(mixed $c): CT639 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT639>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT639>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT639 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT639> {
    return vec[dict[],null];
  }
}
case type CT640 = dynamic|dynamic;

  
class CheckCT640<T as CT640> extends BaseCheck {
  const type T = CT640;
  const string NAME = 'CT640';

  <<__LateInit>>
  private CT640 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT640 $c): void {}

  protected static function funcReturn(mixed $c): CT640 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT640>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT640>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT640 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT640> {
    return vec[false,null,shape('x' => 10),shape(),true];
  }
}
case type CT641 = float|dynamic;

  
class CheckCT641<T as CT641> extends BaseCheck {
  const type T = CT641;
  const string NAME = 'CT641';

  <<__LateInit>>
  private CT641 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT641 $c): void {}

  protected static function funcReturn(mixed $c): CT641 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT641>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT641>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT641 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT641> {
    return vec[0.0,3.14,false,null,shape('x' => 10),shape(),true];
  }
}
case type CT642 = int|dynamic;

  
class CheckCT642<T as CT642> extends BaseCheck {
  const type T = CT642;
  const string NAME = 'CT642';

  <<__LateInit>>
  private CT642 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT642 $c): void {}

  protected static function funcReturn(mixed $c): CT642 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT642>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT642>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT642 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT642> {
    return vec[0,1,false,null,shape('x' => 10),shape(),true];
  }
}
case type CT643 = keyset<arraykey>|dynamic;

  
class CheckCT643<T as CT643> extends BaseCheck {
  const type T = CT643;
  const string NAME = 'CT643';

  <<__LateInit>>
  private CT643 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT643 $c): void {}

  protected static function funcReturn(mixed $c): CT643 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT643>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT643>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT643 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT643> {
    return vec[false,keyset[],null,shape('x' => 10),shape(),true];
  }
}
case type CT644 = mixed|dynamic;

  
class CheckCT644<T as CT644> extends BaseCheck {
  const type T = CT644;
  const string NAME = 'CT644';

  <<__LateInit>>
  private CT644 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT644 $c): void {}

  protected static function funcReturn(mixed $c): CT644 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT644>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT644>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT644 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT644> {
    return vec['','hello world',0,1,false,null,shape('x' => 10),shape(),true];
  }
}
case type CT645 = nonnull|dynamic;

  
class CheckCT645<T as CT645> extends BaseCheck {
  const type T = CT645;
  const string NAME = 'CT645';

  <<__LateInit>>
  private CT645 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT645 $c): void {}

  protected static function funcReturn(mixed $c): CT645 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT645>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT645>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT645 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT645> {
    return vec['','hello world',0,1,false,null,shape('x' => 10),shape(),true];
  }
}
case type CT646 = noreturn|dynamic;

  
class CheckCT646<T as CT646> extends BaseCheck {
  const type T = CT646;
  const string NAME = 'CT646';

  <<__LateInit>>
  private CT646 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT646 $c): void {}

  protected static function funcReturn(mixed $c): CT646 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT646>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT646>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT646 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT646> {
    return vec[false,null,shape('x' => 10),shape(),true];
  }
}
case type CT647 = nothing|dynamic;

  
class CheckCT647<T as CT647> extends BaseCheck {
  const type T = CT647;
  const string NAME = 'CT647';

  <<__LateInit>>
  private CT647 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT647 $c): void {}

  protected static function funcReturn(mixed $c): CT647 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT647>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT647>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT647 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT647> {
    return vec[false,null,shape('x' => 10),shape(),true];
  }
}
case type CT648 = null|dynamic;

  
class CheckCT648<T as CT648> extends BaseCheck {
  const type T = CT648;
  const string NAME = 'CT648';

  <<__LateInit>>
  private CT648 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT648 $c): void {}

  protected static function funcReturn(mixed $c): CT648 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT648>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT648>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT648 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT648> {
    return vec[false,null,shape('x' => 10),shape(),true];
  }
}
case type CT649 = num|dynamic;

  
class CheckCT649<T as CT649> extends BaseCheck {
  const type T = CT649;
  const string NAME = 'CT649';

  <<__LateInit>>
  private CT649 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT649 $c): void {}

  protected static function funcReturn(mixed $c): CT649 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT649>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT649>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT649 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT649> {
    return vec[0,0.0,1,3.14,false,null,shape('x' => 10),shape(),true];
  }
}
case type CT650 = resource|dynamic;

  
class CheckCT650<T as CT650> extends BaseCheck {
  const type T = CT650;
  const string NAME = 'CT650';

  <<__LateInit>>
  private CT650 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT650 $c): void {}

  protected static function funcReturn(mixed $c): CT650 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT650>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT650>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT650 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT650> {
    return vec[false,imagecreate(10, 10),null,shape('x' => 10),shape(),true];
  }
}
case type CT651 = shape(...)|dynamic;

  
class CheckCT651<T as CT651> extends BaseCheck {
  const type T = CT651;
  const string NAME = 'CT651';

  <<__LateInit>>
  private CT651 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT651 $c): void {}

  protected static function funcReturn(mixed $c): CT651 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT651>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT651>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT651 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT651> {
    return vec[false,null,shape('x' => 10),shape(),true];
  }
}
case type CT652 = string|dynamic;

  
class CheckCT652<T as CT652> extends BaseCheck {
  const type T = CT652;
  const string NAME = 'CT652';

  <<__LateInit>>
  private CT652 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT652 $c): void {}

  protected static function funcReturn(mixed $c): CT652 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT652>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT652>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT652 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT652> {
    return vec['','hello world',false,null,shape('x' => 10),shape(),true];
  }
}
case type CT653 = vec<mixed>|dynamic;

  
class CheckCT653<T as CT653> extends BaseCheck {
  const type T = CT653;
  const string NAME = 'CT653';

  <<__LateInit>>
  private CT653 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT653 $c): void {}

  protected static function funcReturn(mixed $c): CT653 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT653>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT653>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT653 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT653> {
    return vec[false,null,shape('x' => 10),shape(),true,vec[]];
  }
}
case type CT654 = vec_or_dict<string>|dynamic;

  
class CheckCT654<T as CT654> extends BaseCheck {
  const type T = CT654;
  const string NAME = 'CT654';

  <<__LateInit>>
  private CT654 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT654 $c): void {}

  protected static function funcReturn(mixed $c): CT654 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT654>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT654>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT654 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT654> {
    return vec[dict[],false,null,shape('x' => 10),shape(),true,vec[]];
  }
}
case type CT655 = void|dynamic;

  
class CheckCT655<T as CT655> extends BaseCheck {
  const type T = CT655;
  const string NAME = 'CT655';

  <<__LateInit>>
  private CT655 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT655 $c): void {}

  protected static function funcReturn(mixed $c): CT655 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT655>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT655>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT655 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT655> {
    return vec[false,null,shape('x' => 10),shape(),true];
  }
}
case type CT656 = float|float;

  
class CheckCT656<T as CT656> extends BaseCheck {
  const type T = CT656;
  const string NAME = 'CT656';

  <<__LateInit>>
  private CT656 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT656 $c): void {}

  protected static function funcReturn(mixed $c): CT656 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT656>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT656>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT656 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT656> {
    return vec[0.0,3.14];
  }
}
case type CT657 = int|float;

  
class CheckCT657<T as CT657> extends BaseCheck {
  const type T = CT657;
  const string NAME = 'CT657';

  <<__LateInit>>
  private CT657 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT657 $c): void {}

  protected static function funcReturn(mixed $c): CT657 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT657>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT657>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT657 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT657> {
    return vec[0,0.0,1,3.14];
  }
}
case type CT658 = keyset<arraykey>|float;

  
class CheckCT658<T as CT658> extends BaseCheck {
  const type T = CT658;
  const string NAME = 'CT658';

  <<__LateInit>>
  private CT658 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT658 $c): void {}

  protected static function funcReturn(mixed $c): CT658 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT658>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT658>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT658 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT658> {
    return vec[0.0,3.14,keyset[]];
  }
}
case type CT659 = mixed|float;

  
class CheckCT659<T as CT659> extends BaseCheck {
  const type T = CT659;
  const string NAME = 'CT659';

  <<__LateInit>>
  private CT659 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT659 $c): void {}

  protected static function funcReturn(mixed $c): CT659 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT659>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT659>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT659 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT659> {
    return vec['','hello world',0,0.0,1,3.14,false,null,true];
  }
}
case type CT660 = nonnull|float;

  
class CheckCT660<T as CT660> extends BaseCheck {
  const type T = CT660;
  const string NAME = 'CT660';

  <<__LateInit>>
  private CT660 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT660 $c): void {}

  protected static function funcReturn(mixed $c): CT660 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT660>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT660>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT660 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT660> {
    return vec['','hello world',0,0.0,1,3.14,false,true];
  }
}
case type CT661 = noreturn|float;

  
class CheckCT661<T as CT661> extends BaseCheck {
  const type T = CT661;
  const string NAME = 'CT661';

  <<__LateInit>>
  private CT661 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT661 $c): void {}

  protected static function funcReturn(mixed $c): CT661 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT661>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT661>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT661 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT661> {
    return vec[0.0,3.14];
  }
}
case type CT662 = nothing|float;

  
class CheckCT662<T as CT662> extends BaseCheck {
  const type T = CT662;
  const string NAME = 'CT662';

  <<__LateInit>>
  private CT662 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT662 $c): void {}

  protected static function funcReturn(mixed $c): CT662 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT662>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT662>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT662 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT662> {
    return vec[0.0,3.14];
  }
}
case type CT663 = null|float;

  
class CheckCT663<T as CT663> extends BaseCheck {
  const type T = CT663;
  const string NAME = 'CT663';

  <<__LateInit>>
  private CT663 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT663 $c): void {}

  protected static function funcReturn(mixed $c): CT663 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT663>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT663>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT663 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT663> {
    return vec[0.0,3.14,null];
  }
}
case type CT664 = num|float;

  
class CheckCT664<T as CT664> extends BaseCheck {
  const type T = CT664;
  const string NAME = 'CT664';

  <<__LateInit>>
  private CT664 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT664 $c): void {}

  protected static function funcReturn(mixed $c): CT664 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT664>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT664>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT664 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT664> {
    return vec[0,0.0,1,3.14];
  }
}
case type CT665 = resource|float;

  
class CheckCT665<T as CT665> extends BaseCheck {
  const type T = CT665;
  const string NAME = 'CT665';

  <<__LateInit>>
  private CT665 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT665 $c): void {}

  protected static function funcReturn(mixed $c): CT665 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT665>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT665>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT665 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT665> {
    return vec[0.0,3.14,imagecreate(10, 10)];
  }
}
case type CT666 = shape(...)|float;

  
class CheckCT666<T as CT666> extends BaseCheck {
  const type T = CT666;
  const string NAME = 'CT666';

  <<__LateInit>>
  private CT666 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT666 $c): void {}

  protected static function funcReturn(mixed $c): CT666 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT666>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT666>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT666 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT666> {
    return vec[0.0,3.14,shape('x' => 10),shape()];
  }
}
case type CT667 = string|float;

  
class CheckCT667<T as CT667> extends BaseCheck {
  const type T = CT667;
  const string NAME = 'CT667';

  <<__LateInit>>
  private CT667 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT667 $c): void {}

  protected static function funcReturn(mixed $c): CT667 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT667>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT667>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT667 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT667> {
    return vec['','hello world',0.0,3.14];
  }
}
case type CT668 = vec<mixed>|float;

  
class CheckCT668<T as CT668> extends BaseCheck {
  const type T = CT668;
  const string NAME = 'CT668';

  <<__LateInit>>
  private CT668 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT668 $c): void {}

  protected static function funcReturn(mixed $c): CT668 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT668>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT668>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT668 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT668> {
    return vec[0.0,3.14,vec[]];
  }
}
case type CT669 = vec_or_dict<string>|float;

  
class CheckCT669<T as CT669> extends BaseCheck {
  const type T = CT669;
  const string NAME = 'CT669';

  <<__LateInit>>
  private CT669 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT669 $c): void {}

  protected static function funcReturn(mixed $c): CT669 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT669>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT669>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT669 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT669> {
    return vec[0.0,3.14,dict[],vec[]];
  }
}
case type CT670 = void|float;

  
class CheckCT670<T as CT670> extends BaseCheck {
  const type T = CT670;
  const string NAME = 'CT670';

  <<__LateInit>>
  private CT670 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT670 $c): void {}

  protected static function funcReturn(mixed $c): CT670 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT670>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT670>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT670 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT670> {
    return vec[0.0,3.14,null];
  }
}
case type CT671 = int|int;

  
class CheckCT671<T as CT671> extends BaseCheck {
  const type T = CT671;
  const string NAME = 'CT671';

  <<__LateInit>>
  private CT671 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT671 $c): void {}

  protected static function funcReturn(mixed $c): CT671 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT671>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT671>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT671 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT671> {
    return vec[0,1];
  }
}
case type CT672 = keyset<arraykey>|int;

  
class CheckCT672<T as CT672> extends BaseCheck {
  const type T = CT672;
  const string NAME = 'CT672';

  <<__LateInit>>
  private CT672 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT672 $c): void {}

  protected static function funcReturn(mixed $c): CT672 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT672>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT672>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT672 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT672> {
    return vec[0,1,keyset[]];
  }
}
case type CT673 = mixed|int;

  
class CheckCT673<T as CT673> extends BaseCheck {
  const type T = CT673;
  const string NAME = 'CT673';

  <<__LateInit>>
  private CT673 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT673 $c): void {}

  protected static function funcReturn(mixed $c): CT673 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT673>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT673>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT673 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT673> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT674 = nonnull|int;

  
class CheckCT674<T as CT674> extends BaseCheck {
  const type T = CT674;
  const string NAME = 'CT674';

  <<__LateInit>>
  private CT674 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT674 $c): void {}

  protected static function funcReturn(mixed $c): CT674 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT674>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT674>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT674 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT674> {
    return vec['','hello world',0,1,false,true];
  }
}
case type CT675 = noreturn|int;

  
class CheckCT675<T as CT675> extends BaseCheck {
  const type T = CT675;
  const string NAME = 'CT675';

  <<__LateInit>>
  private CT675 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT675 $c): void {}

  protected static function funcReturn(mixed $c): CT675 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT675>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT675>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT675 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT675> {
    return vec[0,1];
  }
}
case type CT676 = nothing|int;

  
class CheckCT676<T as CT676> extends BaseCheck {
  const type T = CT676;
  const string NAME = 'CT676';

  <<__LateInit>>
  private CT676 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT676 $c): void {}

  protected static function funcReturn(mixed $c): CT676 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT676>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT676>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT676 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT676> {
    return vec[0,1];
  }
}
case type CT677 = null|int;

  
class CheckCT677<T as CT677> extends BaseCheck {
  const type T = CT677;
  const string NAME = 'CT677';

  <<__LateInit>>
  private CT677 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT677 $c): void {}

  protected static function funcReturn(mixed $c): CT677 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT677>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT677>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT677 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT677> {
    return vec[0,1,null];
  }
}
case type CT678 = num|int;

  
class CheckCT678<T as CT678> extends BaseCheck {
  const type T = CT678;
  const string NAME = 'CT678';

  <<__LateInit>>
  private CT678 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT678 $c): void {}

  protected static function funcReturn(mixed $c): CT678 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT678>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT678>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT678 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT678> {
    return vec[0,0.0,1,3.14];
  }
}
case type CT679 = resource|int;

  
class CheckCT679<T as CT679> extends BaseCheck {
  const type T = CT679;
  const string NAME = 'CT679';

  <<__LateInit>>
  private CT679 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT679 $c): void {}

  protected static function funcReturn(mixed $c): CT679 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT679>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT679>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT679 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT679> {
    return vec[0,1,imagecreate(10, 10)];
  }
}
case type CT680 = shape(...)|int;

  
class CheckCT680<T as CT680> extends BaseCheck {
  const type T = CT680;
  const string NAME = 'CT680';

  <<__LateInit>>
  private CT680 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT680 $c): void {}

  protected static function funcReturn(mixed $c): CT680 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT680>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT680>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT680 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT680> {
    return vec[0,1,shape('x' => 10),shape()];
  }
}
case type CT681 = string|int;

  
class CheckCT681<T as CT681> extends BaseCheck {
  const type T = CT681;
  const string NAME = 'CT681';

  <<__LateInit>>
  private CT681 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT681 $c): void {}

  protected static function funcReturn(mixed $c): CT681 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT681>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT681>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT681 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT681> {
    return vec['','hello world',0,1];
  }
}
case type CT682 = vec<mixed>|int;

  
class CheckCT682<T as CT682> extends BaseCheck {
  const type T = CT682;
  const string NAME = 'CT682';

  <<__LateInit>>
  private CT682 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT682 $c): void {}

  protected static function funcReturn(mixed $c): CT682 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT682>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT682>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT682 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT682> {
    return vec[0,1,vec[]];
  }
}
case type CT683 = vec_or_dict<string>|int;

  
class CheckCT683<T as CT683> extends BaseCheck {
  const type T = CT683;
  const string NAME = 'CT683';

  <<__LateInit>>
  private CT683 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT683 $c): void {}

  protected static function funcReturn(mixed $c): CT683 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT683>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT683>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT683 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT683> {
    return vec[0,1,dict[],vec[]];
  }
}
case type CT684 = void|int;

  
class CheckCT684<T as CT684> extends BaseCheck {
  const type T = CT684;
  const string NAME = 'CT684';

  <<__LateInit>>
  private CT684 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT684 $c): void {}

  protected static function funcReturn(mixed $c): CT684 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT684>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT684>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT684 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT684> {
    return vec[0,1,null];
  }
}
case type CT685 = keyset<arraykey>|keyset<arraykey>;

  
class CheckCT685<T as CT685> extends BaseCheck {
  const type T = CT685;
  const string NAME = 'CT685';

  <<__LateInit>>
  private CT685 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT685 $c): void {}

  protected static function funcReturn(mixed $c): CT685 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT685>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT685>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT685 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT685> {
    return vec[keyset[]];
  }
}
case type CT686 = mixed|keyset<arraykey>;

  
class CheckCT686<T as CT686> extends BaseCheck {
  const type T = CT686;
  const string NAME = 'CT686';

  <<__LateInit>>
  private CT686 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT686 $c): void {}

  protected static function funcReturn(mixed $c): CT686 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT686>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT686>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT686 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT686> {
    return vec['','hello world',0,1,false,keyset[],null,true];
  }
}
case type CT687 = nonnull|keyset<arraykey>;

  
class CheckCT687<T as CT687> extends BaseCheck {
  const type T = CT687;
  const string NAME = 'CT687';

  <<__LateInit>>
  private CT687 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT687 $c): void {}

  protected static function funcReturn(mixed $c): CT687 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT687>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT687>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT687 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT687> {
    return vec['','hello world',0,1,false,keyset[],true];
  }
}
case type CT688 = noreturn|keyset<arraykey>;

  
class CheckCT688<T as CT688> extends BaseCheck {
  const type T = CT688;
  const string NAME = 'CT688';

  <<__LateInit>>
  private CT688 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT688 $c): void {}

  protected static function funcReturn(mixed $c): CT688 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT688>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT688>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT688 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT688> {
    return vec[keyset[]];
  }
}
case type CT689 = nothing|keyset<arraykey>;

  
class CheckCT689<T as CT689> extends BaseCheck {
  const type T = CT689;
  const string NAME = 'CT689';

  <<__LateInit>>
  private CT689 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT689 $c): void {}

  protected static function funcReturn(mixed $c): CT689 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT689>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT689>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT689 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT689> {
    return vec[keyset[]];
  }
}
case type CT690 = null|keyset<arraykey>;

  
class CheckCT690<T as CT690> extends BaseCheck {
  const type T = CT690;
  const string NAME = 'CT690';

  <<__LateInit>>
  private CT690 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT690 $c): void {}

  protected static function funcReturn(mixed $c): CT690 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT690>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT690>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT690 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT690> {
    return vec[keyset[],null];
  }
}
case type CT691 = num|keyset<arraykey>;

  
class CheckCT691<T as CT691> extends BaseCheck {
  const type T = CT691;
  const string NAME = 'CT691';

  <<__LateInit>>
  private CT691 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT691 $c): void {}

  protected static function funcReturn(mixed $c): CT691 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT691>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT691>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT691 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT691> {
    return vec[0,0.0,1,3.14,keyset[]];
  }
}
case type CT692 = resource|keyset<arraykey>;

  
class CheckCT692<T as CT692> extends BaseCheck {
  const type T = CT692;
  const string NAME = 'CT692';

  <<__LateInit>>
  private CT692 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT692 $c): void {}

  protected static function funcReturn(mixed $c): CT692 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT692>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT692>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT692 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT692> {
    return vec[imagecreate(10, 10),keyset[]];
  }
}
case type CT693 = shape(...)|keyset<arraykey>;

  
class CheckCT693<T as CT693> extends BaseCheck {
  const type T = CT693;
  const string NAME = 'CT693';

  <<__LateInit>>
  private CT693 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT693 $c): void {}

  protected static function funcReturn(mixed $c): CT693 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT693>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT693>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT693 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT693> {
    return vec[keyset[],shape('x' => 10),shape()];
  }
}
case type CT694 = string|keyset<arraykey>;

  
class CheckCT694<T as CT694> extends BaseCheck {
  const type T = CT694;
  const string NAME = 'CT694';

  <<__LateInit>>
  private CT694 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT694 $c): void {}

  protected static function funcReturn(mixed $c): CT694 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT694>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT694>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT694 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT694> {
    return vec['','hello world',keyset[]];
  }
}
case type CT695 = vec<mixed>|keyset<arraykey>;

  
class CheckCT695<T as CT695> extends BaseCheck {
  const type T = CT695;
  const string NAME = 'CT695';

  <<__LateInit>>
  private CT695 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT695 $c): void {}

  protected static function funcReturn(mixed $c): CT695 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT695>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT695>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT695 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT695> {
    return vec[keyset[],vec[]];
  }
}
case type CT696 = vec_or_dict<string>|keyset<arraykey>;

  
class CheckCT696<T as CT696> extends BaseCheck {
  const type T = CT696;
  const string NAME = 'CT696';

  <<__LateInit>>
  private CT696 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT696 $c): void {}

  protected static function funcReturn(mixed $c): CT696 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT696>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT696>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT696 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT696> {
    return vec[dict[],keyset[],vec[]];
  }
}
case type CT697 = void|keyset<arraykey>;

  
class CheckCT697<T as CT697> extends BaseCheck {
  const type T = CT697;
  const string NAME = 'CT697';

  <<__LateInit>>
  private CT697 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT697 $c): void {}

  protected static function funcReturn(mixed $c): CT697 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT697>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT697>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT697 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT697> {
    return vec[keyset[],null];
  }
}
case type CT698 = mixed|mixed;

  
class CheckCT698<T as CT698> extends BaseCheck {
  const type T = CT698;
  const string NAME = 'CT698';

  <<__LateInit>>
  private CT698 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT698 $c): void {}

  protected static function funcReturn(mixed $c): CT698 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT698>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT698>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT698 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT698> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT699 = nonnull|mixed;

  
class CheckCT699<T as CT699> extends BaseCheck {
  const type T = CT699;
  const string NAME = 'CT699';

  <<__LateInit>>
  private CT699 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT699 $c): void {}

  protected static function funcReturn(mixed $c): CT699 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT699>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT699>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT699 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT699> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT700 = noreturn|mixed;

  
class CheckCT700<T as CT700> extends BaseCheck {
  const type T = CT700;
  const string NAME = 'CT700';

  <<__LateInit>>
  private CT700 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT700 $c): void {}

  protected static function funcReturn(mixed $c): CT700 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT700>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT700>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT700 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT700> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT701 = nothing|mixed;

  
class CheckCT701<T as CT701> extends BaseCheck {
  const type T = CT701;
  const string NAME = 'CT701';

  <<__LateInit>>
  private CT701 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT701 $c): void {}

  protected static function funcReturn(mixed $c): CT701 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT701>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT701>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT701 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT701> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT702 = null|mixed;

  
class CheckCT702<T as CT702> extends BaseCheck {
  const type T = CT702;
  const string NAME = 'CT702';

  <<__LateInit>>
  private CT702 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT702 $c): void {}

  protected static function funcReturn(mixed $c): CT702 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT702>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT702>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT702 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT702> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT703 = num|mixed;

  
class CheckCT703<T as CT703> extends BaseCheck {
  const type T = CT703;
  const string NAME = 'CT703';

  <<__LateInit>>
  private CT703 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT703 $c): void {}

  protected static function funcReturn(mixed $c): CT703 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT703>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT703>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT703 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT703> {
    return vec['','hello world',0,0.0,1,3.14,false,null,true];
  }
}
case type CT704 = resource|mixed;

  
class CheckCT704<T as CT704> extends BaseCheck {
  const type T = CT704;
  const string NAME = 'CT704';

  <<__LateInit>>
  private CT704 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT704 $c): void {}

  protected static function funcReturn(mixed $c): CT704 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT704>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT704>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT704 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT704> {
    return vec['','hello world',0,1,false,imagecreate(10, 10),null,true];
  }
}
case type CT705 = shape(...)|mixed;

  
class CheckCT705<T as CT705> extends BaseCheck {
  const type T = CT705;
  const string NAME = 'CT705';

  <<__LateInit>>
  private CT705 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT705 $c): void {}

  protected static function funcReturn(mixed $c): CT705 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT705>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT705>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT705 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT705> {
    return vec['','hello world',0,1,false,null,shape('x' => 10),shape(),true];
  }
}
case type CT706 = string|mixed;

  
class CheckCT706<T as CT706> extends BaseCheck {
  const type T = CT706;
  const string NAME = 'CT706';

  <<__LateInit>>
  private CT706 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT706 $c): void {}

  protected static function funcReturn(mixed $c): CT706 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT706>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT706>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT706 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT706> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT707 = vec<mixed>|mixed;

  
class CheckCT707<T as CT707> extends BaseCheck {
  const type T = CT707;
  const string NAME = 'CT707';

  <<__LateInit>>
  private CT707 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT707 $c): void {}

  protected static function funcReturn(mixed $c): CT707 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT707>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT707>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT707 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT707> {
    return vec['','hello world',0,1,false,null,true,vec[]];
  }
}
case type CT708 = vec_or_dict<string>|mixed;

  
class CheckCT708<T as CT708> extends BaseCheck {
  const type T = CT708;
  const string NAME = 'CT708';

  <<__LateInit>>
  private CT708 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT708 $c): void {}

  protected static function funcReturn(mixed $c): CT708 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT708>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT708>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT708 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT708> {
    return vec['','hello world',0,1,dict[],false,null,true,vec[]];
  }
}
case type CT709 = void|mixed;

  
class CheckCT709<T as CT709> extends BaseCheck {
  const type T = CT709;
  const string NAME = 'CT709';

  <<__LateInit>>
  private CT709 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT709 $c): void {}

  protected static function funcReturn(mixed $c): CT709 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT709>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT709>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT709 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT709> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT710 = nonnull|nonnull;

  
class CheckCT710<T as CT710> extends BaseCheck {
  const type T = CT710;
  const string NAME = 'CT710';

  <<__LateInit>>
  private CT710 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT710 $c): void {}

  protected static function funcReturn(mixed $c): CT710 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT710>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT710>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT710 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT710> {
    return vec['','hello world',0,1,false,true];
  }
}
case type CT711 = noreturn|nonnull;

  
class CheckCT711<T as CT711> extends BaseCheck {
  const type T = CT711;
  const string NAME = 'CT711';

  <<__LateInit>>
  private CT711 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT711 $c): void {}

  protected static function funcReturn(mixed $c): CT711 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT711>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT711>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT711 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT711> {
    return vec['','hello world',0,1,false,true];
  }
}
case type CT712 = nothing|nonnull;

  
class CheckCT712<T as CT712> extends BaseCheck {
  const type T = CT712;
  const string NAME = 'CT712';

  <<__LateInit>>
  private CT712 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT712 $c): void {}

  protected static function funcReturn(mixed $c): CT712 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT712>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT712>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT712 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT712> {
    return vec['','hello world',0,1,false,true];
  }
}
case type CT713 = null|nonnull;

  
class CheckCT713<T as CT713> extends BaseCheck {
  const type T = CT713;
  const string NAME = 'CT713';

  <<__LateInit>>
  private CT713 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT713 $c): void {}

  protected static function funcReturn(mixed $c): CT713 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT713>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT713>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT713 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT713> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT714 = num|nonnull;

  
class CheckCT714<T as CT714> extends BaseCheck {
  const type T = CT714;
  const string NAME = 'CT714';

  <<__LateInit>>
  private CT714 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT714 $c): void {}

  protected static function funcReturn(mixed $c): CT714 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT714>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT714>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT714 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT714> {
    return vec['','hello world',0,0.0,1,3.14,false,true];
  }
}
case type CT715 = resource|nonnull;

  
class CheckCT715<T as CT715> extends BaseCheck {
  const type T = CT715;
  const string NAME = 'CT715';

  <<__LateInit>>
  private CT715 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT715 $c): void {}

  protected static function funcReturn(mixed $c): CT715 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT715>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT715>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT715 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT715> {
    return vec['','hello world',0,1,false,imagecreate(10, 10),true];
  }
}
case type CT716 = shape(...)|nonnull;

  
class CheckCT716<T as CT716> extends BaseCheck {
  const type T = CT716;
  const string NAME = 'CT716';

  <<__LateInit>>
  private CT716 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT716 $c): void {}

  protected static function funcReturn(mixed $c): CT716 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT716>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT716>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT716 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT716> {
    return vec['','hello world',0,1,false,shape('x' => 10),shape(),true];
  }
}
case type CT717 = string|nonnull;

  
class CheckCT717<T as CT717> extends BaseCheck {
  const type T = CT717;
  const string NAME = 'CT717';

  <<__LateInit>>
  private CT717 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT717 $c): void {}

  protected static function funcReturn(mixed $c): CT717 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT717>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT717>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT717 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT717> {
    return vec['','hello world',0,1,false,true];
  }
}
case type CT718 = vec<mixed>|nonnull;

  
class CheckCT718<T as CT718> extends BaseCheck {
  const type T = CT718;
  const string NAME = 'CT718';

  <<__LateInit>>
  private CT718 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT718 $c): void {}

  protected static function funcReturn(mixed $c): CT718 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT718>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT718>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT718 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT718> {
    return vec['','hello world',0,1,false,true,vec[]];
  }
}
case type CT719 = vec_or_dict<string>|nonnull;

  
class CheckCT719<T as CT719> extends BaseCheck {
  const type T = CT719;
  const string NAME = 'CT719';

  <<__LateInit>>
  private CT719 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT719 $c): void {}

  protected static function funcReturn(mixed $c): CT719 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT719>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT719>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT719 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT719> {
    return vec['','hello world',0,1,dict[],false,true,vec[]];
  }
}
case type CT720 = void|nonnull;

  
class CheckCT720<T as CT720> extends BaseCheck {
  const type T = CT720;
  const string NAME = 'CT720';

  <<__LateInit>>
  private CT720 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT720 $c): void {}

  protected static function funcReturn(mixed $c): CT720 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT720>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT720>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT720 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT720> {
    return vec['','hello world',0,1,false,null,true];
  }
}
case type CT721 = num|noreturn;

  
class CheckCT721<T as CT721> extends BaseCheck {
  const type T = CT721;
  const string NAME = 'CT721';

  <<__LateInit>>
  private CT721 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT721 $c): void {}

  protected static function funcReturn(mixed $c): CT721 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT721>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT721>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT721 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT721> {
    return vec[0,0.0,1,3.14];
  }
}
case type CT722 = resource|noreturn;

  
class CheckCT722<T as CT722> extends BaseCheck {
  const type T = CT722;
  const string NAME = 'CT722';

  <<__LateInit>>
  private CT722 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT722 $c): void {}

  protected static function funcReturn(mixed $c): CT722 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT722>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT722>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT722 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT722> {
    return vec[imagecreate(10, 10)];
  }
}
case type CT723 = shape(...)|noreturn;

  
class CheckCT723<T as CT723> extends BaseCheck {
  const type T = CT723;
  const string NAME = 'CT723';

  <<__LateInit>>
  private CT723 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT723 $c): void {}

  protected static function funcReturn(mixed $c): CT723 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT723>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT723>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT723 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT723> {
    return vec[shape('x' => 10),shape()];
  }
}
case type CT724 = string|noreturn;

  
class CheckCT724<T as CT724> extends BaseCheck {
  const type T = CT724;
  const string NAME = 'CT724';

  <<__LateInit>>
  private CT724 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT724 $c): void {}

  protected static function funcReturn(mixed $c): CT724 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT724>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT724>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT724 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT724> {
    return vec['','hello world'];
  }
}
case type CT725 = vec<mixed>|noreturn;

  
class CheckCT725<T as CT725> extends BaseCheck {
  const type T = CT725;
  const string NAME = 'CT725';

  <<__LateInit>>
  private CT725 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT725 $c): void {}

  protected static function funcReturn(mixed $c): CT725 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT725>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT725>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT725 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT725> {
    return vec[vec[]];
  }
}
case type CT726 = vec_or_dict<string>|noreturn;

  
class CheckCT726<T as CT726> extends BaseCheck {
  const type T = CT726;
  const string NAME = 'CT726';

  <<__LateInit>>
  private CT726 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT726 $c): void {}

  protected static function funcReturn(mixed $c): CT726 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT726>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT726>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT726 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT726> {
    return vec[dict[],vec[]];
  }
}
case type CT727 = num|nothing;

  
class CheckCT727<T as CT727> extends BaseCheck {
  const type T = CT727;
  const string NAME = 'CT727';

  <<__LateInit>>
  private CT727 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT727 $c): void {}

  protected static function funcReturn(mixed $c): CT727 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT727>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT727>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT727 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT727> {
    return vec[0,0.0,1,3.14];
  }
}
case type CT728 = resource|nothing;

  
class CheckCT728<T as CT728> extends BaseCheck {
  const type T = CT728;
  const string NAME = 'CT728';

  <<__LateInit>>
  private CT728 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT728 $c): void {}

  protected static function funcReturn(mixed $c): CT728 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT728>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT728>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT728 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT728> {
    return vec[imagecreate(10, 10)];
  }
}
case type CT729 = shape(...)|nothing;

  
class CheckCT729<T as CT729> extends BaseCheck {
  const type T = CT729;
  const string NAME = 'CT729';

  <<__LateInit>>
  private CT729 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT729 $c): void {}

  protected static function funcReturn(mixed $c): CT729 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT729>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT729>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT729 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT729> {
    return vec[shape('x' => 10),shape()];
  }
}
case type CT730 = string|nothing;

  
class CheckCT730<T as CT730> extends BaseCheck {
  const type T = CT730;
  const string NAME = 'CT730';

  <<__LateInit>>
  private CT730 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT730 $c): void {}

  protected static function funcReturn(mixed $c): CT730 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT730>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT730>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT730 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT730> {
    return vec['','hello world'];
  }
}
case type CT731 = vec<mixed>|nothing;

  
class CheckCT731<T as CT731> extends BaseCheck {
  const type T = CT731;
  const string NAME = 'CT731';

  <<__LateInit>>
  private CT731 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT731 $c): void {}

  protected static function funcReturn(mixed $c): CT731 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT731>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT731>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT731 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT731> {
    return vec[vec[]];
  }
}
case type CT732 = vec_or_dict<string>|nothing;

  
class CheckCT732<T as CT732> extends BaseCheck {
  const type T = CT732;
  const string NAME = 'CT732';

  <<__LateInit>>
  private CT732 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT732 $c): void {}

  protected static function funcReturn(mixed $c): CT732 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT732>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT732>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT732 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT732> {
    return vec[dict[],vec[]];
  }
}
case type CT733 = num|null;

  
class CheckCT733<T as CT733> extends BaseCheck {
  const type T = CT733;
  const string NAME = 'CT733';

  <<__LateInit>>
  private CT733 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT733 $c): void {}

  protected static function funcReturn(mixed $c): CT733 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT733>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT733>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT733 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT733> {
    return vec[0,0.0,1,3.14,null];
  }
}
case type CT734 = resource|null;

  
class CheckCT734<T as CT734> extends BaseCheck {
  const type T = CT734;
  const string NAME = 'CT734';

  <<__LateInit>>
  private CT734 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT734 $c): void {}

  protected static function funcReturn(mixed $c): CT734 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT734>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT734>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT734 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT734> {
    return vec[imagecreate(10, 10),null];
  }
}
case type CT735 = shape(...)|null;

  
class CheckCT735<T as CT735> extends BaseCheck {
  const type T = CT735;
  const string NAME = 'CT735';

  <<__LateInit>>
  private CT735 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT735 $c): void {}

  protected static function funcReturn(mixed $c): CT735 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT735>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT735>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT735 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT735> {
    return vec[null,shape('x' => 10),shape()];
  }
}
case type CT736 = string|null;

  
class CheckCT736<T as CT736> extends BaseCheck {
  const type T = CT736;
  const string NAME = 'CT736';

  <<__LateInit>>
  private CT736 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT736 $c): void {}

  protected static function funcReturn(mixed $c): CT736 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT736>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT736>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT736 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT736> {
    return vec['','hello world',null];
  }
}
case type CT737 = vec<mixed>|null;

  
class CheckCT737<T as CT737> extends BaseCheck {
  const type T = CT737;
  const string NAME = 'CT737';

  <<__LateInit>>
  private CT737 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT737 $c): void {}

  protected static function funcReturn(mixed $c): CT737 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT737>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT737>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT737 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT737> {
    return vec[null,vec[]];
  }
}
case type CT738 = vec_or_dict<string>|null;

  
class CheckCT738<T as CT738> extends BaseCheck {
  const type T = CT738;
  const string NAME = 'CT738';

  <<__LateInit>>
  private CT738 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT738 $c): void {}

  protected static function funcReturn(mixed $c): CT738 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT738>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT738>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT738 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT738> {
    return vec[dict[],null,vec[]];
  }
}
case type CT739 = num|num;

  
class CheckCT739<T as CT739> extends BaseCheck {
  const type T = CT739;
  const string NAME = 'CT739';

  <<__LateInit>>
  private CT739 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT739 $c): void {}

  protected static function funcReturn(mixed $c): CT739 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT739>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT739>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT739 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT739> {
    return vec[0,0.0,1,3.14];
  }
}
case type CT740 = resource|num;

  
class CheckCT740<T as CT740> extends BaseCheck {
  const type T = CT740;
  const string NAME = 'CT740';

  <<__LateInit>>
  private CT740 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT740 $c): void {}

  protected static function funcReturn(mixed $c): CT740 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT740>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT740>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT740 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT740> {
    return vec[0,0.0,1,3.14,imagecreate(10, 10)];
  }
}
case type CT741 = shape(...)|num;

  
class CheckCT741<T as CT741> extends BaseCheck {
  const type T = CT741;
  const string NAME = 'CT741';

  <<__LateInit>>
  private CT741 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT741 $c): void {}

  protected static function funcReturn(mixed $c): CT741 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT741>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT741>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT741 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT741> {
    return vec[0,0.0,1,3.14,shape('x' => 10),shape()];
  }
}
case type CT742 = string|num;

  
class CheckCT742<T as CT742> extends BaseCheck {
  const type T = CT742;
  const string NAME = 'CT742';

  <<__LateInit>>
  private CT742 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT742 $c): void {}

  protected static function funcReturn(mixed $c): CT742 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT742>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT742>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT742 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT742> {
    return vec['','hello world',0,0.0,1,3.14];
  }
}
case type CT743 = vec<mixed>|num;

  
class CheckCT743<T as CT743> extends BaseCheck {
  const type T = CT743;
  const string NAME = 'CT743';

  <<__LateInit>>
  private CT743 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT743 $c): void {}

  protected static function funcReturn(mixed $c): CT743 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT743>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT743>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT743 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT743> {
    return vec[0,0.0,1,3.14,vec[]];
  }
}
case type CT744 = vec_or_dict<string>|num;

  
class CheckCT744<T as CT744> extends BaseCheck {
  const type T = CT744;
  const string NAME = 'CT744';

  <<__LateInit>>
  private CT744 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT744 $c): void {}

  protected static function funcReturn(mixed $c): CT744 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT744>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT744>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT744 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT744> {
    return vec[0,0.0,1,3.14,dict[],vec[]];
  }
}
case type CT745 = void|num;

  
class CheckCT745<T as CT745> extends BaseCheck {
  const type T = CT745;
  const string NAME = 'CT745';

  <<__LateInit>>
  private CT745 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT745 $c): void {}

  protected static function funcReturn(mixed $c): CT745 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT745>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT745>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT745 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT745> {
    return vec[0,0.0,1,3.14,null];
  }
}
case type CT746 = resource|resource;

  
class CheckCT746<T as CT746> extends BaseCheck {
  const type T = CT746;
  const string NAME = 'CT746';

  <<__LateInit>>
  private CT746 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT746 $c): void {}

  protected static function funcReturn(mixed $c): CT746 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT746>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT746>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT746 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT746> {
    return vec[imagecreate(10, 10)];
  }
}
case type CT747 = shape(...)|resource;

  
class CheckCT747<T as CT747> extends BaseCheck {
  const type T = CT747;
  const string NAME = 'CT747';

  <<__LateInit>>
  private CT747 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT747 $c): void {}

  protected static function funcReturn(mixed $c): CT747 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT747>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT747>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT747 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT747> {
    return vec[imagecreate(10, 10),shape('x' => 10),shape()];
  }
}
case type CT748 = string|resource;

  
class CheckCT748<T as CT748> extends BaseCheck {
  const type T = CT748;
  const string NAME = 'CT748';

  <<__LateInit>>
  private CT748 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT748 $c): void {}

  protected static function funcReturn(mixed $c): CT748 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT748>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT748>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT748 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT748> {
    return vec['','hello world',imagecreate(10, 10)];
  }
}
case type CT749 = vec<mixed>|resource;

  
class CheckCT749<T as CT749> extends BaseCheck {
  const type T = CT749;
  const string NAME = 'CT749';

  <<__LateInit>>
  private CT749 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT749 $c): void {}

  protected static function funcReturn(mixed $c): CT749 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT749>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT749>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT749 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT749> {
    return vec[imagecreate(10, 10),vec[]];
  }
}
case type CT750 = vec_or_dict<string>|resource;

  
class CheckCT750<T as CT750> extends BaseCheck {
  const type T = CT750;
  const string NAME = 'CT750';

  <<__LateInit>>
  private CT750 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT750 $c): void {}

  protected static function funcReturn(mixed $c): CT750 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT750>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT750>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT750 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT750> {
    return vec[dict[],imagecreate(10, 10),vec[]];
  }
}
case type CT751 = void|resource;

  
class CheckCT751<T as CT751> extends BaseCheck {
  const type T = CT751;
  const string NAME = 'CT751';

  <<__LateInit>>
  private CT751 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT751 $c): void {}

  protected static function funcReturn(mixed $c): CT751 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT751>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT751>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT751 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT751> {
    return vec[imagecreate(10, 10),null];
  }
}
case type CT752 = shape(...)|shape(...);

  
class CheckCT752<T as CT752> extends BaseCheck {
  const type T = CT752;
  const string NAME = 'CT752';

  <<__LateInit>>
  private CT752 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT752 $c): void {}

  protected static function funcReturn(mixed $c): CT752 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT752>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT752>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT752 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT752> {
    return vec[shape('x' => 10),shape()];
  }
}
case type CT753 = string|shape(...);

  
class CheckCT753<T as CT753> extends BaseCheck {
  const type T = CT753;
  const string NAME = 'CT753';

  <<__LateInit>>
  private CT753 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT753 $c): void {}

  protected static function funcReturn(mixed $c): CT753 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT753>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT753>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT753 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT753> {
    return vec['','hello world',shape('x' => 10),shape()];
  }
}
case type CT754 = vec<mixed>|shape(...);

  
class CheckCT754<T as CT754> extends BaseCheck {
  const type T = CT754;
  const string NAME = 'CT754';

  <<__LateInit>>
  private CT754 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT754 $c): void {}

  protected static function funcReturn(mixed $c): CT754 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT754>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT754>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT754 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT754> {
    return vec[shape('x' => 10),shape(),vec[]];
  }
}
case type CT755 = vec_or_dict<string>|shape(...);

  
class CheckCT755<T as CT755> extends BaseCheck {
  const type T = CT755;
  const string NAME = 'CT755';

  <<__LateInit>>
  private CT755 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT755 $c): void {}

  protected static function funcReturn(mixed $c): CT755 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT755>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT755>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT755 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT755> {
    return vec[dict[],shape('x' => 10),shape(),vec[]];
  }
}
case type CT756 = void|shape(...);

  
class CheckCT756<T as CT756> extends BaseCheck {
  const type T = CT756;
  const string NAME = 'CT756';

  <<__LateInit>>
  private CT756 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT756 $c): void {}

  protected static function funcReturn(mixed $c): CT756 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT756>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT756>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT756 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT756> {
    return vec[null,shape('x' => 10),shape()];
  }
}
case type CT757 = string|string;

  
class CheckCT757<T as CT757> extends BaseCheck {
  const type T = CT757;
  const string NAME = 'CT757';

  <<__LateInit>>
  private CT757 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT757 $c): void {}

  protected static function funcReturn(mixed $c): CT757 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT757>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT757>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT757 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT757> {
    return vec['','hello world'];
  }
}
case type CT758 = vec<mixed>|string;

  
class CheckCT758<T as CT758> extends BaseCheck {
  const type T = CT758;
  const string NAME = 'CT758';

  <<__LateInit>>
  private CT758 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT758 $c): void {}

  protected static function funcReturn(mixed $c): CT758 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT758>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT758>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT758 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT758> {
    return vec['','hello world',vec[]];
  }
}
case type CT759 = vec_or_dict<string>|string;

  
class CheckCT759<T as CT759> extends BaseCheck {
  const type T = CT759;
  const string NAME = 'CT759';

  <<__LateInit>>
  private CT759 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT759 $c): void {}

  protected static function funcReturn(mixed $c): CT759 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT759>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT759>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT759 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT759> {
    return vec['','hello world',dict[],vec[]];
  }
}
case type CT760 = void|string;

  
class CheckCT760<T as CT760> extends BaseCheck {
  const type T = CT760;
  const string NAME = 'CT760';

  <<__LateInit>>
  private CT760 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT760 $c): void {}

  protected static function funcReturn(mixed $c): CT760 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT760>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT760>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT760 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT760> {
    return vec['','hello world',null];
  }
}
case type CT761 = vec<mixed>|vec<mixed>;

  
class CheckCT761<T as CT761> extends BaseCheck {
  const type T = CT761;
  const string NAME = 'CT761';

  <<__LateInit>>
  private CT761 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT761 $c): void {}

  protected static function funcReturn(mixed $c): CT761 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT761>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT761>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT761 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT761> {
    return vec[vec[]];
  }
}
case type CT762 = vec_or_dict<string>|vec<mixed>;

  
class CheckCT762<T as CT762> extends BaseCheck {
  const type T = CT762;
  const string NAME = 'CT762';

  <<__LateInit>>
  private CT762 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT762 $c): void {}

  protected static function funcReturn(mixed $c): CT762 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT762>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT762>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT762 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT762> {
    return vec[dict[],vec[]];
  }
}
case type CT763 = void|vec<mixed>;

  
class CheckCT763<T as CT763> extends BaseCheck {
  const type T = CT763;
  const string NAME = 'CT763';

  <<__LateInit>>
  private CT763 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT763 $c): void {}

  protected static function funcReturn(mixed $c): CT763 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT763>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT763>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT763 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT763> {
    return vec[null,vec[]];
  }
}
case type CT764 = vec_or_dict<string>|vec_or_dict<string>;

  
class CheckCT764<T as CT764> extends BaseCheck {
  const type T = CT764;
  const string NAME = 'CT764';

  <<__LateInit>>
  private CT764 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT764 $c): void {}

  protected static function funcReturn(mixed $c): CT764 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT764>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT764>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT764 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT764> {
    return vec[dict[],vec[]];
  }
}
case type CT765 = void|vec_or_dict<string>;

  
class CheckCT765<T as CT765> extends BaseCheck {
  const type T = CT765;
  const string NAME = 'CT765';

  <<__LateInit>>
  private CT765 $field;
  <<__LateInit>>
  private T $generic_field;

  protected static function funcParam(CT765 $c): void {}

  protected static function funcReturn(mixed $c): CT765 {
    return $c;
  }

  protected static function funcGenericParam<Tx as CT765>(Tx $c): void {}

  protected static function funcGenericReturn<Tx as CT765>(mixed $c): Tx {
    return $c;
  }

  protected static function propertyCheck(CT765 $val): void {
    $instance = new self();
    $instance->field = $val;
    $instance->generic_field = $val;
  }

  protected static function values(): vec<CT765> {
    return vec[dict[],null,vec[]];
  }
}

  <<__EntryPoint>>
  function main(): void {
    CheckCT0::run();
CheckCT1::run();
CheckCT2::run();
CheckCT3::run();
CheckCT4::run();
CheckCT5::run();
CheckCT6::run();
CheckCT7::run();
CheckCT8::run();
CheckCT9::run();
CheckCT10::run();
CheckCT11::run();
CheckCT12::run();
CheckCT13::run();
CheckCT14::run();
CheckCT15::run();
CheckCT16::run();
CheckCT17::run();
CheckCT18::run();
CheckCT19::run();
CheckCT20::run();
CheckCT21::run();
CheckCT22::run();
CheckCT23::run();
CheckCT24::run();
CheckCT25::run();
CheckCT26::run();
CheckCT27::run();
CheckCT28::run();
CheckCT29::run();
CheckCT30::run();
CheckCT31::run();
CheckCT32::run();
CheckCT33::run();
CheckCT34::run();
CheckCT35::run();
CheckCT36::run();
CheckCT37::run();
CheckCT38::run();
CheckCT39::run();
CheckCT40::run();
CheckCT41::run();
CheckCT42::run();
CheckCT43::run();
CheckCT44::run();
CheckCT45::run();
CheckCT46::run();
CheckCT47::run();
CheckCT48::run();
CheckCT49::run();
CheckCT50::run();
CheckCT51::run();
CheckCT52::run();
CheckCT53::run();
CheckCT54::run();
CheckCT55::run();
CheckCT56::run();
CheckCT57::run();
CheckCT58::run();
CheckCT59::run();
CheckCT60::run();
CheckCT61::run();
CheckCT62::run();
CheckCT63::run();
CheckCT64::run();
CheckCT65::run();
CheckCT66::run();
CheckCT67::run();
CheckCT68::run();
CheckCT69::run();
CheckCT70::run();
CheckCT71::run();
CheckCT72::run();
CheckCT73::run();
CheckCT74::run();
CheckCT75::run();
CheckCT76::run();
CheckCT77::run();
CheckCT78::run();
CheckCT79::run();
CheckCT80::run();
CheckCT81::run();
CheckCT82::run();
CheckCT83::run();
CheckCT84::run();
CheckCT85::run();
CheckCT86::run();
CheckCT87::run();
CheckCT88::run();
CheckCT89::run();
CheckCT90::run();
CheckCT91::run();
CheckCT92::run();
CheckCT93::run();
CheckCT94::run();
CheckCT95::run();
CheckCT96::run();
CheckCT97::run();
CheckCT98::run();
CheckCT99::run();
CheckCT100::run();
CheckCT101::run();
CheckCT102::run();
CheckCT103::run();
CheckCT104::run();
CheckCT105::run();
CheckCT106::run();
CheckCT107::run();
CheckCT108::run();
CheckCT109::run();
CheckCT110::run();
CheckCT111::run();
CheckCT112::run();
CheckCT113::run();
CheckCT114::run();
CheckCT115::run();
CheckCT116::run();
CheckCT117::run();
CheckCT118::run();
CheckCT119::run();
CheckCT120::run();
CheckCT121::run();
CheckCT122::run();
CheckCT123::run();
CheckCT124::run();
CheckCT125::run();
CheckCT126::run();
CheckCT127::run();
CheckCT128::run();
CheckCT129::run();
CheckCT130::run();
CheckCT131::run();
CheckCT132::run();
CheckCT133::run();
CheckCT134::run();
CheckCT135::run();
CheckCT136::run();
CheckCT137::run();
CheckCT138::run();
CheckCT139::run();
CheckCT140::run();
CheckCT141::run();
CheckCT142::run();
CheckCT143::run();
CheckCT144::run();
CheckCT145::run();
CheckCT146::run();
CheckCT147::run();
CheckCT148::run();
CheckCT149::run();
CheckCT150::run();
CheckCT151::run();
CheckCT152::run();
CheckCT153::run();
CheckCT154::run();
CheckCT155::run();
CheckCT156::run();
CheckCT157::run();
CheckCT158::run();
CheckCT159::run();
CheckCT160::run();
CheckCT161::run();
CheckCT162::run();
CheckCT163::run();
CheckCT164::run();
CheckCT165::run();
CheckCT166::run();
CheckCT167::run();
CheckCT168::run();
CheckCT169::run();
CheckCT170::run();
CheckCT171::run();
CheckCT172::run();
CheckCT173::run();
CheckCT174::run();
CheckCT175::run();
CheckCT176::run();
CheckCT177::run();
CheckCT178::run();
CheckCT179::run();
CheckCT180::run();
CheckCT181::run();
CheckCT182::run();
CheckCT183::run();
CheckCT184::run();
CheckCT185::run();
CheckCT186::run();
CheckCT187::run();
CheckCT188::run();
CheckCT189::run();
CheckCT190::run();
CheckCT191::run();
CheckCT192::run();
CheckCT193::run();
CheckCT194::run();
CheckCT195::run();
CheckCT196::run();
CheckCT197::run();
CheckCT198::run();
CheckCT199::run();
CheckCT200::run();
CheckCT201::run();
CheckCT202::run();
CheckCT203::run();
CheckCT204::run();
CheckCT205::run();
CheckCT206::run();
CheckCT207::run();
CheckCT208::run();
CheckCT209::run();
CheckCT210::run();
CheckCT211::run();
CheckCT212::run();
CheckCT213::run();
CheckCT214::run();
CheckCT215::run();
CheckCT216::run();
CheckCT217::run();
CheckCT218::run();
CheckCT219::run();
CheckCT220::run();
CheckCT221::run();
CheckCT222::run();
CheckCT223::run();
CheckCT224::run();
CheckCT225::run();
CheckCT226::run();
CheckCT227::run();
CheckCT228::run();
CheckCT229::run();
CheckCT230::run();
CheckCT231::run();
CheckCT232::run();
CheckCT233::run();
CheckCT234::run();
CheckCT235::run();
CheckCT236::run();
CheckCT237::run();
CheckCT238::run();
CheckCT239::run();
CheckCT240::run();
CheckCT241::run();
CheckCT242::run();
CheckCT243::run();
CheckCT244::run();
CheckCT245::run();
CheckCT246::run();
CheckCT247::run();
CheckCT248::run();
CheckCT249::run();
CheckCT250::run();
CheckCT251::run();
CheckCT252::run();
CheckCT253::run();
CheckCT254::run();
CheckCT255::run();
CheckCT256::run();
CheckCT257::run();
CheckCT258::run();
CheckCT259::run();
CheckCT260::run();
CheckCT261::run();
CheckCT262::run();
CheckCT263::run();
CheckCT264::run();
CheckCT265::run();
CheckCT266::run();
CheckCT267::run();
CheckCT268::run();
CheckCT269::run();
CheckCT270::run();
CheckCT271::run();
CheckCT272::run();
CheckCT273::run();
CheckCT274::run();
CheckCT275::run();
CheckCT276::run();
CheckCT277::run();
CheckCT278::run();
CheckCT279::run();
CheckCT280::run();
CheckCT281::run();
CheckCT282::run();
CheckCT283::run();
CheckCT284::run();
CheckCT285::run();
CheckCT286::run();
CheckCT287::run();
CheckCT288::run();
CheckCT289::run();
CheckCT290::run();
CheckCT291::run();
CheckCT292::run();
CheckCT293::run();
CheckCT294::run();
CheckCT295::run();
CheckCT296::run();
CheckCT297::run();
CheckCT298::run();
CheckCT299::run();
CheckCT300::run();
CheckCT301::run();
CheckCT302::run();
CheckCT303::run();
CheckCT304::run();
CheckCT305::run();
CheckCT306::run();
CheckCT307::run();
CheckCT308::run();
CheckCT309::run();
CheckCT310::run();
CheckCT311::run();
CheckCT312::run();
CheckCT313::run();
CheckCT314::run();
CheckCT315::run();
CheckCT316::run();
CheckCT317::run();
CheckCT318::run();
CheckCT319::run();
CheckCT320::run();
CheckCT321::run();
CheckCT322::run();
CheckCT323::run();
CheckCT324::run();
CheckCT325::run();
CheckCT326::run();
CheckCT327::run();
CheckCT328::run();
CheckCT329::run();
CheckCT330::run();
CheckCT331::run();
CheckCT332::run();
CheckCT333::run();
CheckCT334::run();
CheckCT335::run();
CheckCT336::run();
CheckCT337::run();
CheckCT338::run();
CheckCT339::run();
CheckCT340::run();
CheckCT341::run();
CheckCT342::run();
CheckCT343::run();
CheckCT344::run();
CheckCT345::run();
CheckCT346::run();
CheckCT347::run();
CheckCT348::run();
CheckCT349::run();
CheckCT350::run();
CheckCT351::run();
CheckCT352::run();
CheckCT353::run();
CheckCT354::run();
CheckCT355::run();
CheckCT356::run();
CheckCT357::run();
CheckCT358::run();
CheckCT359::run();
CheckCT360::run();
CheckCT361::run();
CheckCT362::run();
CheckCT363::run();
CheckCT364::run();
CheckCT365::run();
CheckCT366::run();
CheckCT367::run();
CheckCT368::run();
CheckCT369::run();
CheckCT370::run();
CheckCT371::run();
CheckCT372::run();
CheckCT373::run();
CheckCT374::run();
CheckCT375::run();
CheckCT376::run();
CheckCT377::run();
CheckCT378::run();
CheckCT379::run();
CheckCT380::run();
CheckCT381::run();
CheckCT382::run();
CheckCT383::run();
CheckCT384::run();
CheckCT385::run();
CheckCT386::run();
CheckCT387::run();
CheckCT388::run();
CheckCT389::run();
CheckCT390::run();
CheckCT391::run();
CheckCT392::run();
CheckCT393::run();
CheckCT394::run();
CheckCT395::run();
CheckCT396::run();
CheckCT397::run();
CheckCT398::run();
CheckCT399::run();
CheckCT400::run();
CheckCT401::run();
CheckCT402::run();
CheckCT403::run();
CheckCT404::run();
CheckCT405::run();
CheckCT406::run();
CheckCT407::run();
CheckCT408::run();
CheckCT409::run();
CheckCT410::run();
CheckCT411::run();
CheckCT412::run();
CheckCT413::run();
CheckCT414::run();
CheckCT415::run();
CheckCT416::run();
CheckCT417::run();
CheckCT418::run();
CheckCT419::run();
CheckCT420::run();
CheckCT421::run();
CheckCT422::run();
CheckCT423::run();
CheckCT424::run();
CheckCT425::run();
CheckCT426::run();
CheckCT427::run();
CheckCT428::run();
CheckCT429::run();
CheckCT430::run();
CheckCT431::run();
CheckCT432::run();
CheckCT433::run();
CheckCT434::run();
CheckCT435::run();
CheckCT436::run();
CheckCT437::run();
CheckCT438::run();
CheckCT439::run();
CheckCT440::run();
CheckCT441::run();
CheckCT442::run();
CheckCT443::run();
CheckCT444::run();
CheckCT445::run();
CheckCT446::run();
CheckCT447::run();
CheckCT448::run();
CheckCT449::run();
CheckCT450::run();
CheckCT451::run();
CheckCT452::run();
CheckCT453::run();
CheckCT454::run();
CheckCT455::run();
CheckCT456::run();
CheckCT457::run();
CheckCT458::run();
CheckCT459::run();
CheckCT460::run();
CheckCT461::run();
CheckCT462::run();
CheckCT463::run();
CheckCT464::run();
CheckCT465::run();
CheckCT466::run();
CheckCT467::run();
CheckCT468::run();
CheckCT469::run();
CheckCT470::run();
CheckCT471::run();
CheckCT472::run();
CheckCT473::run();
CheckCT474::run();
CheckCT475::run();
CheckCT476::run();
CheckCT477::run();
CheckCT478::run();
CheckCT479::run();
CheckCT480::run();
CheckCT481::run();
CheckCT482::run();
CheckCT483::run();
CheckCT484::run();
CheckCT485::run();
CheckCT486::run();
CheckCT487::run();
CheckCT488::run();
CheckCT489::run();
CheckCT490::run();
CheckCT491::run();
CheckCT492::run();
CheckCT493::run();
CheckCT494::run();
CheckCT495::run();
CheckCT496::run();
CheckCT497::run();
CheckCT498::run();
CheckCT499::run();
CheckCT500::run();
CheckCT501::run();
CheckCT502::run();
CheckCT503::run();
CheckCT504::run();
CheckCT505::run();
CheckCT506::run();
CheckCT507::run();
CheckCT508::run();
CheckCT509::run();
CheckCT510::run();
CheckCT511::run();
CheckCT512::run();
CheckCT513::run();
CheckCT514::run();
CheckCT515::run();
CheckCT516::run();
CheckCT517::run();
CheckCT518::run();
CheckCT519::run();
CheckCT520::run();
CheckCT521::run();
CheckCT522::run();
CheckCT523::run();
CheckCT524::run();
CheckCT525::run();
CheckCT526::run();
CheckCT527::run();
CheckCT528::run();
CheckCT529::run();
CheckCT530::run();
CheckCT531::run();
CheckCT532::run();
CheckCT533::run();
CheckCT534::run();
CheckCT535::run();
CheckCT536::run();
CheckCT537::run();
CheckCT538::run();
CheckCT539::run();
CheckCT540::run();
CheckCT541::run();
CheckCT542::run();
CheckCT543::run();
CheckCT544::run();
CheckCT545::run();
CheckCT546::run();
CheckCT547::run();
CheckCT548::run();
CheckCT549::run();
CheckCT550::run();
CheckCT551::run();
CheckCT552::run();
CheckCT553::run();
CheckCT554::run();
CheckCT555::run();
CheckCT556::run();
CheckCT557::run();
CheckCT558::run();
CheckCT559::run();
CheckCT560::run();
CheckCT561::run();
CheckCT562::run();
CheckCT563::run();
CheckCT564::run();
CheckCT565::run();
CheckCT566::run();
CheckCT567::run();
CheckCT568::run();
CheckCT569::run();
CheckCT570::run();
CheckCT571::run();
CheckCT572::run();
CheckCT573::run();
CheckCT574::run();
CheckCT575::run();
CheckCT576::run();
CheckCT577::run();
CheckCT578::run();
CheckCT579::run();
CheckCT580::run();
CheckCT581::run();
CheckCT582::run();
CheckCT583::run();
CheckCT584::run();
CheckCT585::run();
CheckCT586::run();
CheckCT587::run();
CheckCT588::run();
CheckCT589::run();
CheckCT590::run();
CheckCT591::run();
CheckCT592::run();
CheckCT593::run();
CheckCT594::run();
CheckCT595::run();
CheckCT596::run();
CheckCT597::run();
CheckCT598::run();
CheckCT599::run();
CheckCT600::run();
CheckCT601::run();
CheckCT602::run();
CheckCT603::run();
CheckCT604::run();
CheckCT605::run();
CheckCT606::run();
CheckCT607::run();
CheckCT608::run();
CheckCT609::run();
CheckCT610::run();
CheckCT611::run();
CheckCT612::run();
CheckCT613::run();
CheckCT614::run();
CheckCT615::run();
CheckCT616::run();
CheckCT617::run();
CheckCT618::run();
CheckCT619::run();
CheckCT620::run();
CheckCT621::run();
CheckCT622::run();
CheckCT623::run();
CheckCT624::run();
CheckCT625::run();
CheckCT626::run();
CheckCT627::run();
CheckCT628::run();
CheckCT629::run();
CheckCT630::run();
CheckCT631::run();
CheckCT632::run();
CheckCT633::run();
CheckCT634::run();
CheckCT635::run();
CheckCT636::run();
CheckCT637::run();
CheckCT638::run();
CheckCT639::run();
CheckCT640::run();
CheckCT641::run();
CheckCT642::run();
CheckCT643::run();
CheckCT644::run();
CheckCT645::run();
CheckCT646::run();
CheckCT647::run();
CheckCT648::run();
CheckCT649::run();
CheckCT650::run();
CheckCT651::run();
CheckCT652::run();
CheckCT653::run();
CheckCT654::run();
CheckCT655::run();
CheckCT656::run();
CheckCT657::run();
CheckCT658::run();
CheckCT659::run();
CheckCT660::run();
CheckCT661::run();
CheckCT662::run();
CheckCT663::run();
CheckCT664::run();
CheckCT665::run();
CheckCT666::run();
CheckCT667::run();
CheckCT668::run();
CheckCT669::run();
CheckCT670::run();
CheckCT671::run();
CheckCT672::run();
CheckCT673::run();
CheckCT674::run();
CheckCT675::run();
CheckCT676::run();
CheckCT677::run();
CheckCT678::run();
CheckCT679::run();
CheckCT680::run();
CheckCT681::run();
CheckCT682::run();
CheckCT683::run();
CheckCT684::run();
CheckCT685::run();
CheckCT686::run();
CheckCT687::run();
CheckCT688::run();
CheckCT689::run();
CheckCT690::run();
CheckCT691::run();
CheckCT692::run();
CheckCT693::run();
CheckCT694::run();
CheckCT695::run();
CheckCT696::run();
CheckCT697::run();
CheckCT698::run();
CheckCT699::run();
CheckCT700::run();
CheckCT701::run();
CheckCT702::run();
CheckCT703::run();
CheckCT704::run();
CheckCT705::run();
CheckCT706::run();
CheckCT707::run();
CheckCT708::run();
CheckCT709::run();
CheckCT710::run();
CheckCT711::run();
CheckCT712::run();
CheckCT713::run();
CheckCT714::run();
CheckCT715::run();
CheckCT716::run();
CheckCT717::run();
CheckCT718::run();
CheckCT719::run();
CheckCT720::run();
CheckCT721::run();
CheckCT722::run();
CheckCT723::run();
CheckCT724::run();
CheckCT725::run();
CheckCT726::run();
CheckCT727::run();
CheckCT728::run();
CheckCT729::run();
CheckCT730::run();
CheckCT731::run();
CheckCT732::run();
CheckCT733::run();
CheckCT734::run();
CheckCT735::run();
CheckCT736::run();
CheckCT737::run();
CheckCT738::run();
CheckCT739::run();
CheckCT740::run();
CheckCT741::run();
CheckCT742::run();
CheckCT743::run();
CheckCT744::run();
CheckCT745::run();
CheckCT746::run();
CheckCT747::run();
CheckCT748::run();
CheckCT749::run();
CheckCT750::run();
CheckCT751::run();
CheckCT752::run();
CheckCT753::run();
CheckCT754::run();
CheckCT755::run();
CheckCT756::run();
CheckCT757::run();
CheckCT758::run();
CheckCT759::run();
CheckCT760::run();
CheckCT761::run();
CheckCT762::run();
CheckCT763::run();
CheckCT764::run();
CheckCT765::run();
  }