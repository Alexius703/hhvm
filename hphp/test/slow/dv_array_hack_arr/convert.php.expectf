============== test_varray =========================
Exception: Null to vec conversion
============== test_varray =========================
Exception: Bool to vec conversion
============== test_varray =========================
Exception: Bool to vec conversion
============== test_varray =========================
Exception: String to vec conversion
============== test_varray =========================
Exception: Int to vec conversion
============== test_varray =========================
Exception: String to vec conversion
============== test_varray =========================
Exception: Double to vec conversion
============== test_varray =========================
vec(0) {
}
bool(true)
bool(false)
============== test_varray =========================
vec(4) {
  int(1)
  int(2)
  int(3)
  int(4)
}
bool(true)
bool(false)
============== test_varray =========================
vec(3) {
  int(100)
  int(200)
  int(300)
}
bool(true)
bool(false)
============== test_varray =========================
vec(0) {
}
bool(true)
bool(false)
============== test_varray =========================
vec(4) {
  int(1)
  int(2)
  int(3)
  int(4)
}
bool(true)
bool(false)
============== test_varray =========================
vec(0) {
}
bool(true)
bool(false)
============== test_varray =========================
vec(2) {
  string(1) "a"
  string(1) "b"
}
bool(true)
bool(false)
============== test_varray =========================
vec(0) {
}
bool(true)
bool(false)
============== test_varray =========================
vec(3) {
  int(100)
  string(3) "abc"
  int(200)
}
bool(true)
bool(false)
============== test_varray =========================
Exception: Resource to vec conversion
============== test_varray =========================
Exception: Non-iterable object to vec conversion
============== test_varray =========================
vec(3) {
  string(3) "abc"
  string(3) "def"
  string(3) "ghi"
}
bool(true)
bool(false)
============== test_varray =========================
Exception: ThrowIterableObj
============== test_varray =========================
vec(3) {
  string(3) "abc"
  string(3) "def"
  string(3) "ghi"
}
bool(true)
bool(false)
============== test_varray =========================
vec(2) {
  string(3) "abc"
  string(3) "def"
}
bool(true)
bool(false)
============== test_varray =========================
vec(2) {
  int(100)
  string(3) "100"
}
bool(true)
bool(false)
============== test_varray =========================
vec(3) {
  int(100)
  int(200)
  int(300)
}
bool(true)
bool(false)
============== test_varray =========================
vec(4) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
  string(1) "d"
}
bool(true)
bool(false)
============== test_varray =========================
vec(3) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
}
bool(true)
bool(false)
============== test_varray =========================
vec(2) {
  string(1) "a"
  int(100)
}
bool(true)
bool(false)
============== test_varray =========================
vec(0) {
}
bool(true)
bool(false)
============== test_varray =========================
vec(3) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
}
bool(true)
bool(false)
============== test_varray =========================
vec(0) {
}
bool(true)
bool(false)
============== test_varray =========================
vec(3) {
  string(1) "x"
  string(1) "y"
  string(1) "z"
}
bool(true)
bool(false)
============== test_varray =========================
vec(2) {
  int(111)
  int(222)
}
bool(true)
bool(false)
============== test_darray =========================
Exception: Null to dict conversion
============== test_darray =========================
Exception: Bool to dict conversion
============== test_darray =========================
Exception: Bool to dict conversion
============== test_darray =========================
Exception: String to dict conversion
============== test_darray =========================
Exception: Int to dict conversion
============== test_darray =========================
Exception: String to dict conversion
============== test_darray =========================
Exception: Double to dict conversion
============== test_darray =========================
dict(0) {
}
bool(false)
bool(true)
============== test_darray =========================
dict(4) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  int(4)
}
bool(false)
bool(true)
============== test_darray =========================
dict(3) {
  ["a"]=>
  int(100)
  ["b"]=>
  int(200)
  ["c"]=>
  int(300)
}
bool(false)
bool(true)
============== test_darray =========================
dict(0) {
}
bool(false)
bool(true)
============== test_darray =========================
dict(4) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  int(4)
}
bool(false)
bool(true)
============== test_darray =========================
dict(0) {
}
bool(false)
bool(true)
============== test_darray =========================
dict(2) {
  [1]=>
  string(1) "a"
  [2]=>
  string(1) "b"
}
bool(false)
bool(true)
============== test_darray =========================
dict(0) {
}
bool(false)
bool(true)
============== test_darray =========================
dict(3) {
  [100]=>
  int(100)
  ["abc"]=>
  string(3) "abc"
  [200]=>
  int(200)
}
bool(false)
bool(true)
============== test_darray =========================
Exception: Resource to dict conversion
============== test_darray =========================
Exception: Non-iterable object to dict conversion
============== test_darray =========================
dict(3) {
  [100]=>
  string(3) "abc"
  [200]=>
  string(3) "def"
  [300]=>
  string(3) "ghi"
}
bool(false)
bool(true)
============== test_darray =========================
Exception: ThrowIterableObj
============== test_darray =========================
dict(3) {
  [100]=>
  string(3) "abc"
  [200]=>
  string(3) "def"
  [300]=>
  string(3) "ghi"
}
bool(false)
bool(true)
============== test_darray =========================
dict(2) {
  [100]=>
  string(3) "abc"
  ["100"]=>
  string(3) "def"
}
bool(false)
bool(true)
============== test_darray =========================
dict(2) {
  [100]=>
  int(100)
  ["100"]=>
  string(3) "100"
}
bool(false)
bool(true)
============== test_darray =========================
dict(3) {
  [0]=>
  int(100)
  [1]=>
  int(200)
  [2]=>
  int(300)
}
bool(false)
bool(true)
============== test_darray =========================
dict(4) {
  ["a"]=>
  string(1) "a"
  ["b"]=>
  string(1) "b"
  ["c"]=>
  string(1) "c"
  ["d"]=>
  string(1) "d"
}
bool(false)
bool(true)
============== test_darray =========================
dict(3) {
  [100]=>
  string(1) "a"
  [200]=>
  string(1) "b"
  [300]=>
  string(1) "c"
}
bool(false)
bool(true)
============== test_darray =========================
dict(2) {
  [0]=>
  string(1) "a"
  [1]=>
  int(100)
}
bool(false)
bool(true)
============== test_darray =========================
dict(0) {
}
bool(false)
bool(true)
============== test_darray =========================
dict(3) {
  [0]=>
  string(1) "a"
  [1]=>
  string(1) "b"
  [2]=>
  string(1) "c"
}
bool(false)
bool(true)
============== test_darray =========================
dict(0) {
}
bool(false)
bool(true)
============== test_darray =========================
dict(3) {
  [0]=>
  string(1) "x"
  [1]=>
  string(1) "y"
  [2]=>
  string(1) "z"
}
bool(false)
bool(true)
============== test_darray =========================
dict(2) {
  ["key1"]=>
  int(111)
  ["key2"]=>
  int(222)
}
bool(false)
bool(true)
============== test_indirect (HH\varray) ==================

Warning: Argument 1 to HH\varray() must be of type HH\Traversable, null given in %s on line 76
Exception: Null to vec conversion
============== test_indirect (HH\varray) ==================

Warning: Argument 1 to HH\varray() must be of type HH\Traversable, bool given in %s on line 76
Exception: Bool to vec conversion
============== test_indirect (HH\varray) ==================

Warning: Argument 1 to HH\varray() must be of type HH\Traversable, bool given in %s on line 76
Exception: Bool to vec conversion
============== test_indirect (HH\varray) ==================

Warning: Argument 1 to HH\varray() must be of type HH\Traversable, string given in %s on line 76
Exception: String to vec conversion
============== test_indirect (HH\varray) ==================

Warning: Argument 1 to HH\varray() must be of type HH\Traversable, int given in %s on line 76
Exception: Int to vec conversion
============== test_indirect (HH\varray) ==================

Warning: Argument 1 to HH\varray() must be of type HH\Traversable, string given in %s on line 76
Exception: String to vec conversion
============== test_indirect (HH\varray) ==================

Warning: Argument 1 to HH\varray() must be of type HH\Traversable, float given in %s on line 76
Exception: Double to vec conversion
============== test_indirect (HH\varray) ==================
vec(0) {
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(4) {
  int(1)
  int(2)
  int(3)
  int(4)
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(3) {
  int(100)
  int(200)
  int(300)
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(0) {
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(4) {
  int(1)
  int(2)
  int(3)
  int(4)
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(0) {
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(2) {
  string(1) "a"
  string(1) "b"
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(0) {
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(3) {
  int(100)
  string(3) "abc"
  int(200)
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================

Warning: Argument 1 to HH\varray() must be of type HH\Traversable, %SFile given in %s on line 76
Exception: Resource to vec conversion
============== test_indirect (HH\varray) ==================

Warning: Argument 1 to HH\varray() must be of type HH\Traversable, stdClass given in %s on line 76
Exception: Non-iterable object to vec conversion
============== test_indirect (HH\varray) ==================
vec(3) {
  string(3) "abc"
  string(3) "def"
  string(3) "ghi"
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
Exception: ThrowIterableObj
============== test_indirect (HH\varray) ==================
vec(3) {
  string(3) "abc"
  string(3) "def"
  string(3) "ghi"
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(2) {
  string(3) "abc"
  string(3) "def"
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(2) {
  int(100)
  string(3) "100"
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(3) {
  int(100)
  int(200)
  int(300)
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(4) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
  string(1) "d"
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(3) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(2) {
  string(1) "a"
  int(100)
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(0) {
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(3) {
  string(1) "a"
  string(1) "b"
  string(1) "c"
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(0) {
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(3) {
  string(1) "x"
  string(1) "y"
  string(1) "z"
}
bool(true)
bool(false)
============== test_indirect (HH\varray) ==================
vec(2) {
  int(111)
  int(222)
}
bool(true)
bool(false)
============== test_indirect (HH\darray) ==================

Warning: Argument 1 to HH\darray() must be of type HH\KeyedTraversable, null given in %s on line 76
Exception: Null to dict conversion
============== test_indirect (HH\darray) ==================

Warning: Argument 1 to HH\darray() must be of type HH\KeyedTraversable, bool given in %s on line 76
Exception: Bool to dict conversion
============== test_indirect (HH\darray) ==================

Warning: Argument 1 to HH\darray() must be of type HH\KeyedTraversable, bool given in %s on line 76
Exception: Bool to dict conversion
============== test_indirect (HH\darray) ==================

Warning: Argument 1 to HH\darray() must be of type HH\KeyedTraversable, string given in %s on line 76
Exception: String to dict conversion
============== test_indirect (HH\darray) ==================

Warning: Argument 1 to HH\darray() must be of type HH\KeyedTraversable, int given in %s on line 76
Exception: Int to dict conversion
============== test_indirect (HH\darray) ==================

Warning: Argument 1 to HH\darray() must be of type HH\KeyedTraversable, string given in %s on line 76
Exception: String to dict conversion
============== test_indirect (HH\darray) ==================

Warning: Argument 1 to HH\darray() must be of type HH\KeyedTraversable, float given in %s on line 76
Exception: Double to dict conversion
============== test_indirect (HH\darray) ==================
dict(0) {
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(4) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  int(4)
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(3) {
  ["a"]=>
  int(100)
  ["b"]=>
  int(200)
  ["c"]=>
  int(300)
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(0) {
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(4) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  int(4)
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(0) {
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(2) {
  [1]=>
  string(1) "a"
  [2]=>
  string(1) "b"
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(0) {
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(3) {
  [100]=>
  int(100)
  ["abc"]=>
  string(3) "abc"
  [200]=>
  int(200)
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================

Warning: Argument 1 to HH\darray() must be of type HH\KeyedTraversable, %SFile given in %s on line 76
Exception: Resource to dict conversion
============== test_indirect (HH\darray) ==================

Warning: Argument 1 to HH\darray() must be of type HH\KeyedTraversable, stdClass given in %s on line 76
Exception: Non-iterable object to dict conversion
============== test_indirect (HH\darray) ==================

Warning: Argument 1 to HH\darray() must be of type HH\KeyedTraversable, IterableObj given in %s on line 76
dict(3) {
  [100]=>
  string(3) "abc"
  [200]=>
  string(3) "def"
  [300]=>
  string(3) "ghi"
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================

Warning: Argument 1 to HH\darray() must be of type HH\KeyedTraversable, ThrowIterableObj given in %s on line 76
Exception: ThrowIterableObj
============== test_indirect (HH\darray) ==================

Warning: Argument 1 to HH\darray() must be of type HH\KeyedTraversable, AggregateObj given in %s on line 76
dict(3) {
  [100]=>
  string(3) "abc"
  [200]=>
  string(3) "def"
  [300]=>
  string(3) "ghi"
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(2) {
  [100]=>
  string(3) "abc"
  ["100"]=>
  string(3) "def"
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(2) {
  [100]=>
  int(100)
  ["100"]=>
  string(3) "100"
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(3) {
  [0]=>
  int(100)
  [1]=>
  int(200)
  [2]=>
  int(300)
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(4) {
  ["a"]=>
  string(1) "a"
  ["b"]=>
  string(1) "b"
  ["c"]=>
  string(1) "c"
  ["d"]=>
  string(1) "d"
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(3) {
  [100]=>
  string(1) "a"
  [200]=>
  string(1) "b"
  [300]=>
  string(1) "c"
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(2) {
  [0]=>
  string(1) "a"
  [1]=>
  int(100)
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(0) {
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(3) {
  [0]=>
  string(1) "a"
  [1]=>
  string(1) "b"
  [2]=>
  string(1) "c"
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(0) {
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(3) {
  [0]=>
  string(1) "x"
  [1]=>
  string(1) "y"
  [2]=>
  string(1) "z"
}
bool(false)
bool(true)
============== test_indirect (HH\darray) ==================
dict(2) {
  ["key1"]=>
  int(111)
  ["key2"]=>
  int(222)
}
bool(false)
bool(true)
